{"version":3,"file":"browser.js","sources":["../src/opentelemetry-js/api/src/platform/browser/globalThis.ts","../src/opentelemetry-js/api/src/version.ts","../src/opentelemetry-js/api/src/internal/semver.ts","../src/opentelemetry-js/api/src/internal/global-utils.ts","../src/opentelemetry-js/api/src/diag/ComponentLogger.ts","../src/opentelemetry-js/api/src/diag/types.ts","../src/opentelemetry-js/api/src/api/diag.ts","../src/opentelemetry-js/api/src/diag/internal/logLevelLogger.ts","../src/opentelemetry-js/api/src/baggage/internal/baggage-impl.ts","../src/opentelemetry-js/api/src/baggage/internal/symbol.ts","../src/opentelemetry-js/api/src/baggage/utils.ts","../src/opentelemetry-js/api/src/context/context.ts","../src/opentelemetry-js/api/src/diag/consoleLogger.ts","../src/opentelemetry-js/api/src/metrics/NoopMeter.ts","../src/opentelemetry-js/api/src/metrics/Metric.ts","../src/opentelemetry-js/api/src/propagation/TextMapPropagator.ts","../src/opentelemetry-js/api/src/api/context.ts","../src/opentelemetry-js/api/src/context/NoopContextManager.ts","../src/opentelemetry-js/api/src/trace/trace_flags.ts","../src/opentelemetry-js/api/src/trace/invalid-span-constants.ts","../src/opentelemetry-js/api/src/trace/NonRecordingSpan.ts","../src/opentelemetry-js/api/src/trace/context-utils.ts","../src/opentelemetry-js/api/src/trace/spancontext-utils.ts","../src/opentelemetry-js/api/src/trace/NoopTracer.ts","../src/opentelemetry-js/api/src/trace/ProxyTracer.ts","../src/opentelemetry-js/api/src/trace/ProxyTracerProvider.ts","../src/opentelemetry-js/api/src/trace/NoopTracerProvider.ts","../src/opentelemetry-js/api/src/trace/SamplingResult.ts","../src/opentelemetry-js/api/src/trace/span_kind.ts","../src/opentelemetry-js/api/src/trace/status.ts","../src/opentelemetry-js/api/src/trace/internal/tracestate-validators.ts","../src/opentelemetry-js/api/src/trace/internal/tracestate-impl.ts","../src/opentelemetry-js/api/src/context-api.ts","../src/opentelemetry-js/api/src/diag-api.ts","../src/opentelemetry-js/api/src/metrics/NoopMeterProvider.ts","../src/opentelemetry-js/api/src/api/metrics.ts","../src/opentelemetry-js/api/src/metrics-api.ts","../src/opentelemetry-js/api/src/baggage/context-helpers.ts","../src/opentelemetry-js/api/src/api/propagation.ts","../src/opentelemetry-js/api/src/propagation/NoopTextMapPropagator.ts","../src/opentelemetry-js/api/src/propagation-api.ts","../src/opentelemetry-js/api/src/api/trace.ts","../src/opentelemetry-js/api/src/trace-api.ts","../src/opentelemetry-js/api/src/index.ts","../src/opentelemetry-js/api/src/trace/internal/utils.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/trace/suppress-tracing.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/baggage/constants.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/baggage/utils.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/baggage/propagation/W3CBaggagePropagator.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/common/attributes.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/common/global-error-handler.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/common/logging-error-handler.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/sampling.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/platform/browser/globalThis.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/environment.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/platform/browser/environment.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/platform/browser/hex-to-base64.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/platform/browser/RandomIdGenerator.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/platform/browser/performance.ts","../src/opentelemetry-js/packages/opentelemetry-semantic-conventions/src/trace/SemanticAttributes.ts","../src/opentelemetry-js/packages/opentelemetry-semantic-conventions/src/resource/SemanticResourceAttributes.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/platform/browser/sdk-info.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/version.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/common/time.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/ExportResult.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/propagation/composite.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/internal/validators.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/trace/TraceState.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/trace/W3CTraceContextPropagator.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/trace/rpc-metadata.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/lodash.merge.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/merge.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/url.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/promise.ts","../src/opentelemetry-js/packages/opentelemetry-core/src/utils/callback.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/Span.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/enums.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/Sampler.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/sampler/AlwaysOffSampler.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/sampler/AlwaysOnSampler.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/sampler/ParentBasedSampler.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/config.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/utility.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/platform/browser/export/BatchSpanProcessor.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/export/BatchSpanProcessorBase.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/platform/browser/RandomIdGenerator.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/Tracer.ts","../node_modules/tslib/tslib.es6.js","../src/opentelemetry-js/packages/opentelemetry-resources/src/Resource.ts","../src/opentelemetry-js/packages/opentelemetry-resources/src/platform/browser/default-service-name.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/MultiSpanProcessor.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/export/NoopSpanProcessor.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-base/src/BasicTracerProvider.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-web/src/enums/PerformanceTimingNames.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-web/src/StackContextManager.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-web/src/WebTracerProvider.ts","../src/opentelemetry-js/packages/opentelemetry-sdk-trace-web/src/utils.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation/src/autoLoaderUtils.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation/src/autoLoader.ts","../node_modules/shimmer/index.js","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-xml-http-request/src/enums/EventNames.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation/src/platform/browser/instrumentation.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation/src/instrumentation.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation/src/utils.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-xml-http-request/src/version.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-xml-http-request/src/enums/AttributeNames.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-xml-http-request/src/xhr.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-fetch/src/enums/AttributeNames.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-fetch/src/version.ts","../src/opentelemetry-js/experimental/packages/opentelemetry-instrumentation-fetch/src/fetch.ts","../src/sumologic-context-manager/utils.ts","../src/sumologic-context-manager/events.ts","../src/sumologic-context-manager/message-channel.ts","../src/sumologic-context-manager/observers.ts","../src/sumologic-context-manager/constants.ts","../src/sumologic-context-manager/promise.ts","../src/sumologic-context-manager/timers.ts","../src/sumologic-context-manager/index.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-document-load/src/enums/AttributeNames.ts","../node_modules/web-vitals/dist/web-vitals.js","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-document-load/src/enums/EventNames.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-document-load/src/utils.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-document-load/src/instrumentation.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-document-load/src/version.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-user-interaction/src/enums/AttributeNames.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-user-interaction/src/version.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts","../src/opentelemetry-js/experimental/packages/otlp-exporter-base/src/util.ts","../src/opentelemetry-js/experimental/packages/otlp-exporter-base/src/types.ts","../src/opentelemetry-js/experimental/packages/otlp-exporter-base/src/platform/browser/util.ts","../src/opentelemetry-js/experimental/packages/otlp-transformer/src/trace/types.ts","../src/opentelemetry-js/packages/sdk-metrics/src/export/AggregationTemporality.ts","../src/opentelemetry-js/packages/sdk-metrics/src/export/MetricData.ts","../src/opentelemetry-js/packages/sdk-metrics/src/aggregator/types.ts","../src/opentelemetry-js/packages/sdk-metrics/src/InstrumentDescriptor.ts","../src/opentelemetry-js/experimental/packages/otlp-transformer/src/common/internal.ts","../src/opentelemetry-js/experimental/packages/otlp-transformer/src/trace/internal.ts","../src/opentelemetry-js/experimental/packages/otlp-transformer/src/trace/index.ts","../src/opentelemetry-js/experimental/packages/exporter-trace-otlp-http/src/platform/browser/OTLPTraceExporter.ts","../src/opentelemetry-js/experimental/packages/otlp-exporter-base/src/OTLPExporterBase.ts","../src/opentelemetry-js/experimental/packages/otlp-exporter-base/src/platform/browser/OTLPExporterBrowserBase.ts","../src/sumologic-export-timestamp-enrichment-exporter/index.ts","../src/sumologic-span-processor/document-visibility-state.ts","../src/constants.ts","../src/sumologic-span-processor/find-longtask-context.ts","../src/sumologic-span-processor/utils.ts","../src/sumologic-span-processor/root-to-child-enrichment.ts","../src/sumologic-span-processor/trace-processor.ts","../src/sumologic-span-processor/trace-processor/drop-single-span-traces.ts","../src/sumologic-span-processor/trace-processor/longtasks.ts","../src/sumologic-span-processor/trace-processor/xhr.ts","../src/sumologic-span-processor/session-id.ts","../src/sumologic-span-processor/index.ts","../src/sumologic-span-processor/override-service-name.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-long-task/src/version.ts","../src/opentelemetry-js-contrib/plugins/web/opentelemetry-instrumentation-long-task/src/instrumentation.ts","../src/sumologic-logs-exporter/index.ts","../src/sumologic-logs-instrumentation/index.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/core too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.4.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      '@opentelemetry/api: All API registration versions must match'\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface LoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param options - A {@link LoggerOptions} object. If not provided, default values will be set.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, options?: LoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n  LoggerOptions,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger: DiagLogger,\n      optionsOrLogLevel: LoggerOptions | DiagLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogger, DiagLogFunction } from './types';\n\ntype ConsoleMapKeys = 'error' | 'warn' | 'info' | 'debug' | 'trace';\nconst consoleMap: { n: keyof DiagLogger; c: ConsoleMapKeys }[] = [\n  { n: 'error', c: 'error' },\n  { n: 'warn', c: 'warn' },\n  { n: 'info', c: 'info' },\n  { n: 'debug', c: 'debug' },\n  { n: 'verbose', c: 'trace' },\n];\n\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nexport class DiagConsoleLogger implements DiagLogger {\n  constructor() {\n    function _consoleFunc(funcName: ConsoleMapKeys): DiagLogFunction {\n      return function (...args) {\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          let theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n\n    for (let i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  public error!: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  public warn!: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  public info!: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario. Useful scenarios would be to log the execution\n   * order of async operations\n   */\n  public debug!: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  public verbose!: DiagLogFunction;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Histogram,\n  MetricOptions,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  MetricAttributes,\n  Observable,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue } from '../common/Attributes';\nimport { Context } from '../context/types';\nimport { BatchObservableResult, ObservableResult } from './ObservableResult';\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default ''\n   */\n  unit?: string;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> {\n  /**\n   * Increment value of counter by the input. Inputs must not be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface UpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Histogram<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\n/**\n * @deprecated please use {@link Attributes}\n */\nexport type MetricAttributes = Attributes;\n\n/**\n * @deprecated please use {@link AttributeValue}\n */\nexport type MetricAttributeValue = AttributeValue;\n\n/**\n * The observable callback for Observable instruments.\n */\nexport type ObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> = (\n  observableResult: ObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\n/**\n * The observable callback for a batch of Observable instruments.\n */\nexport type BatchObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> = (\n  observableResult: BatchObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\nexport interface Observable<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> {\n  /**\n   * Sets up a function that will be called whenever a metric collection is initiated.\n   *\n   * If the function is already in the list of callbacks for this Observable, the function is not added a second time.\n   */\n  addCallback(callback: ObservableCallback<AttributesTypes>): void;\n\n  /**\n   * Removes a callback previously registered with {@link Observable.addCallback}.\n   */\n  removeCallback(callback: ObservableCallback<AttributesTypes>): void;\n}\n\nexport type ObservableCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> = Observable<AttributesTypes>;\nexport type ObservableUpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> = Observable<AttributesTypes>;\nexport type ObservableGauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes\n> = Observable<AttributesTypes>;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum TraceFlags {\n  /** Represents no flag set. */\n  NONE = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1 << 0,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { validateKey, validateValue } from './tracestate-validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceStateImpl implements TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceStateImpl {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceStateImpl {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceStateImpl {\n    const traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport const context = ContextAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from './Meter';\nimport { MeterProvider } from './MeterProvider';\nimport { NOOP_METER } from './NoopMeter';\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nexport class NoopMeterProvider implements MeterProvider {\n  getMeter(_name: string, _version?: string, _options?: MeterOptions): Meter {\n    return NOOP_METER;\n  }\n}\n\nexport const NOOP_METER_PROVIDER = new NoopMeterProvider();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport const metrics = MetricsAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport const trace = TraceAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BaggageEntry, BaggageEntryMetadata, Baggage } from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport { Exception } from './common/Exception';\nexport { HrTime, TimeInput } from './common/Time';\nexport { Attributes, AttributeValue } from './common/Attributes';\n\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\nexport { Context, ContextManager } from './context/types';\nexport type { ContextAPI } from './api/context';\n\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport {\n  DiagLogFunction,\n  DiagLogger,\n  DiagLogLevel,\n  ComponentLoggerOptions,\n} from './diag/types';\nexport type { DiagAPI } from './api/diag';\n\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { MeterOptions, Meter } from './metrics/Meter';\nexport { MeterProvider } from './metrics/MeterProvider';\nexport {\n  ValueType,\n  Counter,\n  Histogram,\n  MetricOptions,\n  Observable,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  BatchObservableCallback,\n  MetricAttributes,\n  MetricAttributeValue,\n  ObservableCallback,\n} from './metrics/Metric';\nexport {\n  BatchObservableResult,\n  ObservableResult,\n} from './metrics/ObservableResult';\n\n// Propagation APIs\nexport {\n  TextMapPropagator,\n  TextMapSetter,\n  TextMapGetter,\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n} from './propagation/TextMapPropagator';\nexport type { PropagationAPI } from './api/propagation';\n\n// Trace APIs\nexport { SpanAttributes, SpanAttributeValue } from './trace/attributes';\nexport { Link } from './trace/link';\nexport { ProxyTracer, TracerDelegator } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { Sampler } from './trace/Sampler';\nexport { SamplingDecision, SamplingResult } from './trace/SamplingResult';\nexport { SpanContext } from './trace/span_context';\nexport { SpanKind } from './trace/span_kind';\nexport { Span } from './trace/span';\nexport { SpanOptions } from './trace/SpanOptions';\nexport { SpanStatus, SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { TraceState } from './trace/trace_state';\nexport { createTraceState } from './trace/internal/utils';\nexport { TracerProvider } from './trace/tracer_provider';\nexport { Tracer } from './trace/tracer';\nexport { TracerOptions } from './trace/tracer_options';\nexport {\n  isSpanContextValid,\n  isValidTraceId,\n  isValidSpanId,\n} from './trace/spancontext-utils';\nexport {\n  INVALID_SPANID,\n  INVALID_TRACEID,\n  INVALID_SPAN_CONTEXT,\n} from './trace/invalid-span-constants';\nexport type { TraceAPI } from './api/trace';\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n  context,\n  diag,\n  metrics,\n  propagation,\n  trace,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { TraceStateImpl } from './tracestate-impl';\n\nexport function createTraceState(rawTraceState?: string): TraceState {\n  return new TraceStateImpl(rawTraceState);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (keyPair.length !== 2) return;\n  const key = decodeURIComponent(keyPair[0].trim());\n  const value = decodeURIComponent(keyPair[1].trim());\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in typeof ENVIRONMENT_BOOLEAN_KEYS[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in typeof ENVIRONMENT_NUMBERS_KEYS[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in typeof ENVIRONMENT_LISTS_KEYS[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return typeof process !== 'undefined'\n    ? parseEnvironment(process.env as RAW_ENVIRONMENT)\n    : parseEnvironment(_globalThis as typeof globalThis & RAW_ENVIRONMENT);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\nimport { _globalThis } from './globalThis';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const globalEnv = parseEnvironment(\n    _globalThis as typeof globalThis & RAW_ENVIRONMENT\n  );\n  return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function hexToBase64(hexStr: string): string {\n  const hexStrLen = hexStr.length;\n  let hexAsciiCharsStr = '';\n  for (let i = 0; i < hexStrLen; i += 2) {\n    const hexPair = hexStr.substring(i, i + 2);\n    const hexVal = parseInt(hexPair, 16);\n    hexAsciiCharsStr += String.fromCharCode(hexVal);\n  }\n  return btoa(hexAsciiCharsStr);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IdGenerator } from '../../trace/IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n      // valid hex characters in the range 48-57 and 97-102\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n    return String.fromCharCode.apply(\n      null,\n      SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2)\n    );\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const otperformance = performance;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system',\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string',\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user',\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name',\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement',\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation',\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table',\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT:\n    'db.cassandra.speculative_execution_count',\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table',\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type',\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message',\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace',\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped',\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger',\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution',\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time',\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name',\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time',\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron',\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart',\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name',\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region',\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport',\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip',\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port',\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name',\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip',\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port',\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name',\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service',\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id',\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role',\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope',\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id',\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name',\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function',\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace',\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath',\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno',\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method',\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url',\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target',\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host',\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme',\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code',\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor',\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent',\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.request_content_length_uncompressed',\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.response_content_length_uncompressed',\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name',\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route',\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip',\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY:\n    'aws.dynamodb.provisioned_read_capacity',\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY:\n    'aws.dynamodb.provisioned_write_capacity',\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES:\n    'aws.dynamodb.global_secondary_indexes',\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES:\n    'aws.dynamodb.global_secondary_index_updates',\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system',\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination',\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol',\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url',\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id',\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES:\n    'messaging.message_payload_compressed_size_bytes',\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation',\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system',\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service',\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method',\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type',\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id',\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\n\nexport const DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql',\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql',\n  /** MySQL. */\n  MYSQL: 'mysql',\n  /** Oracle Database. */\n  ORACLE: 'oracle',\n  /** IBM Db2. */\n  DB2: 'db2',\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql',\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift',\n  /** Apache Hive. */\n  HIVE: 'hive',\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape',\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb',\n  /** Progress Database. */\n  PROGRESS: 'progress',\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb',\n  /** SAP HANA. */\n  HANADB: 'hanadb',\n  /** Ingres. */\n  INGRES: 'ingres',\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql',\n  /** EnterpriseDB. */\n  EDB: 'edb',\n  /** InterSystems Caché. */\n  CACHE: 'cache',\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas',\n  /** Firebird. */\n  FIREBIRD: 'firebird',\n  /** Apache Derby. */\n  DERBY: 'derby',\n  /** FileMaker. */\n  FILEMAKER: 'filemaker',\n  /** Informix. */\n  INFORMIX: 'informix',\n  /** InstantDB. */\n  INSTANTDB: 'instantdb',\n  /** InterBase. */\n  INTERBASE: 'interbase',\n  /** MariaDB. */\n  MARIADB: 'mariadb',\n  /** Netezza. */\n  NETEZZA: 'netezza',\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive',\n  /** PointBase. */\n  POINTBASE: 'pointbase',\n  /** SQLite. */\n  SQLITE: 'sqlite',\n  /** Sybase. */\n  SYBASE: 'sybase',\n  /** Teradata. */\n  TERADATA: 'teradata',\n  /** Vertica. */\n  VERTICA: 'vertica',\n  /** H2. */\n  H2: 'h2',\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion',\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra',\n  /** Apache HBase. */\n  HBASE: 'hbase',\n  /** MongoDB. */\n  MONGODB: 'mongodb',\n  /** Redis. */\n  REDIS: 'redis',\n  /** Couchbase. */\n  COUCHBASE: 'couchbase',\n  /** CouchDB. */\n  COUCHDB: 'couchdb',\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb',\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb',\n  /** Neo4j. */\n  NEO4J: 'neo4j',\n  /** Apache Geode. */\n  GEODE: 'geode',\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch',\n  /** Memcached. */\n  MEMCACHED: 'memcached',\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb',\n} as const;\nexport type DbSystemValues = typeof DbSystemValues[keyof typeof DbSystemValues];\n\nexport const DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all',\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum',\n  /** quorum. */\n  QUORUM: 'quorum',\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum',\n  /** one. */\n  ONE: 'one',\n  /** two. */\n  TWO: 'two',\n  /** three. */\n  THREE: 'three',\n  /** local_one. */\n  LOCAL_ONE: 'local_one',\n  /** any. */\n  ANY: 'any',\n  /** serial. */\n  SERIAL: 'serial',\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial',\n} as const;\nexport type DbCassandraConsistencyLevelValues =\n  typeof DbCassandraConsistencyLevelValues[keyof typeof DbCassandraConsistencyLevelValues];\n\nexport const FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource',\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http',\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub',\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer',\n  /** If none of the others apply. */\n  OTHER: 'other',\n} as const;\nexport type FaasTriggerValues =\n  typeof FaasTriggerValues[keyof typeof FaasTriggerValues];\n\nexport const FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert',\n  /** When an object is modified. */\n  EDIT: 'edit',\n  /** When an object is deleted. */\n  DELETE: 'delete',\n} as const;\nexport type FaasDocumentOperationValues =\n  typeof FaasDocumentOperationValues[keyof typeof FaasDocumentOperationValues];\n\nexport const FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type FaasInvokedProviderValues =\n  typeof FaasInvokedProviderValues[keyof typeof FaasInvokedProviderValues];\n\nexport const NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp',\n  /** ip_udp. */\n  IP_UDP: 'ip_udp',\n  /** Another IP-based protocol. */\n  IP: 'ip',\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix',\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe',\n  /** In-process communication. */\n  INPROC: 'inproc',\n  /** Something else (non IP-based). */\n  OTHER: 'other',\n} as const;\nexport type NetTransportValues =\n  typeof NetTransportValues[keyof typeof NetTransportValues];\n\nexport const NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi',\n  /** wired. */\n  WIRED: 'wired',\n  /** cell. */\n  CELL: 'cell',\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable',\n  /** unknown. */\n  UNKNOWN: 'unknown',\n} as const;\nexport type NetHostConnectionTypeValues =\n  typeof NetHostConnectionTypeValues[keyof typeof NetHostConnectionTypeValues];\n\nexport const NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs',\n  /** EDGE. */\n  EDGE: 'edge',\n  /** UMTS. */\n  UMTS: 'umts',\n  /** CDMA. */\n  CDMA: 'cdma',\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0',\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a',\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt',\n  /** HSDPA. */\n  HSDPA: 'hsdpa',\n  /** HSUPA. */\n  HSUPA: 'hsupa',\n  /** HSPA. */\n  HSPA: 'hspa',\n  /** IDEN. */\n  IDEN: 'iden',\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b',\n  /** LTE. */\n  LTE: 'lte',\n  /** EHRPD. */\n  EHRPD: 'ehrpd',\n  /** HSPAP. */\n  HSPAP: 'hspap',\n  /** GSM. */\n  GSM: 'gsm',\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma',\n  /** IWLAN. */\n  IWLAN: 'iwlan',\n  /** 5G NR (New Radio). */\n  NR: 'nr',\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa',\n  /** LTE CA. */\n  LTE_CA: 'lte_ca',\n} as const;\nexport type NetHostConnectionSubtypeValues =\n  typeof NetHostConnectionSubtypeValues[keyof typeof NetHostConnectionSubtypeValues];\n\nexport const HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0',\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1',\n  /** HTTP 2. */\n  HTTP_2_0: '2.0',\n  /** SPDY protocol. */\n  SPDY: 'SPDY',\n  /** QUIC protocol. */\n  QUIC: 'QUIC',\n} as const;\nexport type HttpFlavorValues =\n  typeof HttpFlavorValues[keyof typeof HttpFlavorValues];\n\nexport const MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue',\n  /** A message sent to a topic. */\n  TOPIC: 'topic',\n} as const;\nexport type MessagingDestinationKindValues =\n  typeof MessagingDestinationKindValues[keyof typeof MessagingDestinationKindValues];\n\nexport const MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive',\n  /** process. */\n  PROCESS: 'process',\n} as const;\nexport type MessagingOperationValues =\n  typeof MessagingOperationValues[keyof typeof MessagingOperationValues];\n\nexport const RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0,\n  /** CANCELLED. */\n  CANCELLED: 1,\n  /** UNKNOWN. */\n  UNKNOWN: 2,\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3,\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4,\n  /** NOT_FOUND. */\n  NOT_FOUND: 5,\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6,\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7,\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8,\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9,\n  /** ABORTED. */\n  ABORTED: 10,\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11,\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12,\n  /** INTERNAL. */\n  INTERNAL: 13,\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14,\n  /** DATA_LOSS. */\n  DATA_LOSS: 15,\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16,\n} as const;\nexport type RpcGrpcStatusCodeValues =\n  typeof RpcGrpcStatusCodeValues[keyof typeof RpcGrpcStatusCodeValues];\n\nexport const MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT',\n  /** received. */\n  RECEIVED: 'RECEIVED',\n} as const;\nexport type MessageTypeValues =\n  typeof MessageTypeValues[keyof typeof MessageTypeValues];\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider',\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id',\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region',\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform',\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name',\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id',\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime',\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name',\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag',\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id',\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name',\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name',\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id',\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version',\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance',\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory',\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id',\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name',\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type',\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch',\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name',\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id',\n\n  /**\n   * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version',\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name',\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name',\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid',\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid',\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name',\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name',\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid',\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name',\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type',\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description',\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name',\n\n  /**\n   * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version',\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid',\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command',\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line',\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args',\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner',\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name',\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name',\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace',\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id',\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version',\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name',\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version',\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n\nexport const CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type CloudProviderValues =\n  typeof CloudProviderValues[keyof typeof CloudProviderValues];\n\nexport const CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2',\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs',\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks',\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda',\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm',\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks',\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions',\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service',\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run',\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine',\n} as const;\nexport type CloudPlatformValues =\n  typeof CloudPlatformValues[keyof typeof CloudPlatformValues];\n\nexport const AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2',\n  /** fargate. */\n  FARGATE: 'fargate',\n} as const;\nexport type AwsEcsLaunchtypeValues =\n  typeof AwsEcsLaunchtypeValues[keyof typeof AwsEcsLaunchtypeValues];\n\nexport const HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64',\n  /** ARM32. */\n  ARM32: 'arm32',\n  /** ARM64. */\n  ARM64: 'arm64',\n  /** Itanium. */\n  IA64: 'ia64',\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32',\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64',\n  /** 32-bit x86. */\n  X86: 'x86',\n} as const;\nexport type HostArchValues = typeof HostArchValues[keyof typeof HostArchValues];\n\nexport const OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows',\n  /** Linux. */\n  LINUX: 'linux',\n  /** Apple Darwin. */\n  DARWIN: 'darwin',\n  /** FreeBSD. */\n  FREEBSD: 'freebsd',\n  /** NetBSD. */\n  NETBSD: 'netbsd',\n  /** OpenBSD. */\n  OPENBSD: 'openbsd',\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd',\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux',\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix',\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris',\n  /** IBM z/OS. */\n  Z_OS: 'z_os',\n} as const;\nexport type OsTypeValues = typeof OsTypeValues[keyof typeof OsTypeValues];\n\nexport const TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp',\n  /** dotnet. */\n  DOTNET: 'dotnet',\n  /** erlang. */\n  ERLANG: 'erlang',\n  /** go. */\n  GO: 'go',\n  /** java. */\n  JAVA: 'java',\n  /** nodejs. */\n  NODEJS: 'nodejs',\n  /** php. */\n  PHP: 'php',\n  /** python. */\n  PYTHON: 'python',\n  /** ruby. */\n  RUBY: 'ruby',\n  /** webjs. */\n  WEBJS: 'webjs',\n} as const;\nexport type TelemetrySdkLanguageValues =\n  typeof TelemetrySdkLanguageValues[keyof typeof TelemetrySdkLanguageValues];\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  TelemetrySdkLanguageValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SemanticResourceAttributes.TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'browser',\n  [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n    TelemetrySdkLanguageValues.WEBJS,\n  [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]: VERSION,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.9.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return Math.round(time[0] * 1e3 + time[1] / 1e6);\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return Math.round(time[0] * 1e6 + time[1] / 1e3);\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(private _callback: T, private _that: This) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  diag,\n  Exception,\n  HrTime,\n  Link,\n  Span as APISpan,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContext,\n  SpanKind,\n  SpanStatus,\n  SpanStatusCode,\n  TimeInput,\n} from '@opentelemetry/api';\nimport {\n  addHrTimes,\n  millisToHrTime,\n  getTimeOrigin,\n  hrTime,\n  hrTimeDuration,\n  InstrumentationLibrary,\n  isAttributeValue,\n  isTimeInput,\n  isTimeInputHrTime,\n  otperformance,\n  sanitizeAttributes,\n} from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { SpanProcessor } from './SpanProcessor';\nimport { TimedEvent } from './TimedEvent';\nimport { Tracer } from './Tracer';\nimport { SpanLimits } from './types';\n\n/**\n * This class represents a span.\n */\nexport class Span implements APISpan, ReadableSpan {\n  // Below properties are included to implement ReadableSpan for export\n  // purposes but are not intended to be written-to directly.\n  private readonly _spanContext: SpanContext;\n  readonly kind: SpanKind;\n  readonly parentSpanId?: string;\n  readonly attributes: SpanAttributes = {};\n  readonly links: Link[] = [];\n  readonly events: TimedEvent[] = [];\n  readonly startTime: HrTime;\n  readonly resource: Resource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n  name: string;\n  status: SpanStatus = {\n    code: SpanStatusCode.UNSET,\n  };\n  endTime: HrTime = [0, 0];\n  private _ended = false;\n  private _duration: HrTime = [-1, -1];\n  private readonly _spanProcessor: SpanProcessor;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _attributeValueLengthLimit: number;\n\n  private readonly _performanceStartTime: number;\n  private readonly _performanceOffset: number;\n  private readonly _startTimeProvided: boolean;\n\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  constructor(\n    parentTracer: Tracer,\n    context: Context,\n    spanName: string,\n    spanContext: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    links: Link[] = [],\n    startTime?: TimeInput,\n    _deprecatedClock?: unknown // keeping this argument even though it is unused to ensure backwards compatibility\n  ) {\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n\n    const now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset =\n      now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n\n    this.startTime = this._getTime(startTime ?? now);\n\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n    this._attributeValueLengthLimit =\n      this._spanLimits.attributeValueLengthLimit || 0;\n  }\n\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  setAttribute(key: string, value?: SpanAttributeValue): this;\n  setAttribute(key: string, value: unknown): this {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n        this._spanLimits.attributeCountLimit! &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  }\n\n  setAttributes(attributes: SpanAttributes): this {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    timeStamp?: TimeInput\n  ): this {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      diag.warn('No events allowed.');\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit!) {\n      diag.warn('Dropping extra events.');\n      this.events.shift();\n    }\n\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n\n    const attributes = sanitizeAttributes(attributesOrStartTime);\n    this.events.push({\n      name,\n      attributes,\n      time: this._getTime(timeStamp),\n    });\n    return this;\n  }\n\n  setStatus(status: SpanStatus): this {\n    if (this._isSpanEnded()) return this;\n    this.status = status;\n    return this;\n  }\n\n  updateName(name: string): this {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  }\n\n  end(endTime?: TimeInput): void {\n    if (this._isSpanEnded()) {\n      diag.error('You can only call end() on a span once.');\n      return;\n    }\n    this._ended = true;\n\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n\n    if (this._duration[0] < 0) {\n      diag.warn(\n        'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',\n        this.startTime,\n        this.endTime\n      );\n      this.endTime = this.startTime.slice() as HrTime;\n      this._duration = [0, 0];\n    }\n\n    this._spanProcessor.onEnd(this);\n  }\n\n  private _getTime(inp?: TimeInput): HrTime {\n    if (typeof inp === 'number' && inp < otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n\n    const msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  }\n\n  isRecording(): boolean {\n    return this._ended === false;\n  }\n\n  recordException(exception: Exception, time?: TimeInput): void {\n    const attributes: SpanAttributes = {};\n    if (typeof exception === 'string') {\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] =\n          exception.code.toString();\n      } else if (exception.name) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n\n    // these are minimum requirements from spec\n    if (\n      attributes[SemanticAttributes.EXCEPTION_TYPE] ||\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE]\n    ) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      diag.warn(`Failed to record an exception ${exception}`);\n    }\n  }\n\n  get duration(): HrTime {\n    return this._duration;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  private _isSpanEnded(): boolean {\n    if (this._ended) {\n      diag.warn(\n        `Can not execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`\n      );\n    }\n    return this._ended;\n  }\n\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substr(0, limit);\n  }\n\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with trucated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  private _truncateToSize(value: SpanAttributeValue): SpanAttributeValue {\n    const limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, Link, SpanAttributes, SpanKind } from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\nimport { Sampler, SamplingResult } from '../Sampler';\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { SpanExporter } from '../../../export/SpanExporter';\nimport { BatchSpanProcessorBrowserConfig } from '../../../types';\n\nexport class BatchSpanProcessor extends BatchSpanProcessorBase<BatchSpanProcessorBrowserConfig> {\n  private _visibilityChangeListener?: () => void;\n  private _pageHideListener?: () => void;\n\n  constructor(\n    _exporter: SpanExporter,\n    config?: BatchSpanProcessorBrowserConfig\n  ) {\n    super(_exporter, config);\n    this.onInit(config);\n  }\n\n  private onInit(config?: BatchSpanProcessorBrowserConfig): void {\n    if (\n      config?.disableAutoFlushOnDocumentHide !== true &&\n      typeof document !== 'undefined'\n    ) {\n      this._visibilityChangeListener = () => {\n        if (document.visibilityState === 'hidden') {\n          void this.forceFlush();\n        }\n      };\n      this._pageHideListener = () => {\n        void this.forceFlush();\n      };\n      document.addEventListener(\n        'visibilitychange',\n        this._visibilityChangeListener\n      );\n\n      // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n      document.addEventListener('pagehide', this._pageHideListener);\n    }\n  }\n\n  protected onShutdown(): void {\n    if (typeof document !== 'undefined') {\n      if (this._visibilityChangeListener) {\n        document.removeEventListener(\n          'visibilitychange',\n          this._visibilityChangeListener\n        );\n      }\n      if (this._pageHideListener) {\n        document.removeEventListener('pagehide', this._pageHideListener);\n      }\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Context, diag, TraceFlags } from '@opentelemetry/api';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  suppressTracing,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { BufferConfig } from '../types';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport abstract class BatchSpanProcessorBase<T extends BufferConfig>\n  implements SpanProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _finishedSpans: ReadableSpan[] = [];\n  private _timer: number | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n\n  constructor(private readonly _exporter: SpanExporter, config?: T) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      typeof config?.maxExportBatchSize === 'number'\n        ? config.maxExportBatchSize\n        : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize =\n      typeof config?.maxQueueSize === 'number'\n        ? config.maxQueueSize\n        : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      typeof config?.scheduledDelayMillis === 'number'\n        ? config.scheduledDelayMillis\n        : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      typeof config?.exportTimeoutMillis === 'number'\n        ? config.exportTimeoutMillis\n        : env.OTEL_BSP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  // does nothing.\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    this._addToBuffer(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown() {\n    return Promise.resolve()\n      .then(() => {\n        return this.onShutdown();\n      })\n      .then(() => {\n        return this._flushAll();\n      })\n      .then(() => {\n        return this._exporter.shutdown();\n      });\n  }\n\n  /** Add a span in the buffer. */\n  private _addToBuffer(span: ReadableSpan) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n      return;\n    }\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises: Promise<void>[] = [];\n      // calculate number of batches\n      const count = Math.ceil(\n        this._finishedSpans.length / this._maxExportBatchSize\n      );\n      for (let i = 0, j = count; i < j; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), () => {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside of the execution of this callback.\n        this._exporter.export(\n          this._finishedSpans.splice(0, this._maxExportBatchSize),\n          result => {\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(\n                result.error ??\n                  new Error('BatchSpanProcessor: span export failed')\n              );\n            }\n          }\n        );\n      });\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._timer !== undefined) return;\n    this._timer = window.setTimeout(() => {\n      this._flushOneBatch()\n        .then(() => {\n          if (this._finishedSpans.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          globalErrorHandler(e);\n        });\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n      // valid hex characters in the range 48-57 and 97-102\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n    return String.fromCharCode.apply(\n      null,\n      SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2)\n    );\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationLibrary,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from './BasicTracerProvider';\nimport { Span } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly resource: Resource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: TracerConfig,\n    private _tracerProvider: BasicTracerProvider\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let traceId;\n    let traceState;\n    let parentSpanId;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    const span = new Span(\n      this,\n      context,\n      name,\n      spanContext,\n      spanKind,\n      parentSpanId,\n      links,\n      options.startTime\n    );\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n    span.setAttributes(initAttributes);\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this._tracerProvider.getActiveSpanProcessor();\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource {\n  static readonly EMPTY = new Resource({});\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): Resource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that indentifies the SDK in use.\n   */\n  static default(): Resource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    readonly attributes: ResourceAttributes\n  ) {}\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: Resource | null): Resource {\n    if (!other || !Object.keys(other.attributes).length) return this;\n\n    // SpanAttributes from resource overwrite attributes from other resource.\n    const mergedAttributes = Object.assign(\n      {},\n      this.attributes,\n      other.attributes\n    );\n    return new Resource(mergedAttributes);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return 'unknown_service';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\nimport { SpanProcessor } from './SpanProcessor';\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor implements SpanProcessor {\n  constructor(private readonly _spanProcessors: SpanProcessor[]) {}\n\n  forceFlush(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(resolve => {\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(error => {\n          globalErrorHandler(\n            error || new Error('MultiSpanProcessor: forceFlush failed')\n          );\n          resolve();\n        });\n    });\n  }\n\n  onStart(span: Span, context: Context): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onStart(span, context);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onEnd(span);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then(() => {\n        resolve();\n      }, reject);\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  propagation,\n  TextMapPropagator,\n  trace,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n  getEnv,\n  merge,\n} from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { SpanProcessor, Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { SDKRegistrationConfig, TracerConfig } from './types';\nimport { SpanExporter } from './export/SpanExporter';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\n\nexport type PROPAGATOR_FACTORY = () => TextMapPropagator;\nexport type EXPORTER_FACTORY = () => SpanExporter;\n\nexport enum ForceFlushState {\n  'resolved',\n  'timeout',\n  'error',\n  'unresolved',\n}\n\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider implements TracerProvider {\n  protected static readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ['tracecontext', () => new W3CTraceContextPropagator()],\n    ['baggage', () => new W3CBaggagePropagator()],\n  ]);\n\n  protected static readonly _registeredExporters = new Map<\n    string,\n    EXPORTER_FACTORY\n  >();\n\n  private readonly _config: TracerConfig;\n  private readonly _registeredSpanProcessors: SpanProcessor[] = [];\n  private readonly _tracers: Map<string, Tracer> = new Map();\n\n  activeSpanProcessor: SpanProcessor;\n  readonly resource: Resource;\n\n  constructor(config: TracerConfig = {}) {\n    const mergedConfig = merge(\n      {},\n      loadDefaultConfig(),\n      reconfigureLimits(config)\n    );\n    this.resource = mergedConfig.resource ?? Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n\n    const defaultExporter = this._buildExporterFromEnv();\n    if (defaultExporter !== undefined) {\n      const batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n\n  getTracer(\n    name: string,\n    version?: string,\n    options?: { schemaUrl?: string }\n  ): Tracer {\n    const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(\n        key,\n        new Tracer(\n          { name, version, schemaUrl: options?.schemaUrl },\n          this._config,\n          this\n        )\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  addSpanProcessor(spanProcessor: SpanProcessor): void {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current span processor',\n            err\n          )\n        );\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(\n      this._registeredSpanProcessors\n    );\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this.activeSpanProcessor;\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    const timeout = this._config.forceFlushTimeoutMillis;\n    const promises = this._registeredSpanProcessors.map(\n      (spanProcessor: SpanProcessor) => {\n        return new Promise(resolve => {\n          let state: ForceFlushState;\n          const timeoutInterval = setTimeout(() => {\n            resolve(\n              new Error(\n                `Span processor did not completed within timeout period of ${timeout} ms`\n              )\n            );\n            state = ForceFlushState.timeout;\n          }, timeout);\n\n          spanProcessor\n            .forceFlush()\n            .then(() => {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            })\n            .catch(error => {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n        });\n      }\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      Promise.all(promises)\n        .then(results => {\n          const errors = results.filter(\n            result => result !== ForceFlushState.resolved\n          );\n          if (errors.length > 0) {\n            reject(errors);\n          } else {\n            resolve();\n          }\n        })\n        .catch(error => reject([error]));\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.activeSpanProcessor.shutdown();\n  }\n\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  protected _getPropagator(name: string): TextMapPropagator | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredPropagators.get(name)?.();\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredExporters.get(name)?.();\n  }\n\n  protected _buildPropagatorFromEnv(): TextMapPropagator | undefined {\n    // per spec, propagators from env must be deduplicated\n    const uniquePropagatorNames = Array.from(\n      new Set(getEnv().OTEL_PROPAGATORS)\n    );\n\n    const propagators = uniquePropagatorNames.map(name => {\n      const propagator = this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\n          `Propagator \"${name}\" requested through environment variable is unavailable.`\n        );\n      }\n\n      return propagator;\n    });\n    const validPropagators = propagators.reduce<TextMapPropagator[]>(\n      (list, item) => {\n        if (item) {\n          list.push(item);\n        }\n        return list;\n      },\n      []\n    );\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators,\n      });\n    }\n  }\n\n  protected _buildExporterFromEnv(): SpanExporter | undefined {\n    const exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    const exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\n        `Exporter \"${exporterName}\" requested through environment variable is unavailable.`\n      );\n    }\n    return exporter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum PerformanceTimingNames {\n  CONNECT_END = 'connectEnd',\n  CONNECT_START = 'connectStart',\n  DECODED_BODY_SIZE = 'decodedBodySize',\n  DOM_COMPLETE = 'domComplete',\n  DOM_CONTENT_LOADED_EVENT_END = 'domContentLoadedEventEnd',\n  DOM_CONTENT_LOADED_EVENT_START = 'domContentLoadedEventStart',\n  DOM_INTERACTIVE = 'domInteractive',\n  DOMAIN_LOOKUP_END = 'domainLookupEnd',\n  DOMAIN_LOOKUP_START = 'domainLookupStart',\n  ENCODED_BODY_SIZE = 'encodedBodySize',\n  FETCH_START = 'fetchStart',\n  LOAD_EVENT_END = 'loadEventEnd',\n  LOAD_EVENT_START = 'loadEventStart',\n  NAVIGATION_START = 'navigationStart',\n  REDIRECT_END = 'redirectEnd',\n  REDIRECT_START = 'redirectStart',\n  REQUEST_START = 'requestStart',\n  RESPONSE_END = 'responseEnd',\n  RESPONSE_START = 'responseStart',\n  SECURE_CONNECTION_START = 'secureConnectionStart',\n  UNLOAD_EVENT_END = 'unloadEventEnd',\n  UNLOAD_EVENT_START = 'unloadEventStart',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\n\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nexport class StackContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Keeps the reference to current context\n   */\n  public _currentContext = ROOT_CONTEXT;\n\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _bindFunction<T extends Function>(\n    context = ROOT_CONTEXT,\n    target: T\n  ): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    return contextWrapper as unknown as T;\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    return this._currentContext;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  disable(): this {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n\n    try {\n      return fn.call(thisArg, ...args);\n    } finally {\n      this._currentContext = previousContext;\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BasicTracerProvider,\n  SDKRegistrationConfig,\n  TracerConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n\n/**\n * WebTracerConfig provides an interface for configuring a Web Tracer.\n */\nexport type WebTracerConfig = TracerConfig;\n\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nexport class WebTracerProvider extends BasicTracerProvider {\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n  constructor(config: WebTracerConfig = {}) {\n    super(config);\n\n    if ((config as SDKRegistrationConfig).contextManager) {\n      throw (\n        'contextManager should be defined in register method not in' +\n        ' constructor'\n      );\n    }\n    if ((config as SDKRegistrationConfig).propagator) {\n      throw 'propagator should be defined in register method not in constructor';\n    }\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  override register(config: SDKRegistrationConfig = {}): void {\n    if (config.contextManager === undefined) {\n      config.contextManager = new StackContextManager();\n    }\n    if (config.contextManager) {\n      config.contextManager.enable();\n    }\n\n    super.register(config);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PerformanceEntries,\n  PerformanceResourceTimingInfo,\n  PropagateTraceHeaderCorsUrls,\n} from './types';\nimport { PerformanceTimingNames as PTN } from './enums/PerformanceTimingNames';\nimport * as api from '@opentelemetry/api';\nimport {\n  hrTimeToNanoseconds,\n  timeInputToHrTime,\n  urlMatches,\n} from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\n// Used to normalize relative URLs\nlet urlNormalizingAnchor: HTMLAnchorElement | undefined;\nfunction getUrlNormalizingAnchor(): HTMLAnchorElement {\n  if (!urlNormalizingAnchor) {\n    urlNormalizingAnchor = document.createElement('a');\n  }\n\n  return urlNormalizingAnchor;\n}\n\n/**\n * Helper function to be able to use enum as typed key in type and in interface when using forEach\n * @param obj\n * @param key\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function hasKey<O>(obj: O, key: keyof any): key is keyof O {\n  return key in obj;\n}\n\n/**\n * Helper function for starting an event on span based on {@link PerformanceEntries}\n * @param span\n * @param performanceName name of performance entry for time start\n * @param entries\n */\nexport function addSpanNetworkEvent(\n  span: api.Span,\n  performanceName: string,\n  entries: PerformanceEntries\n): api.Span | undefined {\n  if (\n    hasKey(entries, performanceName) &&\n    typeof entries[performanceName] === 'number'\n  ) {\n    span.addEvent(performanceName, entries[performanceName]);\n    return span;\n  }\n  return undefined;\n}\n\n/**\n * Helper function for adding network events\n * @param span\n * @param resource\n */\nexport function addSpanNetworkEvents(\n  span: api.Span,\n  resource: PerformanceEntries\n): void {\n  addSpanNetworkEvent(span, PTN.FETCH_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_END, resource);\n  addSpanNetworkEvent(span, PTN.CONNECT_START, resource);\n  addSpanNetworkEvent(span, PTN.SECURE_CONNECTION_START, resource);\n  addSpanNetworkEvent(span, PTN.CONNECT_END, resource);\n  addSpanNetworkEvent(span, PTN.REQUEST_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_END, resource);\n  const encodedLength = resource[PTN.ENCODED_BODY_SIZE];\n  if (encodedLength !== undefined) {\n    span.setAttribute(\n      SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH,\n      encodedLength\n    );\n  }\n  const decodedLength = resource[PTN.DECODED_BODY_SIZE];\n  // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)\n  if (decodedLength !== undefined && encodedLength !== decodedLength) {\n    span.setAttribute(\n      SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n      decodedLength\n    );\n  }\n}\n\n/**\n * sort resources by startTime\n * @param filteredResources\n */\nexport function sortResources(\n  filteredResources: PerformanceResourceTiming[]\n): PerformanceResourceTiming[] {\n  return filteredResources.slice().sort((a, b) => {\n    const valueA = a[PTN.FETCH_START];\n    const valueB = b[PTN.FETCH_START];\n    if (valueA > valueB) {\n      return 1;\n    } else if (valueA < valueB) {\n      return -1;\n    }\n    return 0;\n  });\n}\n\n/**\n * Get closest performance resource ignoring the resources that have been\n * already used.\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n * @param initiatorType\n */\nexport function getResource(\n  spanUrl: string,\n  startTimeHR: api.HrTime,\n  endTimeHR: api.HrTime,\n  resources: PerformanceResourceTiming[],\n  ignoredResources: WeakSet<PerformanceResourceTiming> = new WeakSet<PerformanceResourceTiming>(),\n  initiatorType?: string\n): PerformanceResourceTimingInfo {\n  // de-relativize the URL before usage (does no harm to absolute URLs)\n  const parsedSpanUrl = parseUrl(spanUrl);\n  spanUrl = parsedSpanUrl.toString();\n\n  const filteredResources = filterResourcesForSpan(\n    spanUrl,\n    startTimeHR,\n    endTimeHR,\n    resources,\n    ignoredResources,\n    initiatorType\n  );\n\n  if (filteredResources.length === 0) {\n    return {\n      mainRequest: undefined,\n    };\n  }\n  if (filteredResources.length === 1) {\n    return {\n      mainRequest: filteredResources[0],\n    };\n  }\n  const sorted = sortResources(filteredResources);\n\n  if (parsedSpanUrl.origin !== location.origin && sorted.length > 1) {\n    let corsPreFlightRequest: PerformanceResourceTiming | undefined = sorted[0];\n    let mainRequest: PerformanceResourceTiming = findMainRequest(\n      sorted,\n      corsPreFlightRequest[PTN.RESPONSE_END],\n      endTimeHR\n    );\n\n    const responseEnd = corsPreFlightRequest[PTN.RESPONSE_END];\n    const fetchStart = mainRequest[PTN.FETCH_START];\n\n    // no corsPreFlightRequest\n    if (fetchStart < responseEnd) {\n      mainRequest = corsPreFlightRequest;\n      corsPreFlightRequest = undefined;\n    }\n\n    return {\n      corsPreFlightRequest,\n      mainRequest,\n    };\n  } else {\n    return {\n      mainRequest: filteredResources[0],\n    };\n  }\n}\n\n/**\n * Will find the main request skipping the cors pre flight requests\n * @param resources\n * @param corsPreFlightRequestEndTime\n * @param spanEndTimeHR\n */\nfunction findMainRequest(\n  resources: PerformanceResourceTiming[],\n  corsPreFlightRequestEndTime: number,\n  spanEndTimeHR: api.HrTime\n): PerformanceResourceTiming {\n  const spanEndTime = hrTimeToNanoseconds(spanEndTimeHR);\n  const minTime = hrTimeToNanoseconds(\n    timeInputToHrTime(corsPreFlightRequestEndTime)\n  );\n\n  let mainRequest: PerformanceResourceTiming = resources[1];\n  let bestGap;\n\n  const length = resources.length;\n  for (let i = 1; i < length; i++) {\n    const resource = resources[i];\n    const resourceStartTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.FETCH_START])\n    );\n\n    const resourceEndTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.RESPONSE_END])\n    );\n\n    const currentGap = spanEndTime - resourceEndTime;\n\n    if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {\n      bestGap = currentGap;\n      mainRequest = resource;\n    }\n  }\n  return mainRequest;\n}\n\n/**\n * Filter all resources that has started and finished according to span start time and end time.\n *     It will return the closest resource to a start time\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n */\nfunction filterResourcesForSpan(\n  spanUrl: string,\n  startTimeHR: api.HrTime,\n  endTimeHR: api.HrTime,\n  resources: PerformanceResourceTiming[],\n  ignoredResources: WeakSet<PerformanceResourceTiming>,\n  initiatorType?: string\n) {\n  const startTime = hrTimeToNanoseconds(startTimeHR);\n  const endTime = hrTimeToNanoseconds(endTimeHR);\n  let filteredResources = resources.filter(resource => {\n    const resourceStartTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.FETCH_START])\n    );\n    const resourceEndTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.RESPONSE_END])\n    );\n\n    return (\n      resource.initiatorType.toLowerCase() ===\n        (initiatorType || 'xmlhttprequest') &&\n      resource.name === spanUrl &&\n      resourceStartTime >= startTime &&\n      resourceEndTime <= endTime\n    );\n  });\n\n  if (filteredResources.length > 0) {\n    filteredResources = filteredResources.filter(resource => {\n      return !ignoredResources.has(resource);\n    });\n  }\n\n  return filteredResources;\n}\n\n/**\n * The URLLike interface represents an URL and HTMLAnchorElement compatible fields.\n */\nexport interface URLLike {\n  hash: string;\n  host: string;\n  hostname: string;\n  href: string;\n  readonly origin: string;\n  password: string;\n  pathname: string;\n  port: string;\n  protocol: string;\n  search: string;\n  username: string;\n}\n\n/**\n * Parses url using URL constructor or fallback to anchor element.\n * @param url\n */\nexport function parseUrl(url: string): URLLike {\n  if (typeof URL === 'function') {\n    return new URL(url, location.href);\n  }\n  const element = getUrlNormalizingAnchor();\n  element.href = url;\n  return element;\n}\n\n/**\n * Parses url using URL constructor or fallback to anchor element and serialize\n * it to a string.\n *\n * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url\n *\n * @param url\n */\nexport function normalizeUrl(url: string): string {\n  const urlLike = parseUrl(url);\n  return urlLike.href;\n}\n\n/**\n * Get element XPath\n * @param target - target element\n * @param optimised - when id attribute of element is present the xpath can be\n * simplified to contain id\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function getElementXPath(target: any, optimised?: boolean): string {\n  if (target.nodeType === Node.DOCUMENT_NODE) {\n    return '/';\n  }\n  const targetValue = getNodeValue(target, optimised);\n  if (optimised && targetValue.indexOf('@id') > 0) {\n    return targetValue;\n  }\n  let xpath = '';\n  if (target.parentNode) {\n    xpath += getElementXPath(target.parentNode, false);\n  }\n  xpath += targetValue;\n\n  return xpath;\n}\n\n/**\n * get node index within the siblings\n * @param target\n */\nfunction getNodeIndex(target: HTMLElement): number {\n  if (!target.parentNode) {\n    return 0;\n  }\n  const allowedTypes = [target.nodeType];\n  if (target.nodeType === Node.CDATA_SECTION_NODE) {\n    allowedTypes.push(Node.TEXT_NODE);\n  }\n  let elements = Array.from(target.parentNode.childNodes);\n  elements = elements.filter((element: Node) => {\n    const localName = (element as HTMLElement).localName;\n    return (\n      allowedTypes.indexOf(element.nodeType) >= 0 &&\n      localName === target.localName\n    );\n  });\n  if (elements.length >= 1) {\n    return elements.indexOf(target) + 1; // xpath starts from 1\n  }\n  // if there are no other similar child xpath doesn't need index\n  return 0;\n}\n\n/**\n * get node value for xpath\n * @param target\n * @param optimised\n */\nfunction getNodeValue(target: HTMLElement, optimised?: boolean): string {\n  const nodeType = target.nodeType;\n  const index = getNodeIndex(target);\n  let nodeValue = '';\n  if (nodeType === Node.ELEMENT_NODE) {\n    const id = target.getAttribute('id');\n    if (optimised && id) {\n      return `//*[@id=\"${id}\"]`;\n    }\n    nodeValue = target.localName;\n  } else if (\n    nodeType === Node.TEXT_NODE ||\n    nodeType === Node.CDATA_SECTION_NODE\n  ) {\n    nodeValue = 'text()';\n  } else if (nodeType === Node.COMMENT_NODE) {\n    nodeValue = 'comment()';\n  } else {\n    return '';\n  }\n  // if index is 1 it can be omitted in xpath\n  if (nodeValue && index > 1) {\n    return `/${nodeValue}[${index}]`;\n  }\n  return `/${nodeValue}`;\n}\n\n/**\n * Checks if trace headers should be propagated\n * @param spanUrl\n * @private\n */\nexport function shouldPropagateTraceHeaders(\n  spanUrl: string,\n  propagateTraceHeaderCorsUrls?: PropagateTraceHeaderCorsUrls\n): boolean {\n  let propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];\n  if (\n    typeof propagateTraceHeaderUrls === 'string' ||\n    propagateTraceHeaderUrls instanceof RegExp\n  ) {\n    propagateTraceHeaderUrls = [propagateTraceHeaderUrls];\n  }\n  const parsedSpanUrl = parseUrl(spanUrl);\n\n  if (parsedSpanUrl.origin === location.origin) {\n    return true;\n  } else {\n    return propagateTraceHeaderUrls.some(propagateTraceHeaderUrl =>\n      urlMatches(spanUrl, propagateTraceHeaderUrl)\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { AutoLoaderResult, InstrumentationOption } from './types_internal';\n\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(\n  options: InstrumentationOption[] = []\n): AutoLoaderResult {\n  let instrumentations: Instrumentation[] = [];\n  for (let i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const option = options[i] as any;\n    if (Array.isArray(option)) {\n      const results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if ((option as Instrumentation).instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n\n  return { instrumentations };\n}\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n  parseInstrumentationOptions,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const { instrumentations } = parseInstrumentationOptions(\n    options.instrumentations\n  );\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n","'use strict'\n\nfunction isFunction (funktion) {\n  return typeof funktion === 'function'\n}\n\n// Default to complaining loudly when things don't go according to plan.\nvar logger = console.error.bind(console)\n\n// Sets a property on an object, preserving its enumerability.\n// This function assumes that the property is already writable.\nfunction defineProperty (obj, name, value) {\n  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name)\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value\n  })\n}\n\n// Keep initialization idempotent.\nfunction shimmer (options) {\n  if (options && options.logger) {\n    if (!isFunction(options.logger)) logger(\"new logger isn't a function, not replacing\")\n    else logger = options.logger\n  }\n}\n\nfunction wrap (nodule, name, wrapper) {\n  if (!nodule || !nodule[name]) {\n    logger('no original function ' + name + ' to wrap')\n    return\n  }\n\n  if (!wrapper) {\n    logger('no wrapper function')\n    logger((new Error()).stack)\n    return\n  }\n\n  if (!isFunction(nodule[name]) || !isFunction(wrapper)) {\n    logger('original object and wrapper must be functions')\n    return\n  }\n\n  var original = nodule[name]\n  var wrapped = wrapper(original, name)\n\n  defineProperty(wrapped, '__original', original)\n  defineProperty(wrapped, '__unwrap', function () {\n    if (nodule[name] === wrapped) defineProperty(nodule, name, original)\n  })\n  defineProperty(wrapped, '__wrapped', true)\n\n  defineProperty(nodule, name, wrapped)\n  return wrapped\n}\n\nfunction massWrap (nodules, names, wrapper) {\n  if (!nodules) {\n    logger('must provide one or more modules to patch')\n    logger((new Error()).stack)\n    return\n  } else if (!Array.isArray(nodules)) {\n    nodules = [nodules]\n  }\n\n  if (!(names && Array.isArray(names))) {\n    logger('must provide one or more functions to wrap on modules')\n    return\n  }\n\n  nodules.forEach(function (nodule) {\n    names.forEach(function (name) {\n      wrap(nodule, name, wrapper)\n    })\n  })\n}\n\nfunction unwrap (nodule, name) {\n  if (!nodule || !nodule[name]) {\n    logger('no function to unwrap.')\n    logger((new Error()).stack)\n    return\n  }\n\n  if (!nodule[name].__unwrap) {\n    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?')\n  } else {\n    return nodule[name].__unwrap()\n  }\n}\n\nfunction massUnwrap (nodules, names) {\n  if (!nodules) {\n    logger('must provide one or more modules to patch')\n    logger((new Error()).stack)\n    return\n  } else if (!Array.isArray(nodules)) {\n    nodules = [nodules]\n  }\n\n  if (!(names && Array.isArray(names))) {\n    logger('must provide one or more functions to unwrap on modules')\n    return\n  }\n\n  nodules.forEach(function (nodule) {\n    names.forEach(function (name) {\n      unwrap(nodule, name)\n    })\n  })\n}\n\nshimmer.wrap = wrap\nshimmer.massWrap = massWrap\nshimmer.unwrap = unwrap\nshimmer.massUnwrap = massUnwrap\n\nmodule.exports = shimmer\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum EventNames {\n  METHOD_OPEN = 'open',\n  METHOD_SEND = 'send',\n  EVENT_ABORT = 'abort',\n  EVENT_ERROR = 'error',\n  EVENT_LOAD = 'loaded',\n  EVENT_TIMEOUT = 'timeout',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationAbstract } from '../../instrumentation';\nimport * as types from '../../types';\n\n/**\n * Base abstract class for instrumenting web plugins\n */\nexport abstract class InstrumentationBase<T = unknown>\n  extends InstrumentationAbstract\n  implements types.Instrumentation\n{\n  constructor(\n    instrumentationName: string,\n    instrumentationVersion: string,\n    config: types.InstrumentationConfig = {}\n  ) {\n    super(instrumentationName, instrumentationVersion, config);\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport * as shimmer from 'shimmer';\nimport { InstrumentationModuleDefinition } from './platform/node';\nimport * as types from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<T = any>\n  implements types.Instrumentation\n{\n  protected _config: types.InstrumentationConfig;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: types.InstrumentationConfig = {}\n  ) {\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): types.InstrumentationConfig {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  public setConfig(config: types.InstrumentationConfig = {}): void {\n    this._config = Object.assign({}, config);\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Disable plugin */\n  public abstract enable(): void;\n\n  /* Enable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition<T>\n    | InstrumentationModuleDefinition<T>[]\n    | void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from './types';\n\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): T {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync<T>(\n  execute: () => T,\n  onFinish: (e: Error | undefined, result: T | undefined) => void,\n  preventThrowingError?: boolean\n): Promise<T> {\n  let error: Error | undefined;\n  let result: T | undefined;\n  try {\n    result = await execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      // eslint-disable-next-line no-unsafe-finally\n      throw error;\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result as T;\n  }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.35.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nexport enum AttributeNames {\n  HTTP_STATUS_TEXT = 'http.status_text',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  isWrapped,\n  InstrumentationBase,\n  InstrumentationConfig,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { hrTime, isUrlIgnored, otperformance } from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport {\n  addSpanNetworkEvents,\n  getResource,\n  PerformanceTimingNames as PTN,\n  shouldPropagateTraceHeaders,\n  parseUrl,\n} from '@opentelemetry/sdk-trace-web';\nimport { EventNames } from './enums/EventNames';\nimport {\n  OpenFunction,\n  PropagateTraceHeaderCorsUrls,\n  SendFunction,\n  XhrMem,\n} from './types';\nimport { VERSION } from './version';\nimport { AttributeNames } from './enums/AttributeNames';\n\n// how long to wait for observer to collect information about resources\n// this is needed as event \"load\" is called before observer\n// hard to say how long it should really wait, seems like 300ms is\n// safe enough\nconst OBSERVER_WAIT_TIME_MS = 300;\n\nexport type XHRCustomAttributeFunction = (\n  span: api.Span,\n  xhr: XMLHttpRequest\n) => void;\n\n/**\n * XMLHttpRequest config\n */\nexport interface XMLHttpRequestInstrumentationConfig\n  extends InstrumentationConfig {\n  /**\n   * The number of timing resources is limited, after the limit\n   * (chrome 250, safari 150) the information is not collected anymore.\n   * The only way to prevent that is to regularly clean the resources\n   * whenever it is possible. This is needed only when PerformanceObserver\n   * is not available\n   */\n  clearTimingResources?: boolean;\n  /** URLs which should include trace headers when origin doesn't match */\n  propagateTraceHeaderCorsUrls?: PropagateTraceHeaderCorsUrls;\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  ignoreUrls?: Array<string | RegExp>;\n  /** Function for adding custom attributes on the span */\n  applyCustomAttributesOnSpan?: XHRCustomAttributeFunction;\n}\n\n/**\n * This class represents a XMLHttpRequest plugin for auto instrumentation\n */\nexport class XMLHttpRequestInstrumentation extends InstrumentationBase<XMLHttpRequest> {\n  readonly component: string = 'xml-http-request';\n  readonly version: string = VERSION;\n  moduleName = this.component;\n\n  private _tasksCount = 0;\n  private _xhrMem = new WeakMap<XMLHttpRequest, XhrMem>();\n  private _usedResources = new WeakSet<PerformanceResourceTiming>();\n\n  constructor(config?: XMLHttpRequestInstrumentationConfig) {\n    super('@opentelemetry/instrumentation-xml-http-request', VERSION, config);\n  }\n\n  init() {}\n\n  private _getConfig(): XMLHttpRequestInstrumentationConfig {\n    return this._config;\n  }\n\n  /**\n   * Adds custom headers to XMLHttpRequest\n   * @param xhr\n   * @param spanUrl\n   * @private\n   */\n  private _addHeaders(xhr: XMLHttpRequest, spanUrl: string) {\n    const url = parseUrl(spanUrl).href;\n    if (\n      !shouldPropagateTraceHeaders(\n        url,\n        this._getConfig().propagateTraceHeaderCorsUrls\n      )\n    ) {\n      const headers: Partial<Record<string, unknown>> = {};\n      api.propagation.inject(api.context.active(), headers);\n      if (Object.keys(headers).length > 0) {\n        this._diag.debug('headers inject skipped due to CORS policy');\n      }\n      return;\n    }\n    const headers: { [key: string]: unknown } = {};\n    api.propagation.inject(api.context.active(), headers);\n    Object.keys(headers).forEach(key => {\n      xhr.setRequestHeader(key, String(headers[key]));\n    });\n  }\n\n  /**\n   * Add cors pre flight child span\n   * @param span\n   * @param corsPreFlightRequest\n   * @private\n   */\n  private _addChildSpan(\n    span: api.Span,\n    corsPreFlightRequest: PerformanceResourceTiming\n  ): void {\n    api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n      const childSpan = this.tracer.startSpan('CORS Preflight', {\n        startTime: corsPreFlightRequest[PTN.FETCH_START],\n      });\n      addSpanNetworkEvents(childSpan, corsPreFlightRequest);\n      childSpan.end(corsPreFlightRequest[PTN.RESPONSE_END]);\n    });\n  }\n\n  /**\n   * Add attributes when span is going to end\n   * @param span\n   * @param xhr\n   * @param spanUrl\n   * @private\n   */\n  _addFinalSpanAttributes(span: api.Span, xhrMem: XhrMem, spanUrl?: string) {\n    if (typeof spanUrl === 'string') {\n      const parsedUrl = parseUrl(spanUrl);\n      if (xhrMem.status !== undefined) {\n        span.setAttribute(SemanticAttributes.HTTP_STATUS_CODE, xhrMem.status);\n      }\n      if (xhrMem.statusText !== undefined) {\n        span.setAttribute(AttributeNames.HTTP_STATUS_TEXT, xhrMem.statusText);\n      }\n      span.setAttribute(SemanticAttributes.HTTP_HOST, parsedUrl.host);\n      span.setAttribute(\n        SemanticAttributes.HTTP_SCHEME,\n        parsedUrl.protocol.replace(':', '')\n      );\n\n      // @TODO do we want to collect this or it will be collected earlier once only or\n      //    maybe when parent span is not available ?\n      span.setAttribute(\n        SemanticAttributes.HTTP_USER_AGENT,\n        navigator.userAgent\n      );\n    }\n  }\n\n  private _applyAttributesAfterXHR(span: api.Span, xhr: XMLHttpRequest) {\n    const applyCustomAttributesOnSpan =\n      this._getConfig().applyCustomAttributesOnSpan;\n    if (typeof applyCustomAttributesOnSpan === 'function') {\n      safeExecuteInTheMiddle(\n        () => applyCustomAttributesOnSpan(span, xhr),\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('applyCustomAttributesOnSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * will collect information about all resources created\n   * between \"send\" and \"end\" with additional waiting for main resource\n   * @param xhr\n   * @param spanUrl\n   * @private\n   */\n  private _addResourceObserver(xhr: XMLHttpRequest, spanUrl: string) {\n    const xhrMem = this._xhrMem.get(xhr);\n    if (\n      !xhrMem ||\n      typeof PerformanceObserver !== 'function' ||\n      typeof PerformanceResourceTiming !== 'function'\n    ) {\n      return;\n    }\n    xhrMem.createdResources = {\n      observer: new PerformanceObserver(list => {\n        const entries = list.getEntries() as PerformanceResourceTiming[];\n        const parsedUrl = parseUrl(spanUrl);\n\n        entries.forEach(entry => {\n          if (\n            entry.initiatorType === 'xmlhttprequest' &&\n            entry.name === parsedUrl.href\n          ) {\n            if (xhrMem.createdResources) {\n              xhrMem.createdResources.entries.push(entry);\n            }\n          }\n        });\n      }),\n      entries: [],\n    };\n    xhrMem.createdResources.observer.observe({\n      entryTypes: ['resource'],\n    });\n  }\n\n  /**\n   * Clears the resource timings and all resources assigned with spans\n   *     when {@link XMLHttpRequestInstrumentationConfig.clearTimingResources} is\n   *     set to true (default false)\n   * @private\n   */\n  private _clearResources() {\n    if (this._tasksCount === 0 && this._getConfig().clearTimingResources) {\n      (otperformance as unknown as Performance).clearResourceTimings();\n      this._xhrMem = new WeakMap<XMLHttpRequest, XhrMem>();\n      this._usedResources = new WeakSet<PerformanceResourceTiming>();\n    }\n  }\n\n  /**\n   * Finds appropriate resource and add network events to the span\n   * @param span\n   */\n  private _findResourceAndAddNetworkEvents(\n    xhrMem: XhrMem,\n    span: api.Span,\n    spanUrl?: string,\n    startTime?: api.HrTime,\n    endTime?: api.HrTime\n  ): void {\n    if (!spanUrl || !startTime || !endTime || !xhrMem.createdResources) {\n      return;\n    }\n\n    let resources: PerformanceResourceTiming[] =\n      xhrMem.createdResources.entries;\n\n    if (!resources || !resources.length) {\n      // fallback - either Observer is not available or it took longer\n      // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough\n      // information\n      // ts thinks this is the perf_hooks module, but it is the browser performance api\n      resources = (otperformance as unknown as Performance).getEntriesByType(\n        'resource'\n      ) as PerformanceResourceTiming[];\n    }\n\n    const resource = getResource(\n      parseUrl(spanUrl).href,\n      startTime,\n      endTime,\n      resources,\n      this._usedResources\n    );\n\n    if (resource.mainRequest) {\n      const mainRequest = resource.mainRequest;\n      this._markResourceAsUsed(mainRequest);\n\n      const corsPreFlightRequest = resource.corsPreFlightRequest;\n      if (corsPreFlightRequest) {\n        this._addChildSpan(span, corsPreFlightRequest);\n        this._markResourceAsUsed(corsPreFlightRequest);\n      }\n      addSpanNetworkEvents(span, mainRequest);\n    }\n  }\n\n  /**\n   * Removes the previous information about span.\n   * This might happened when the same xhr is used again.\n   * @param xhr\n   * @private\n   */\n  private _cleanPreviousSpanInformation(xhr: XMLHttpRequest) {\n    const xhrMem = this._xhrMem.get(xhr);\n    if (xhrMem) {\n      const callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;\n      if (callbackToRemoveEvents) {\n        callbackToRemoveEvents();\n      }\n      this._xhrMem.delete(xhr);\n    }\n  }\n\n  /**\n   * Creates a new span when method \"open\" is called\n   * @param xhr\n   * @param url\n   * @param method\n   * @private\n   */\n  private _createSpan(\n    xhr: XMLHttpRequest,\n    url: string,\n    method: string\n  ): api.Span | undefined {\n    if (isUrlIgnored(url, this._getConfig().ignoreUrls)) {\n      this._diag.debug('ignoring span as url matches ignored url');\n      return;\n    }\n    const spanName = `HTTP ${method.toUpperCase()}`;\n\n    const currentSpan = this.tracer.startSpan(spanName, {\n      kind: api.SpanKind.CLIENT,\n      attributes: {\n        [SemanticAttributes.HTTP_METHOD]: method,\n        [SemanticAttributes.HTTP_URL]: parseUrl(url).toString(),\n      },\n    });\n\n    currentSpan.addEvent(EventNames.METHOD_OPEN);\n\n    this._cleanPreviousSpanInformation(xhr);\n\n    this._xhrMem.set(xhr, {\n      span: currentSpan,\n      spanUrl: url,\n    });\n\n    return currentSpan;\n  }\n\n  /**\n   * Marks certain [resource]{@link PerformanceResourceTiming} when information\n   * from this is used to add events to span.\n   * This is done to avoid reusing the same resource again for next span\n   * @param resource\n   * @private\n   */\n  private _markResourceAsUsed(resource: PerformanceResourceTiming) {\n    this._usedResources.add(resource);\n  }\n\n  /**\n   * Patches the method open\n   * @private\n   */\n  protected _patchOpen() {\n    return (original: OpenFunction): OpenFunction => {\n      const plugin = this;\n      return function patchOpen(this: XMLHttpRequest, ...args): void {\n        const method: string = args[0];\n        const url: string = args[1];\n        plugin._createSpan(this, url, method);\n\n        return original.apply(this, args);\n      };\n    };\n  }\n\n  /**\n   * Patches the method send\n   * @private\n   */\n  protected _patchSend() {\n    const plugin = this;\n\n    function endSpanTimeout(\n      eventName: string,\n      xhrMem: XhrMem,\n      performanceEndTime: api.HrTime,\n      endTime: number\n    ) {\n      const callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;\n\n      if (typeof callbackToRemoveEvents === 'function') {\n        callbackToRemoveEvents();\n      }\n\n      const { span, spanUrl, sendStartTime } = xhrMem;\n\n      if (span) {\n        plugin._findResourceAndAddNetworkEvents(\n          xhrMem,\n          span,\n          spanUrl,\n          sendStartTime,\n          performanceEndTime\n        );\n        span.addEvent(eventName, endTime);\n        plugin._addFinalSpanAttributes(span, xhrMem, spanUrl);\n        span.end(endTime);\n        plugin._tasksCount--;\n      }\n      plugin._clearResources();\n    }\n\n    function endSpan(eventName: string, xhr: XMLHttpRequest) {\n      const xhrMem = plugin._xhrMem.get(xhr);\n      if (!xhrMem) {\n        return;\n      }\n      xhrMem.status = xhr.status;\n      xhrMem.statusText = xhr.statusText;\n      plugin._xhrMem.delete(xhr);\n\n      if (xhrMem.span) {\n        plugin._applyAttributesAfterXHR(xhrMem.span, xhr);\n      }\n      const performanceEndTime = hrTime();\n      const endTime = Date.now();\n\n      // the timeout is needed as observer doesn't have yet information\n      // when event \"load\" is called. Also the time may differ depends on\n      // browser and speed of computer\n      setTimeout(() => {\n        endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime);\n      }, OBSERVER_WAIT_TIME_MS);\n    }\n\n    function onError(this: XMLHttpRequest) {\n      endSpan(EventNames.EVENT_ERROR, this);\n    }\n\n    function onAbort(this: XMLHttpRequest) {\n      endSpan(EventNames.EVENT_ABORT, this);\n    }\n\n    function onTimeout(this: XMLHttpRequest) {\n      endSpan(EventNames.EVENT_TIMEOUT, this);\n    }\n\n    function onLoad(this: XMLHttpRequest) {\n      if (this.status < 299) {\n        endSpan(EventNames.EVENT_LOAD, this);\n      } else {\n        endSpan(EventNames.EVENT_ERROR, this);\n      }\n    }\n\n    function unregister(xhr: XMLHttpRequest) {\n      xhr.removeEventListener('abort', onAbort);\n      xhr.removeEventListener('error', onError);\n      xhr.removeEventListener('load', onLoad);\n      xhr.removeEventListener('timeout', onTimeout);\n      const xhrMem = plugin._xhrMem.get(xhr);\n      if (xhrMem) {\n        xhrMem.callbackToRemoveEvents = undefined;\n      }\n    }\n\n    return (original: SendFunction): SendFunction => {\n      return function patchSend(this: XMLHttpRequest, ...args): void {\n        const xhrMem = plugin._xhrMem.get(this);\n        if (!xhrMem) {\n          return original.apply(this, args);\n        }\n        const currentSpan = xhrMem.span;\n        const spanUrl = xhrMem.spanUrl;\n\n        if (currentSpan && spanUrl) {\n          api.context.with(\n            api.trace.setSpan(api.context.active(), currentSpan),\n            () => {\n              plugin._tasksCount++;\n              xhrMem.sendStartTime = hrTime();\n              currentSpan.addEvent(EventNames.METHOD_SEND);\n\n              this.addEventListener('abort', onAbort);\n              this.addEventListener('error', onError);\n              this.addEventListener('load', onLoad);\n              this.addEventListener('timeout', onTimeout);\n\n              xhrMem.callbackToRemoveEvents = () => {\n                unregister(this);\n                if (xhrMem.createdResources) {\n                  xhrMem.createdResources.observer.disconnect();\n                }\n              };\n              plugin._addHeaders(this, spanUrl);\n              plugin._addResourceObserver(this, spanUrl);\n            }\n          );\n        }\n        return original.apply(this, args);\n      };\n    };\n  }\n\n  /**\n   * implements enable function\n   */\n  override enable() {\n    this._diag.debug('applying patch to', this.moduleName, this.version);\n\n    if (isWrapped(XMLHttpRequest.prototype.open)) {\n      this._unwrap(XMLHttpRequest.prototype, 'open');\n      this._diag.debug('removing previous patch from method open');\n    }\n\n    if (isWrapped(XMLHttpRequest.prototype.send)) {\n      this._unwrap(XMLHttpRequest.prototype, 'send');\n      this._diag.debug('removing previous patch from method send');\n    }\n\n    this._wrap(XMLHttpRequest.prototype, 'open', this._patchOpen());\n    this._wrap(XMLHttpRequest.prototype, 'send', this._patchSend());\n  }\n\n  /**\n   * implements disable function\n   */\n  override disable() {\n    this._diag.debug('removing patch from', this.moduleName, this.version);\n\n    this._unwrap(XMLHttpRequest.prototype, 'open');\n    this._unwrap(XMLHttpRequest.prototype, 'send');\n\n    this._tasksCount = 0;\n    this._xhrMem = new WeakMap<XMLHttpRequest, XhrMem>();\n    this._usedResources = new WeakSet<PerformanceResourceTiming>();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nexport enum AttributeNames {\n  COMPONENT = 'component',\n  HTTP_ERROR_NAME = 'http.error_name',\n  HTTP_STATUS_TEXT = 'http.status_text',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.35.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  isWrapped,\n  InstrumentationBase,\n  InstrumentationConfig,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport * as core from '@opentelemetry/core';\nimport * as web from '@opentelemetry/sdk-trace-web';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { FetchError, FetchResponse, SpanData } from './types';\nimport { VERSION } from './version';\nimport { _globalThis } from '@opentelemetry/core';\n\n// how long to wait for observer to collect information about resources\n// this is needed as event \"load\" is called before observer\n// hard to say how long it should really wait, seems like 300ms is\n// safe enough\nconst OBSERVER_WAIT_TIME_MS = 300;\n\nexport interface FetchCustomAttributeFunction {\n  (\n    span: api.Span,\n    request: Request | RequestInit,\n    result: Response | FetchError\n  ): void;\n}\n\n/**\n * FetchPlugin Config\n */\nexport interface FetchInstrumentationConfig extends InstrumentationConfig {\n  // the number of timing resources is limited, after the limit\n  // (chrome 250, safari 150) the information is not collected anymore\n  // the only way to prevent that is to regularly clean the resources\n  // whenever it is possible, this is needed only when PerformanceObserver\n  // is not available\n  clearTimingResources?: boolean;\n  // urls which should include trace headers when origin doesn't match\n  propagateTraceHeaderCorsUrls?: web.PropagateTraceHeaderCorsUrls;\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  ignoreUrls?: Array<string | RegExp>;\n  /** Function for adding custom attributes on the span */\n  applyCustomAttributesOnSpan?: FetchCustomAttributeFunction;\n  // Ignore adding network events as span events\n  ignoreNetworkEvents?: boolean;\n}\n\n/**\n * This class represents a fetch plugin for auto instrumentation\n */\nexport class FetchInstrumentation extends InstrumentationBase<\n  Promise<Response>\n> {\n  readonly component: string = 'fetch';\n  readonly version: string = VERSION;\n  moduleName = this.component;\n  private _usedResources = new WeakSet<PerformanceResourceTiming>();\n  private _tasksCount = 0;\n\n  constructor(config?: FetchInstrumentationConfig) {\n    super('@opentelemetry/instrumentation-fetch', VERSION, config);\n  }\n\n  init(): void {}\n\n  private _getConfig(): FetchInstrumentationConfig {\n    return this._config;\n  }\n\n  /**\n   * Add cors pre flight child span\n   * @param span\n   * @param corsPreFlightRequest\n   */\n  private _addChildSpan(\n    span: api.Span,\n    corsPreFlightRequest: PerformanceResourceTiming\n  ): void {\n    const childSpan = this.tracer.startSpan(\n      'CORS Preflight',\n      {\n        startTime: corsPreFlightRequest[web.PerformanceTimingNames.FETCH_START],\n      },\n      api.trace.setSpan(api.context.active(), span)\n    );\n    if (!this._getConfig().ignoreNetworkEvents) {\n      web.addSpanNetworkEvents(childSpan, corsPreFlightRequest);\n    }\n    childSpan.end(\n      corsPreFlightRequest[web.PerformanceTimingNames.RESPONSE_END]\n    );\n  }\n\n  /**\n   * Adds more attributes to span just before ending it\n   * @param span\n   * @param response\n   */\n  private _addFinalSpanAttributes(\n    span: api.Span,\n    response: FetchResponse\n  ): void {\n    const parsedUrl = web.parseUrl(response.url);\n    span.setAttribute(SemanticAttributes.HTTP_STATUS_CODE, response.status);\n    if (response.statusText != null) {\n      span.setAttribute(AttributeNames.HTTP_STATUS_TEXT, response.statusText);\n    }\n    span.setAttribute(SemanticAttributes.HTTP_HOST, parsedUrl.host);\n    span.setAttribute(\n      SemanticAttributes.HTTP_SCHEME,\n      parsedUrl.protocol.replace(':', '')\n    );\n    span.setAttribute(SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);\n  }\n\n  /**\n   * Add headers\n   * @param options\n   * @param spanUrl\n   */\n  private _addHeaders(options: Request | RequestInit, spanUrl: string): void {\n    if (\n      !web.shouldPropagateTraceHeaders(\n        spanUrl,\n        this._getConfig().propagateTraceHeaderCorsUrls\n      )\n    ) {\n      const headers: Partial<Record<string, unknown>> = {};\n      api.propagation.inject(api.context.active(), headers);\n      if (Object.keys(headers).length > 0) {\n        this._diag.debug('headers inject skipped due to CORS policy');\n      }\n      return;\n    }\n\n    if (options instanceof Request) {\n      api.propagation.inject(api.context.active(), options.headers, {\n        set: (h, k, v) => h.set(k, typeof v === 'string' ? v : String(v)),\n      });\n    } else if (options.headers instanceof Headers) {\n      api.propagation.inject(api.context.active(), options.headers, {\n        set: (h, k, v) => h.set(k, typeof v === 'string' ? v : String(v)),\n      });\n    } else {\n      const headers: Partial<Record<string, unknown>> = {};\n      api.propagation.inject(api.context.active(), headers);\n      options.headers = Object.assign({}, headers, options.headers || {});\n    }\n  }\n\n  /**\n   * Clears the resource timings and all resources assigned with spans\n   *     when {@link FetchPluginConfig.clearTimingResources} is\n   *     set to true (default false)\n   * @private\n   */\n  private _clearResources() {\n    if (this._tasksCount === 0 && this._getConfig().clearTimingResources) {\n      performance.clearResourceTimings();\n      this._usedResources = new WeakSet<PerformanceResourceTiming>();\n    }\n  }\n\n  /**\n   * Creates a new span\n   * @param url\n   * @param options\n   */\n  private _createSpan(\n    url: string,\n    options: Partial<Request | RequestInit> = {}\n  ): api.Span | undefined {\n    if (core.isUrlIgnored(url, this._getConfig().ignoreUrls)) {\n      this._diag.debug('ignoring span as url matches ignored url');\n      return;\n    }\n    const method = (options.method || 'GET').toUpperCase();\n    const spanName = `HTTP ${method}`;\n    return this.tracer.startSpan(spanName, {\n      kind: api.SpanKind.CLIENT,\n      attributes: {\n        [AttributeNames.COMPONENT]: this.moduleName,\n        [SemanticAttributes.HTTP_METHOD]: method,\n        [SemanticAttributes.HTTP_URL]: url,\n      },\n    });\n  }\n\n  /**\n   * Finds appropriate resource and add network events to the span\n   * @param span\n   * @param resourcesObserver\n   * @param endTime\n   */\n  private _findResourceAndAddNetworkEvents(\n    span: api.Span,\n    resourcesObserver: SpanData,\n    endTime: api.HrTime\n  ): void {\n    let resources: PerformanceResourceTiming[] = resourcesObserver.entries;\n    if (!resources.length) {\n      if (!performance.getEntriesByType) {\n        return;\n      }\n      // fallback - either Observer is not available or it took longer\n      // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough\n      // information\n      resources = performance.getEntriesByType(\n        'resource'\n      ) as PerformanceResourceTiming[];\n    }\n    const resource = web.getResource(\n      resourcesObserver.spanUrl,\n      resourcesObserver.startTime,\n      endTime,\n      resources,\n      this._usedResources,\n      'fetch'\n    );\n\n    if (resource.mainRequest) {\n      const mainRequest = resource.mainRequest;\n      this._markResourceAsUsed(mainRequest);\n\n      const corsPreFlightRequest = resource.corsPreFlightRequest;\n      if (corsPreFlightRequest) {\n        this._addChildSpan(span, corsPreFlightRequest);\n        this._markResourceAsUsed(corsPreFlightRequest);\n      }\n      if (!this._getConfig().ignoreNetworkEvents) {\n        web.addSpanNetworkEvents(span, mainRequest);\n      }\n    }\n  }\n\n  /**\n   * Marks certain [resource]{@link PerformanceResourceTiming} when information\n   * from this is used to add events to span.\n   * This is done to avoid reusing the same resource again for next span\n   * @param resource\n   */\n  private _markResourceAsUsed(resource: PerformanceResourceTiming): void {\n    this._usedResources.add(resource);\n  }\n\n  /**\n   * Finish span, add attributes, network events etc.\n   * @param span\n   * @param spanData\n   * @param response\n   */\n  private _endSpan(\n    span: api.Span,\n    spanData: SpanData,\n    response: FetchResponse\n  ) {\n    const endTime = core.millisToHrTime(Date.now());\n    const performanceEndTime = core.hrTime();\n    this._addFinalSpanAttributes(span, response);\n\n    setTimeout(() => {\n      spanData.observer?.disconnect();\n      this._findResourceAndAddNetworkEvents(span, spanData, performanceEndTime);\n      this._tasksCount--;\n      this._clearResources();\n      span.end(endTime);\n    }, OBSERVER_WAIT_TIME_MS);\n  }\n\n  /**\n   * Patches the constructor of fetch\n   */\n  private _patchConstructor(): (original: typeof fetch) => typeof fetch {\n    return original => {\n      const plugin = this;\n      return function patchConstructor(\n        this: typeof globalThis,\n        ...args: Parameters<typeof fetch>\n      ): Promise<Response> {\n        const self = this;\n        const url = web.parseUrl(\n          args[0] instanceof Request ? args[0].url : args[0]\n        ).href;\n\n        const options = args[0] instanceof Request ? args[0] : args[1] || {};\n        const createdSpan = plugin._createSpan(url, options);\n        if (!createdSpan) {\n          return original.apply(this, args);\n        }\n        const spanData = plugin._prepareSpanData(url);\n\n        function endSpanOnError(span: api.Span, error: FetchError) {\n          plugin._applyAttributesAfterFetch(span, options, error);\n          plugin._endSpan(span, spanData, {\n            status: error.status || 0,\n            statusText: error.message,\n            url,\n          });\n        }\n\n        function endSpanOnSuccess(span: api.Span, response: Response) {\n          plugin._applyAttributesAfterFetch(span, options, response);\n          if (response.status >= 200 && response.status < 400) {\n            plugin._endSpan(span, spanData, response);\n          } else {\n            plugin._endSpan(span, spanData, {\n              status: response.status,\n              statusText: response.statusText,\n              url,\n            });\n          }\n        }\n\n        function onSuccess(\n          span: api.Span,\n          resolve: (value: Response | PromiseLike<Response>) => void,\n          response: Response\n        ): void {\n          try {\n            const resClone = response.clone();\n            const resClone4Hook = response.clone();\n            const body = resClone.body;\n            if (body) {\n              const reader = body.getReader();\n              const read = (): void => {\n                reader.read().then(\n                  ({ done }) => {\n                    if (done) {\n                      endSpanOnSuccess(span, resClone4Hook);\n                    } else {\n                      read();\n                    }\n                  },\n                  error => {\n                    endSpanOnError(span, error);\n                  }\n                );\n              };\n              read();\n            } else {\n              // some older browsers don't have .body implemented\n              endSpanOnSuccess(span, response);\n            }\n          } finally {\n            resolve(response);\n          }\n        }\n\n        function onError(\n          span: api.Span,\n          reject: (reason?: unknown) => void,\n          error: FetchError\n        ) {\n          try {\n            endSpanOnError(span, error);\n          } finally {\n            reject(error);\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          return api.context.with(\n            api.trace.setSpan(api.context.active(), createdSpan),\n            () => {\n              plugin._addHeaders(options, url);\n              plugin._tasksCount++;\n              // TypeScript complains about arrow function captured a this typed as globalThis\n              // ts(7041)\n              return original\n                .apply(\n                  self,\n                  options instanceof Request ? [options] : [url, options]\n                )\n                .then(\n                  onSuccess.bind(self, createdSpan, resolve),\n                  onError.bind(self, createdSpan, reject)\n                );\n            }\n          );\n        });\n      };\n    };\n  }\n\n  private _applyAttributesAfterFetch(\n    span: api.Span,\n    request: Request | RequestInit,\n    result: Response | FetchError\n  ) {\n    const applyCustomAttributesOnSpan =\n      this._getConfig().applyCustomAttributesOnSpan;\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => applyCustomAttributesOnSpan(span, request, result),\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('applyCustomAttributesOnSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * Prepares a span data - needed later for matching appropriate network\n   *     resources\n   * @param spanUrl\n   */\n  private _prepareSpanData(spanUrl: string): SpanData {\n    const startTime = core.hrTime();\n    const entries: PerformanceResourceTiming[] = [];\n    if (typeof PerformanceObserver !== 'function') {\n      return { entries, startTime, spanUrl };\n    }\n\n    const observer = new PerformanceObserver(list => {\n      const perfObsEntries = list.getEntries() as PerformanceResourceTiming[];\n      perfObsEntries.forEach(entry => {\n        if (entry.initiatorType === 'fetch' && entry.name === spanUrl) {\n          entries.push(entry);\n        }\n      });\n    });\n    observer.observe({\n      entryTypes: ['resource'],\n    });\n    return { entries, observer, startTime, spanUrl };\n  }\n\n  /**\n   * implements enable function\n   */\n  override enable(): void {\n    if (isWrapped(fetch)) {\n      this._unwrap(_globalThis, 'fetch');\n      this._diag.debug('removing previous patch for constructor');\n    }\n    this._wrap(_globalThis, 'fetch', this._patchConstructor());\n  }\n\n  /**\n   * implements unpatch function\n   */\n  override disable(): void {\n    this._unwrap(_globalThis, 'fetch');\n    this._usedResources = new WeakSet<PerformanceResourceTiming>();\n  }\n}\n","import { wrap } from 'shimmer';\nimport { Context } from '@opentelemetry/api';\n\nexport const wrapWithToString = <\n  Nodule extends object,\n  FieldName extends keyof Nodule,\n>(\n  nodule: Nodule,\n  name: FieldName,\n  wrapper: (original: Nodule[FieldName]) => Nodule[FieldName],\n): Nodule[FieldName] => {\n  const original = nodule[name];\n  if (typeof original !== 'function') return original;\n  wrap(nodule, name, wrapper);\n  copyToStringFrom(nodule[name], original);\n  return nodule[name];\n};\n\nexport const copyToStringFrom = <T>(target: T, source: object): void => {\n  const originalToString = source.toString;\n  Object.defineProperty(target, 'toString', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value() {\n      return originalToString.call(this === target ? source : this);\n    },\n  });\n};\n\nconst objectContexts = new WeakMap<object, Context>();\n\nexport const getObjectContext = (object: object): Context | undefined =>\n  objectContexts.get(object);\n\n/**\n * All method called on the given object will have the given context.\n */\nexport const setObjectContext = (object: object, context: Context) =>\n  objectContexts.set(object, context);\n","import { unwrap } from 'shimmer';\nimport { wrapWithToString } from './utils';\nimport { ContextManager } from '@opentelemetry/api';\n\nconst OnProperties = new Map<Object[], string[]>([\n  [\n    [globalThis.XMLHttpRequest?.prototype],\n    [\n      'abort',\n      'error',\n      'load',\n      'loadend',\n      'loadstart',\n      'progress',\n      'readystatechange',\n      'timeout',\n    ],\n  ],\n  [[globalThis.MessagePort?.prototype], ['message', 'messageerror']],\n  [[globalThis.WebSocket?.prototype], ['close', 'error', 'open', 'message']],\n  [[globalThis.Worker?.prototype], ['error', 'message']],\n  [\n    [\n      globalThis.IDBIndex?.prototype,\n      globalThis.IDBRequest?.prototype,\n      globalThis.IDBOpenDBRequest?.prototype,\n      globalThis.IDBDatabase?.prototype,\n      globalThis.IDBTransaction?.prototype,\n      globalThis.IDBCursor?.prototype,\n    ],\n    [\n      'abort',\n      'blocked',\n      'close',\n      'complete',\n      'error',\n      'success',\n      'upgradeneeded',\n      'versionchange',\n    ],\n  ],\n]);\n\ntype OnListener = (this: unknown, event: Event) => any;\n\nexport const patchEvents = (contextManager: ContextManager) => {\n  const wrappedOnListeners = new WeakMap<OnListener, OnListener>();\n\n  const patchOnProperty = <O extends Object>(\n    object: O,\n    property: string,\n  ): void => {\n    const descriptor = Object.getOwnPropertyDescriptor(object, property);\n    if (!descriptor) {\n      const proto = Object.getPrototypeOf(object);\n      if (!proto) return;\n      return patchOnProperty(proto, property);\n    }\n    wrapWithToString(\n      descriptor,\n      'get',\n      (original) =>\n        function (this: unknown) {\n          const listener = original?.call(this);\n          return wrappedOnListeners.get(listener) ?? listener;\n        },\n    );\n    wrapWithToString(\n      descriptor,\n      'set',\n      (original) =>\n        function (this: unknown, listener: OnListener | null) {\n          let wrappedListener: OnListener | null = null;\n          if (listener) {\n            wrappedListener = contextManager.bind(\n              contextManager.active(),\n              listener,\n            );\n            wrappedOnListeners.set(wrappedListener, listener);\n          }\n          original!.call(this, wrappedListener);\n        },\n    );\n    Object.defineProperty(object, property, descriptor);\n  };\n\n  const patchOnProperties = <O extends Object>(\n    object: O,\n    properties: string[],\n  ): void => {\n    properties.forEach((property) => {\n      patchOnProperty(object, `on${property}`);\n    });\n  };\n\n  const wrappedEventListeners = new WeakMap<\n    EventListenerOrEventListenerObject,\n    EventListenerOrEventListenerObject\n  >();\n\n  wrapWithToString(\n    EventTarget.prototype,\n    'addEventListener',\n    (original) =>\n      function (this: EventTarget, ...args) {\n        const listener = args[1];\n        if (listener) {\n          let wrappedListener = wrappedEventListeners.get(listener);\n          if (!wrappedListener) {\n            if (typeof listener === 'function') {\n              wrappedListener = contextManager.bind(\n                contextManager.active(),\n                listener,\n              );\n            } else if (listener && typeof listener.handleEvent === 'function') {\n              wrappedListener = {\n                ...listener,\n                handleEvent: contextManager.bind(\n                  contextManager.active(),\n                  listener.handleEvent,\n                ),\n              };\n            }\n          }\n          if (wrappedListener) {\n            wrappedEventListeners.set(listener, wrappedListener);\n            args[1] = wrappedListener;\n          }\n        }\n        return original.apply(this, args);\n      } as typeof EventTarget.prototype.addEventListener,\n  );\n\n  wrapWithToString(\n    EventTarget.prototype,\n    'removeEventListener',\n    (original) =>\n      function (this: EventTarget, ...args) {\n        const listener = args[1];\n        if (listener) {\n          const wrappedListener = wrappedEventListeners.get(listener);\n          if (wrappedListener) {\n            args[1] = wrappedListener;\n          }\n        }\n        return original.apply(this, args);\n      } as typeof EventTarget.prototype.removeEventListener,\n  );\n\n  OnProperties.forEach((properties, objects) => {\n    objects.forEach((object) => {\n      if (object) {\n        patchOnProperties(object, properties);\n      }\n    });\n  });\n};\n\nexport const unpatchEvents = () => {\n  const unpatchOnProperty = <O extends Object>(\n    object: O,\n    property: string,\n  ): void => {\n    const descriptor = Object.getOwnPropertyDescriptor(object, property);\n    if (descriptor) {\n      unwrap(descriptor, 'get');\n      unwrap(descriptor, 'set');\n      Object.defineProperty(object, property, descriptor);\n    }\n  };\n\n  const unpatchOnProperties = <O extends Object>(\n    object: O,\n    properties: string[],\n  ): void => {\n    properties.forEach((property) => {\n      unpatchOnProperty(object, `on${property}`);\n    });\n  };\n\n  unwrap(EventTarget.prototype, 'addEventListener');\n  unwrap(EventTarget.prototype, 'removeEventListener');\n\n  OnProperties.forEach((properties, objects) => {\n    objects.forEach((object) => {\n      if (object) {\n        unpatchOnProperties(object, properties);\n      }\n    });\n  });\n};\n","import { unwrap } from 'shimmer';\nimport { setObjectContext, wrapWithToString } from './utils';\nimport { Context, ContextManager } from '@opentelemetry/api';\n\ninterface WrappedMessagePort extends MessagePort {\n  __ot_context: Context | null;\n}\n\nexport const patchMessageChannel = (contextManager: ContextManager) => {\n  if (!self.MessageChannel || !self.MessagePort) return;\n\n  const messagePorts = new WeakMap<WrappedMessagePort, WrappedMessagePort>();\n\n  wrapWithToString(\n    window,\n    'MessageChannel',\n    (original) =>\n      class MessageChannel extends original {\n        constructor(...args: []) {\n          super(...args);\n\n          messagePorts.set(\n            this.port1 as WrappedMessagePort,\n            this.port2 as WrappedMessagePort,\n          );\n          messagePorts.set(\n            this.port2 as WrappedMessagePort,\n            this.port1 as WrappedMessagePort,\n          );\n        }\n      },\n  );\n\n  wrapWithToString(\n    MessagePort.prototype,\n    'postMessage',\n    (original) =>\n      function (this: WrappedMessagePort, ...args: any[]) {\n        const targetPort = messagePorts.get(this);\n        if (contextManager.active() && targetPort) {\n          setObjectContext(targetPort, contextManager.active());\n        }\n        return original.apply(this, args as any);\n      },\n  );\n};\n\nexport const unpatchMessageChannel = () => {\n  if (!self.MessageChannel || !self.MessagePort) return;\n  unwrap(window, 'MessageChannel');\n  unwrap(MessagePort.prototype, 'postMessage');\n};\n","import { unwrap } from 'shimmer';\nimport { copyToStringFrom, setObjectContext, wrapWithToString } from './utils';\nimport { ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { MAX_OBSERVER_CALLBACK_DELAY } from './constants';\n\nconst OBSERVERS = [\n  'MutationObserver',\n  'IntersectionObserver',\n  'ResizeObserver',\n] as const;\n\nexport const patchObservers = (contextManager: ContextManager) => {\n  OBSERVERS.forEach((name) => {\n    if (globalThis[name]) {\n      wrapWithToString(globalThis, name, (OriginalObserver) => {\n        const ObserverWithContext = class Observer extends OriginalObserver {\n          constructor(...args: ConstructorParameters<typeof OriginalObserver>) {\n            args[0] = contextManager.bind(contextManager.active(), args[0]);\n            super(...args);\n\n            // callbacks called after the delay won't be attached to the original context\n            // to prevent creating long traces when user e.g. scrolled or resized the website after some time\n            setTimeout(() => {\n              setObjectContext(this, ROOT_CONTEXT);\n            }, MAX_OBSERVER_CALLBACK_DELAY);\n          }\n        };\n\n        Object.defineProperty(ObserverWithContext, 'name', {\n          enumerable: false,\n          configurable: true,\n          writable: false,\n          value: name,\n        });\n        copyToStringFrom(ObserverWithContext, OriginalObserver);\n\n        return ObserverWithContext as typeof globalThis[typeof name];\n      });\n    }\n  });\n};\n\nexport const unpatchObservers = () => {\n  OBSERVERS.forEach((name) => {\n    if (globalThis[name]) {\n      unwrap(globalThis, name);\n    }\n  });\n};\n","export const MAX_TIMEOUT = 1500; // timeouts longer than this value won't be attached to a context\nexport const MAX_OBSERVER_CALLBACK_DELAY = 300; // observers triggered after this delay won't be attached to the initial context\n","import { unwrap } from 'shimmer';\nimport { copyToStringFrom, wrapWithToString } from './utils';\nimport { ContextManager } from '@opentelemetry/api';\n\nexport const patchPromise = (contextManager: ContextManager) => {\n  if (!window.Promise) return;\n\n  wrapWithToString(window, 'Promise', (OriginalPromise) => {\n    const PromiseWithContext = class Promise<T> extends OriginalPromise<T> {};\n\n    copyToStringFrom(PromiseWithContext, OriginalPromise);\n\n    wrapWithToString(\n      PromiseWithContext.prototype,\n      'then',\n      (original) =>\n        function (this: Promise<any>, ...args) {\n          args[0] = contextManager.bind(contextManager.active(), args[0]);\n          args[1] = contextManager.bind(contextManager.active(), args[1]);\n          return original.apply(this, args);\n        } as typeof Promise.prototype.then,\n    );\n\n    wrapWithToString(\n      PromiseWithContext.prototype,\n      'catch',\n      (original) =>\n        function (this: Promise<any>, ...args) {\n          args[0] = contextManager.bind(contextManager.active(), args[0]);\n          return original.apply(this, args);\n        } as typeof Promise.prototype.catch,\n    );\n\n    wrapWithToString(\n      PromiseWithContext.prototype,\n      'finally',\n      (original) =>\n        function (this: Promise<any>, ...args) {\n          args[0] = contextManager.bind(contextManager.active(), args[0]);\n          return original.apply(this, args);\n        } as typeof Promise.prototype.finally,\n    );\n\n    return PromiseWithContext as unknown as PromiseConstructor;\n  });\n};\n\nexport const unpatchPromise = () => {\n  unwrap(window, 'Promise');\n};\n","import { unwrap } from 'shimmer';\nimport { wrapWithToString } from './utils';\nimport { ContextManager } from '@opentelemetry/api';\nimport { MAX_TIMEOUT } from './constants';\n\n// we don't want to attach jobs that run after a long timeout;\nconst shouldBindCallbackForTimeout = (ms: number | undefined) =>\n  typeof ms !== 'number' || ms <= MAX_TIMEOUT;\n\nexport const patchTimers = (contextManager: ContextManager) => {\n  wrapWithToString(\n    window,\n    'setTimeout',\n    (original) =>\n      function (this: unknown, ...args: Parameters<typeof setTimeout>) {\n        if (shouldBindCallbackForTimeout(args[1])) {\n          args[0] = contextManager.bind(contextManager.active(), args[0]);\n        }\n        return original.apply(this, args);\n      } as typeof setTimeout,\n  );\n\n  wrapWithToString(\n    window,\n    'setInterval',\n    (original) =>\n      function (this: unknown, ...args: Parameters<typeof setInterval>) {\n        if (shouldBindCallbackForTimeout(args[1])) {\n          args[0] = contextManager.bind(contextManager.active(), args[0]);\n        }\n        return original.apply(this, args);\n      } as typeof setInterval,\n  );\n\n  wrapWithToString(\n    window,\n    'setImmediate',\n    (original) =>\n      function (this: unknown, ...args: Parameters<typeof setImmediate>) {\n        args[0] = contextManager.bind(contextManager.active(), args[0]);\n        return original.apply(this, args);\n      } as typeof setImmediate,\n  );\n\n  wrapWithToString(\n    window,\n    'requestAnimationFrame',\n    (original) =>\n      function (\n        this: unknown,\n        ...args: Parameters<typeof requestAnimationFrame>\n      ) {\n        args[0] = contextManager.bind(contextManager.active(), args[0]);\n        return original.apply(this, args);\n      } as typeof requestAnimationFrame,\n  );\n\n  wrapWithToString(\n    window,\n    'queueMicrotask',\n    (original) =>\n      function (this: unknown, ...args: Parameters<typeof queueMicrotask>) {\n        args[0] = contextManager.bind(contextManager.active(), args[0]);\n        return original.apply(this, args);\n      } as typeof queueMicrotask,\n  );\n};\n\nexport const unpatchTimers = () => {\n  unwrap(window, 'setTimeout');\n  unwrap(window, 'setInterval');\n  if (window.setImmediate != null) {\n    unwrap(window, 'setImmediate');\n  }\n  unwrap(window, 'requestAnimationFrame');\n  if (window.queueMicrotask != null) {\n    unwrap(window, 'queueMicrotask');\n  }\n};\n","import {\n  Context,\n  ContextManager,\n  ROOT_CONTEXT,\n  trace,\n  context as apiContext,\n} from '@opentelemetry/api';\nimport { patchEvents, unpatchEvents } from './events';\nimport { patchMessageChannel, unpatchMessageChannel } from './message-channel';\nimport { patchObservers, unpatchObservers } from './observers';\nimport { patchPromise, unpatchPromise } from './promise';\nimport { patchTimers, unpatchTimers } from './timers';\nimport { getObjectContext } from './utils';\n\nconst getActiveContextFromUnknown = (object: any): Context | undefined =>\n  object ? getObjectContext(object) : undefined;\n\nexport class SumoLogicContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Keeps the reference to current context\n   */\n  public _currentContext = ROOT_CONTEXT;\n\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  private _bindFunction<T extends Function>(\n    context = ROOT_CONTEXT,\n    target: T,\n  ): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(getActiveContextFromUnknown(this) ?? context, () =>\n        target.apply(this, args),\n      );\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n\n    return contextWrapper as unknown as T;\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    return this._currentContext;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context = this.active(), target: T): T {\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  disable(): this {\n    if (!this._enabled) {\n      return this;\n    }\n    unpatchPromise();\n    unpatchTimers();\n    unpatchEvents();\n    unpatchMessageChannel();\n    unpatchObservers();\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    if (this._enabled) {\n      return this;\n    }\n    patchPromise(this);\n    patchTimers(this);\n    patchEvents(this);\n    patchMessageChannel(this);\n    patchObservers(this);\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const previousContext = this._currentContext;\n    this._currentContext = context ?? ROOT_CONTEXT;\n    try {\n      return fn.apply(thisArg, args);\n    } finally {\n      this._currentContext = previousContext;\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum AttributeNames {\n  COMPONENT = 'component',\n  DOCUMENT_LOAD = 'documentLoad',\n  DOCUMENT_FETCH = 'documentFetch',\n  RESOURCE_FETCH = 'resourceFetch',\n  PAGE_TITLE = 'page_title',\n}\n","var e,t,n,i,r=function(e,t){return{name:e,value:void 0===t?-1:t,delta:0,entries:[],id:\"v2-\".concat(Date.now(),\"-\").concat(Math.floor(8999999999999*Math.random())+1e12)}},a=function(e,t){try{if(PerformanceObserver.supportedEntryTypes.includes(e)){if(\"first-input\"===e&&!(\"PerformanceEventTiming\"in self))return;var n=new PerformanceObserver((function(e){return e.getEntries().map(t)}));return n.observe({type:e,buffered:!0}),n}}catch(e){}},o=function(e,t){var n=function n(i){\"pagehide\"!==i.type&&\"hidden\"!==document.visibilityState||(e(i),t&&(removeEventListener(\"visibilitychange\",n,!0),removeEventListener(\"pagehide\",n,!0)))};addEventListener(\"visibilitychange\",n,!0),addEventListener(\"pagehide\",n,!0)},u=function(e){addEventListener(\"pageshow\",(function(t){t.persisted&&e(t)}),!0)},c=function(e,t,n){var i;return function(r){t.value>=0&&(r||n)&&(t.delta=t.value-(i||0),(t.delta||void 0===i)&&(i=t.value,e(t)))}},f=-1,s=function(){return\"hidden\"===document.visibilityState?0:1/0},m=function(){o((function(e){var t=e.timeStamp;f=t}),!0)},v=function(){return f<0&&(f=s(),m(),u((function(){setTimeout((function(){f=s(),m()}),0)}))),{get firstHiddenTime(){return f}}},d=function(e,t){var n,i=v(),o=r(\"FCP\"),f=function(e){\"first-contentful-paint\"===e.name&&(m&&m.disconnect(),e.startTime<i.firstHiddenTime&&(o.value=e.startTime,o.entries.push(e),n(!0)))},s=window.performance&&performance.getEntriesByName&&performance.getEntriesByName(\"first-contentful-paint\")[0],m=s?null:a(\"paint\",f);(s||m)&&(n=c(e,o,t),s&&f(s),u((function(i){o=r(\"FCP\"),n=c(e,o,t),requestAnimationFrame((function(){requestAnimationFrame((function(){o.value=performance.now()-i.timeStamp,n(!0)}))}))})))},p=!1,l=-1,h=function(e,t){p||(d((function(e){l=e.value})),p=!0);var n,i=function(t){l>-1&&e(t)},f=r(\"CLS\",0),s=0,m=[],v=function(e){if(!e.hadRecentInput){var t=m[0],i=m[m.length-1];s&&e.startTime-i.startTime<1e3&&e.startTime-t.startTime<5e3?(s+=e.value,m.push(e)):(s=e.value,m=[e]),s>f.value&&(f.value=s,f.entries=m,n())}},h=a(\"layout-shift\",v);h&&(n=c(i,f,t),o((function(){h.takeRecords().map(v),n(!0)})),u((function(){s=0,l=-1,f=r(\"CLS\",0),n=c(i,f,t)})))},T={passive:!0,capture:!0},y=new Date,g=function(i,r){e||(e=r,t=i,n=new Date,w(removeEventListener),E())},E=function(){if(t>=0&&t<n-y){var r={entryType:\"first-input\",name:e.type,target:e.target,cancelable:e.cancelable,startTime:e.timeStamp,processingStart:e.timeStamp+t};i.forEach((function(e){e(r)})),i=[]}},S=function(e){if(e.cancelable){var t=(e.timeStamp>1e12?new Date:performance.now())-e.timeStamp;\"pointerdown\"==e.type?function(e,t){var n=function(){g(e,t),r()},i=function(){r()},r=function(){removeEventListener(\"pointerup\",n,T),removeEventListener(\"pointercancel\",i,T)};addEventListener(\"pointerup\",n,T),addEventListener(\"pointercancel\",i,T)}(t,e):g(t,e)}},w=function(e){[\"mousedown\",\"keydown\",\"touchstart\",\"pointerdown\"].forEach((function(t){return e(t,S,T)}))},L=function(n,f){var s,m=v(),d=r(\"FID\"),p=function(e){e.startTime<m.firstHiddenTime&&(d.value=e.processingStart-e.startTime,d.entries.push(e),s(!0))},l=a(\"first-input\",p);s=c(n,d,f),l&&o((function(){l.takeRecords().map(p),l.disconnect()}),!0),l&&u((function(){var a;d=r(\"FID\"),s=c(n,d,f),i=[],t=-1,e=null,w(addEventListener),a=p,i.push(a),E()}))},b={},F=function(e,t){var n,i=v(),f=r(\"LCP\"),s=function(e){var t=e.startTime;t<i.firstHiddenTime&&(f.value=t,f.entries.push(e),n())},m=a(\"largest-contentful-paint\",s);if(m){n=c(e,f,t);var d=function(){b[f.id]||(m.takeRecords().map(s),m.disconnect(),b[f.id]=!0,n(!0))};[\"keydown\",\"click\"].forEach((function(e){addEventListener(e,d,{once:!0,capture:!0})})),o(d,!0),u((function(i){f=r(\"LCP\"),n=c(e,f,t),requestAnimationFrame((function(){requestAnimationFrame((function(){f.value=performance.now()-i.timeStamp,b[f.id]=!0,n(!0)}))}))}))}},P=function(e){var t,n=r(\"TTFB\");t=function(){try{var t=performance.getEntriesByType(\"navigation\")[0]||function(){var e=performance.timing,t={entryType:\"navigation\",startTime:0};for(var n in e)\"navigationStart\"!==n&&\"toJSON\"!==n&&(t[n]=Math.max(e[n]-e.navigationStart,0));return t}();if(n.value=n.delta=t.responseStart,n.value<0||n.value>performance.now())return;n.entries=[t],e(n)}catch(e){}},\"complete\"===document.readyState?setTimeout(t,0):addEventListener(\"load\",(function(){return setTimeout(t,0)}))};export{h as getCLS,d as getFCP,L as getFID,F as getLCP,P as getTTFB};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum EventNames {\n  FIRST_PAINT = 'firstPaint',\n  FIRST_CONTENTFUL_PAINT = 'firstContentfulPaint',\n  LARGEST_CONTENTFUL_PAINT = 'largestContentfulPaint',\n  CUMULATIVE_LAYOUT_SHIFT = 'cumulativeLayoutShift',\n  FIRST_INPUT_DELAY = 'firstInputDelay',\n  TIME_TO_FIRST_BYTE = 'timeToFirstByte'\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span } from '@opentelemetry/api';\nimport { otperformance } from '@opentelemetry/core';\nimport {\n  hasKey,\n  PerformanceEntries,\n  PerformanceLegacy,\n  PerformanceTimingNames as PTN,\n} from '@opentelemetry/sdk-trace-web';\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, Metric } from 'web-vitals';\nimport { EventNames } from './enums/EventNames';\n\nexport const getPerformanceNavigationEntries = (): PerformanceEntries => {\n  const entries: PerformanceEntries = {};\n  const performanceNavigationTiming = (\n    otperformance as unknown as Performance\n  ).getEntriesByType?.('navigation')[0] as PerformanceEntries;\n\n  if (performanceNavigationTiming) {\n    const keys = Object.values(PTN);\n    keys.forEach((key: string) => {\n      if (hasKey(performanceNavigationTiming, key)) {\n        const value = performanceNavigationTiming[key];\n        if (typeof value === 'number') {\n          entries[key] = value;\n        }\n      }\n    });\n  } else {\n    // // fallback to previous version\n    const perf: typeof otperformance & PerformanceLegacy = otperformance;\n    const performanceTiming = perf.timing;\n    if (performanceTiming) {\n      const keys = Object.values(PTN);\n      keys.forEach((key: string) => {\n        if (hasKey(performanceTiming, key)) {\n          const value = performanceTiming[key];\n          if (typeof value === 'number') {\n            entries[key] = value;\n          }\n        }\n      });\n    }\n  }\n\n  return entries;\n};\n\nconst vitalsMetricNames: Record<Metric['name'], EventNames> = {\n  FCP: EventNames.FIRST_CONTENTFUL_PAINT,\n  FID: EventNames.FIRST_INPUT_DELAY,\n  TTFB: EventNames.TIME_TO_FIRST_BYTE,\n  LCP: EventNames.LARGEST_CONTENTFUL_PAINT,\n  CLS: EventNames.CUMULATIVE_LAYOUT_SHIFT\n};\n\nconst performancePaintNames: Record<string, EventNames> = {\n  'first-paint': EventNames.FIRST_PAINT,\n};\n\nconst vitalsMetricAsAttributes = new Set([EventNames.CUMULATIVE_LAYOUT_SHIFT])\n\nexport const addSpanPerformancePaintEvents = (span: Span, callback: () => void) => {\n  const metrics: Partial<Record<EventNames, number>> = {}\n  const missedMetrics: Set<Metric['name']> = new Set(['FCP', 'FID', 'TTFB'])\n  if ('chrome' in globalThis) {\n    // LCP and CLS are only available in chromium according to web-vitals README\n    missedMetrics.add('LCP');\n    missedMetrics.add('CLS');\n  }\n\n  let spanIsEnded = false;\n\n  const endSpan = () => {\n    document.removeEventListener('visibilitychange', endSpan);\n    globalThis.removeEventListener('pagehide', endSpan);\n    if (!spanIsEnded) {\n      // collect first-paint as it's not a part of web-vitals\n      const performancePaintTiming = (\n        otperformance as unknown as Performance\n      ).getEntriesByType?.('paint');\n\n      if (performancePaintTiming) {\n        performancePaintTiming.forEach(({ name, startTime }) => {\n          if (hasKey(performancePaintNames, name)) {\n            metrics[performancePaintNames[name]] = startTime;\n          }\n        });\n      }\n\n      spanIsEnded = true;\n      Object.entries(metrics).forEach(([metric, value]) => {\n        span[vitalsMetricAsAttributes.has(metric as EventNames) ? 'setAttribute' : 'addEvent'](metric, value);\n      })\n      callback();\n    }\n  }\n\n  const handleNewMetric = (metric: Metric) => {\n    missedMetrics.delete(metric.name);\n    metrics[vitalsMetricNames[metric.name]] = metric.value;\n    if (!missedMetrics.size) {\n      endSpan();\n    }\n  }\n\n  document.addEventListener('visibilitychange', endSpan);\n  globalThis.addEventListener('pagehide', endSpan);\n\n  getCLS(handleNewMetric);\n  getFCP(handleNewMetric);\n  getFID(handleNewMetric);\n  getLCP(handleNewMetric);\n  getTTFB(handleNewMetric);\n\n  // collect largest-contentful-paint manually because web-vitals returns it\n  // after user interaction and it may not work in synthetic monitoring;\n  // we save only the latest recorded metric value in case when web-vitals returns different LCP\n  if (typeof PerformanceObserver === 'function') {\n    const observer = new PerformanceObserver(() => {});\n    observer.observe({ type: 'largest-contentful-paint', buffered: true });\n    if (typeof observer.takeRecords === 'function') {\n      const [lcpRecord] = observer.takeRecords();\n      if (lcpRecord) {\n        missedMetrics.delete('LCP');\n        metrics[EventNames.LARGEST_CONTENTFUL_PAINT] = lcpRecord.startTime;\n      }\n    }\n  }\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  propagation,\n  trace,\n  Span,\n  ROOT_CONTEXT,\n} from '@opentelemetry/api';\nimport { otperformance, TRACE_PARENT_HEADER } from '@opentelemetry/core';\nimport {\n  addSpanNetworkEvent,\n  addSpanNetworkEvents,\n  hasKey,\n  PerformanceEntries,\n  PerformanceTimingNames as PTN,\n} from '@opentelemetry/sdk-trace-web';\nimport {\n  InstrumentationBase,\n  InstrumentationConfig,\n} from '@opentelemetry/instrumentation';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { VERSION } from './version';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport {\n  addSpanPerformancePaintEvents,\n  getPerformanceNavigationEntries,\n} from './utils';\n\n/**\n * This class represents a document load plugin\n */\nexport class DocumentLoadInstrumentation extends InstrumentationBase<unknown> {\n  readonly component: string = 'document-load';\n  readonly version: string = '1';\n  moduleName = this.component;\n  protected _config!: InstrumentationConfig;\n  private _enabled = false;\n\n  /**\n   *\n   * @param config\n   */\n  constructor(config: InstrumentationConfig = {}) {\n    super('@opentelemetry/instrumentation-document-load', VERSION, config);\n  }\n\n  init() {}\n\n  /**\n   * callback to be executed when page is loaded\n   */\n  private _onDocumentLoaded() {\n    // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.\n    // Support for event \"loadend\" is very limited and cannot be used\n    window.setTimeout(() => {\n      this._collectPerformance();\n    });\n  }\n\n  /**\n   * Adds spans for all resources\n   * @param rootSpan\n   */\n  private _addResourcesSpans(rootSpan: Span): void {\n    const resources: PerformanceResourceTiming[] = (\n      otperformance as unknown as Performance\n    ).getEntriesByType?.('resource') as PerformanceResourceTiming[];\n    if (resources) {\n      resources.forEach(resource => {\n        this._initResourceSpan(resource, rootSpan);\n      });\n    }\n  }\n\n  /**\n   * Collects information about performance and creates appropriate spans\n   */\n  private _collectPerformance() {\n    const metaElement = Array.from(document.getElementsByTagName('meta')).find(\n      e => e.getAttribute('name') === TRACE_PARENT_HEADER\n    );\n    const entries = getPerformanceNavigationEntries();\n    const traceparent = (metaElement && metaElement.content) || '';\n    context.with(propagation.extract(ROOT_CONTEXT, { traceparent }), () => {\n      const rootSpan = this._startSpan(\n        AttributeNames.DOCUMENT_LOAD,\n        PTN.FETCH_START,\n        entries\n      );\n      if (!rootSpan) {\n        return;\n      }\n      context.with(trace.setSpan(context.active(), rootSpan), () => {\n        const fetchSpan = this._startSpan(\n          AttributeNames.DOCUMENT_FETCH,\n          PTN.FETCH_START,\n          entries\n        );\n        if (fetchSpan) {\n          fetchSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n          fetchSpan.setAttribute(SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);\n          context.with(trace.setSpan(context.active(), fetchSpan), () => {\n            addSpanNetworkEvents(fetchSpan, entries);\n            this._endSpan(fetchSpan, PTN.RESPONSE_END, entries);\n          });\n        }\n      });\n\n      rootSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n      rootSpan.setAttribute(\n        SemanticAttributes.HTTP_USER_AGENT,\n        navigator.userAgent\n      );\n      rootSpan.setAttribute(AttributeNames.PAGE_TITLE, document.title);\n\n      this._addResourcesSpans(rootSpan);\n\n      addSpanNetworkEvent(rootSpan, PTN.FETCH_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_INTERACTIVE, entries);\n      addSpanNetworkEvent(\n        rootSpan,\n        PTN.DOM_CONTENT_LOADED_EVENT_START,\n        entries\n      );\n      addSpanNetworkEvent(rootSpan, PTN.DOM_CONTENT_LOADED_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_COMPLETE, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_END, entries);\n\n      addSpanPerformancePaintEvents(rootSpan, () => {\n        this._endSpan(rootSpan, PTN.LOAD_EVENT_END, entries);\n      });\n    });\n  }\n\n  /**\n   * Helper function for ending span\n   * @param span\n   * @param performanceName name of performance entry for time end\n   * @param entries\n   */\n  private _endSpan(\n    span: Span | undefined,\n    performanceName: string,\n    entries: PerformanceEntries\n  ) {\n    // span can be undefined when entries are missing the certain performance - the span will not be created\n    if (span) {\n      if (hasKey(entries, performanceName)) {\n        span.end(entries[performanceName]);\n      } else {\n        // just end span\n        span.end();\n      }\n    }\n  }\n\n  /**\n   * Creates and ends a span with network information about resource added as timed events\n   * @param resource\n   * @param parentSpan\n   */\n  private _initResourceSpan(\n    resource: PerformanceResourceTiming,\n    parentSpan: Span\n  ) {\n    const span = this._startSpan(\n      AttributeNames.RESOURCE_FETCH,\n      PTN.FETCH_START,\n      resource,\n      parentSpan\n    );\n    if (span) {\n      span.setAttribute(SemanticAttributes.HTTP_URL, resource.name);\n      addSpanNetworkEvents(span, resource);\n      this._endSpan(span, PTN.RESPONSE_END, resource);\n    }\n  }\n\n  /**\n   * Helper function for starting a span\n   * @param spanName name of span\n   * @param performanceName name of performance entry for time start\n   * @param entries\n   * @param parentSpan\n   */\n  private _startSpan(\n    spanName: string,\n    performanceName: string,\n    entries: PerformanceEntries,\n    parentSpan?: Span\n  ): Span | undefined {\n    if (\n      hasKey(entries, performanceName) &&\n      typeof entries[performanceName] === 'number'\n    ) {\n      const span = this.tracer.startSpan(\n        spanName,\n        {\n          startTime: entries[performanceName],\n        },\n        parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined\n      );\n      span.setAttribute(AttributeNames.COMPONENT, this.component);\n      return span;\n    }\n    return undefined;\n  }\n\n  /**\n   * executes callback {_onDocumentLoaded} when the page is loaded\n   */\n  private _waitForPageLoad() {\n    if (window.document.readyState === 'complete' && !this._enabled) {\n      this._enabled = true;\n      this._onDocumentLoaded();\n    } else {\n      this._onDocumentLoaded = this._onDocumentLoaded.bind(this);\n      window.addEventListener('load', this._onDocumentLoaded);\n    }\n  }\n\n  /**\n   * implements enable function\n   */\n  override enable() {\n    // remove previously attached load to avoid adding the same event twice\n    // in case of multiple enable calling.\n    window.removeEventListener('load', this._onDocumentLoaded);\n    this._waitForPageLoad();\n  }\n\n  /**\n   * implements disable function\n   */\n  override disable() {\n    window.removeEventListener('load', this._onDocumentLoaded);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.31.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum AttributeNames {\n  COMPONENT = 'component',\n  EVENT_TYPE = 'event_type',\n  TARGET_ELEMENT = 'target_element',\n  TARGET_XPATH = 'target_xpath',\n  HTTP_URL = 'http.url',\n  // NOT ON OFFICIAL SPEC\n  HTTP_USER_AGENT = 'http.user_agent',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.32.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isWrapped, InstrumentationBase } from '@opentelemetry/instrumentation';\n\nimport * as api from '@opentelemetry/api';\nimport { hrTime } from '@opentelemetry/core';\nimport { getElementXPath } from '@opentelemetry/sdk-trace-web';\nimport { AttributeNames } from './enums/AttributeNames';\nimport {\n  EventName,\n  ShouldPreventSpanCreation,\n  UserInteractionInstrumentationConfig,\n} from './types';\nimport {\n  SpanData,\n} from './internal-types';\nimport { VERSION } from './version';\n\nconst EVENT_NAVIGATION_NAME = 'Navigation:';\nconst NEW_LOCATION_HREF = 'new.location.href';\nconst DEFAULT_EVENT_NAMES: EventName[] = ['click'];\n\nfunction defaultShouldPreventSpanCreation() {\n  return false;\n}\n\nconst getCurrentLocation = () => `${location.pathname}${location.search}${location.hash}`;\n\n/**\n * This class represents a UserInteraction plugin for auto instrumentation.\n * It patches addEventListener of HTMLElement.\n */\nexport class UserInteractionInstrumentation extends InstrumentationBase<unknown> {\n  readonly component: string = 'user-interaction';\n  readonly version = VERSION;\n  moduleName = this.component;\n  private _spansData = new WeakMap<api.Span, SpanData>();\n  private _isEnabled = false\n  // for addEventListener/removeEventListener state\n  private _wrappedListeners = new WeakMap<\n    Function | EventListenerObject,\n    Map<string, Map<HTMLElement, Function>>\n  >();\n  // for event bubbling\n  private _eventsSpanMap: WeakMap<Event, api.Span> = new WeakMap<\n    Event,\n    api.Span\n  >();\n  private _eventNames: Set<EventName>;\n  private _shouldPreventSpanCreation: ShouldPreventSpanCreation;\n\n  constructor(config?: UserInteractionInstrumentationConfig) {\n    super('@opentelemetry/instrumentation-user-interaction', VERSION, config);\n    this._eventNames = new Set(config?.eventNames ?? DEFAULT_EVENT_NAMES);\n    this._shouldPreventSpanCreation =\n      typeof config?.shouldPreventSpanCreation === 'function'\n        ? config.shouldPreventSpanCreation\n        : defaultShouldPreventSpanCreation;\n  }\n\n  init() {}\n\n  /**\n   * Controls whether or not to create a span, based on the event type.\n   */\n  protected _allowEventName(eventName: EventName): boolean {\n    return this._eventNames.has(eventName);\n  }\n\n  /**\n   * Creates a new span\n   * @param element\n   * @param eventName\n   */\n  private _createSpan(\n    element: EventTarget | null | undefined,\n    eventName: EventName,\n  ): api.Span | undefined {\n    if (!(element instanceof HTMLElement)) {\n      return undefined;\n    }\n    if (!element.getAttribute) {\n      return undefined;\n    }\n    if (element.hasAttribute('disabled')) {\n      return undefined;\n    }\n    if (!this._allowEventName(eventName)) {\n      return undefined;\n    }\n    const xpath = getElementXPath(element, true);\n    try {\n      const span = this.tracer.startSpan(\n        eventName,\n        {\n          attributes: {\n            [AttributeNames.COMPONENT]: this.component,\n            [AttributeNames.EVENT_TYPE]: eventName,\n            [AttributeNames.TARGET_ELEMENT]: element.tagName,\n            [AttributeNames.TARGET_XPATH]: xpath,\n            [AttributeNames.HTTP_URL]: window.location.href,\n            [AttributeNames.HTTP_USER_AGENT]: navigator.userAgent,\n          },\n        },\n        api.ROOT_CONTEXT\n      );\n\n      if (this._shouldPreventSpanCreation(eventName, element, span) === true) {\n        return undefined;\n      }\n\n      this._spansData.set(span, {\n        taskCount: 0,\n      });\n\n      return span;\n    } catch (e) {\n      api.diag.error(this.component, e);\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns true if we should use the patched callback; false if it's already been patched\n   */\n  private addPatchedListener(\n    on: HTMLElement,\n    type: string,\n    listener: Function | EventListenerObject,\n    wrappedListener: Function\n  ): boolean {\n    let listener2Type = this._wrappedListeners.get(listener);\n    if (!listener2Type) {\n      listener2Type = new Map();\n      this._wrappedListeners.set(listener, listener2Type);\n    }\n    let element2patched = listener2Type.get(type);\n    if (!element2patched) {\n      element2patched = new Map();\n      listener2Type.set(type, element2patched);\n    }\n    if (element2patched.has(on)) {\n      return false;\n    }\n    element2patched.set(on, wrappedListener);\n    return true;\n  }\n\n  /**\n   * Returns the patched version of the callback (or undefined)\n   */\n  private removePatchedListener(\n    on: HTMLElement,\n    type: string,\n    listener: Function | EventListenerObject\n  ): Function | undefined {\n    const listener2Type = this._wrappedListeners.get(listener);\n    if (!listener2Type) {\n      return undefined;\n    }\n    const element2patched = listener2Type.get(type);\n    if (!element2patched) {\n      return undefined;\n    }\n    const patched = element2patched.get(on);\n    if (patched) {\n      element2patched.delete(on);\n      if (element2patched.size === 0) {\n        listener2Type.delete(type);\n        if (listener2Type.size === 0) {\n          this._wrappedListeners.delete(listener);\n        }\n      }\n    }\n    return patched;\n  }\n\n  // utility method to deal with the Function|EventListener nature of addEventListener\n  private _invokeListener(\n    listener: Function | EventListenerObject,\n    target: any,\n    args: any[]\n  ): any {\n    if (typeof listener === 'function') {\n      return listener.apply(target, args);\n    } else {\n      return listener.handleEvent(args[0]);\n    }\n  }\n\n  /**\n   * This patches the addEventListener of HTMLElement to be able to\n   * auto instrument the click events\n   */\n  private _patchAddEventListener() {\n    const plugin = this;\n    return (original: EventTarget['addEventListener']) => {\n      return function addEventListenerPatched(\n        this: HTMLElement,\n        type: keyof HTMLElementEventMap,\n        listener: EventListenerOrEventListenerObject | null,\n        useCapture?: boolean | AddEventListenerOptions\n      ) {\n        // Forward calls with listener = null\n        if (!listener) {\n          return original.call(this, type, listener, useCapture);\n        }\n\n        // filter out null (typeof null === 'object')\n        const once =\n          useCapture && typeof useCapture === 'object' && useCapture.once;\n        const addEventListenerContext = this\n        const patchedListener = function (this: HTMLElement, ...args: any[]) {\n          const event: Event | undefined = args[0];\n          const target = event?.target;\n          if (once) {\n            plugin.removePatchedListener(addEventListenerContext, type, listener);\n          }\n          // use previously created span for this event in order to create one span per event\n          const eventSpan = event && plugin._eventsSpanMap.get(event)\n          const span = eventSpan || plugin._createSpan(target, type);\n          if (span) {\n            if (event && !eventSpan) {\n              plugin._eventsSpanMap.set(event, span);\n            }\n\n            const spansData = plugin._spansData.get(span)!\n            const result = api.context.with(\n              api.trace.setSpan(api.context.active(), span),\n              () => {\n                if (spansData.currentLocation === undefined) {\n                  // set `currentLocation` only once for this event\n                  spansData.currentLocation = getCurrentLocation();\n                }\n                const result = plugin._invokeListener(listener, this, args);\n                spansData.lastListenerEndHrTime = hrTime();\n                return result;\n              }\n            );\n            if (event && !eventSpan) {\n              // end span when all other listeners end and wait 100ms for possible navigation change\n              setTimeout(() => {\n                if (spansData.currentLocation !== getCurrentLocation()) {\n                  plugin._updateSpanAsNavigation(span);\n                }\n                span.end(spansData.lastListenerEndHrTime)\n              }, 200)\n            }\n            return result;\n          }\n\n          if (event instanceof UIEvent && event.isTrusted) {\n            // if there is no event span, we still don't want to attach this operator to the previous span,\n            // because it's a user interaction event\n            return api.context.with(api.ROOT_CONTEXT, () => plugin._invokeListener(listener, this, args));\n          }\n\n          return plugin._invokeListener(listener, this, args);\n        };\n        if (plugin.addPatchedListener(this, type, listener, patchedListener)) {\n          return original.call(this, type, patchedListener, useCapture);\n        }\n      };\n    };\n  }\n\n  /**\n   * This patches the removeEventListener of HTMLElement to handle the fact that\n   * we patched the original callbacks\n   */\n  private _patchRemoveEventListener() {\n    const plugin = this;\n    return (original: Function) => {\n      return function removeEventListenerPatched(\n        this: HTMLElement,\n        type: any,\n        listener: any,\n        useCapture: any\n      ) {\n        const wrappedListener = plugin.removePatchedListener(\n          this,\n          type,\n          listener\n        );\n        if (wrappedListener) {\n          return original.call(this, type, wrappedListener, useCapture);\n        } else {\n          return original.call(this, type, listener, useCapture);\n        }\n      };\n    };\n  }\n\n  /**\n   * Most browser provide event listener api via EventTarget in prototype chain.\n   * Exception to this is IE 11 which has it on the prototypes closest to EventTarget:\n   *\n   * * - has addEventListener in IE\n   * ** - has addEventListener in all other browsers\n   * ! - missing in IE\n   *\n   * HTMLElement -> Element -> Node * -> EventTarget **! -> Object\n   * Document -> Node * -> EventTarget **! -> Object\n   * Window * -> WindowProperties ! -> EventTarget **! -> Object\n   */\n  private _getPatchableEventTargets(): EventTarget[] {\n    return window.EventTarget\n      ? [EventTarget.prototype]\n      : [Node.prototype, Window.prototype];\n  }\n\n  /**\n   * Updates interaction span name\n   * @param url\n   */\n  _updateSpanAsNavigation(span: api.Span) {\n    span.updateName(`${EVENT_NAVIGATION_NAME} ${getCurrentLocation()}`);\n    span.setAttribute(NEW_LOCATION_HREF, location.href);\n  }\n\n  /**\n   * implements enable function\n   */\n  override enable() {\n    if (this._isEnabled) return\n    this._isEnabled = true\n    api.diag.debug(\n      'applying patch to',\n      this.moduleName,\n      this.version,\n    );\n\n    const targets = this._getPatchableEventTargets();\n    targets.forEach(target => {\n      this._wrap(target, 'addEventListener', this._patchAddEventListener());\n      this._wrap(\n        target,\n        'removeEventListener',\n        this._patchRemoveEventListener()\n      );\n    });\n  }\n\n  /**\n   * implements unpatch function\n   */\n  override disable() {\n    if (!this._isEnabled) return\n    this._isEnabled = false\n    api.diag.debug(\n      'removing patch from',\n      this.moduleName,\n      this.version,\n    );\n    const targets = this._getPatchableEventTargets();\n    targets.forEach(target => {\n      if (isWrapped(target.addEventListener)) {\n        this._unwrap(target, 'addEventListener');\n      }\n      if (isWrapped(target.removeEventListener)) {\n        this._unwrap(target, 'removeEventListener');\n      }\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(`Header \"${key}\" has wrong value and will be ignored`);\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface for handling error\n */\nexport class OTLPExporterError extends Error {\n  readonly code?: number;\n  override readonly name: string = 'OTLPExporterError';\n  readonly data?: string;\n\n  constructor(message?: string, code?: number, data?: string) {\n    super(message);\n    this.data = data;\n    this.code = code;\n  }\n}\n\n/**\n * Interface for handling export service errors\n */\nexport interface ExportServiceError {\n  name: string;\n  code: number;\n  details: string;\n  metadata: { [key: string]: unknown };\n  message: string;\n  stack: string;\n}\n\n/**\n * Collector Exporter base config\n */\nexport interface OTLPExporterConfigBase {\n  headers?: Partial<Record<string, unknown>>;\n  hostname?: string;\n  url?: string;\n  concurrencyLimit?: number;\n  /** Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms. */\n  timeoutMillis?: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterError } from '../../types';\n\nlet minimumFailedSendBeaconPayloadSize = Infinity;\n\n// exported only for test files\nexport const resetSendWithBeacon = () => {\n  minimumFailedSendBeaconPayloadSize = Infinity;\n};\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param url\n * @param blobPropertyBag\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(\n  body: string,\n  url: string,\n  blobPropertyBag: BlobPropertyBag,\n): boolean {\n  // navigator.sendBeacon returns 'false' if the given payload exceeds the user agent limit.\n  // See https://w3c.github.io/beacon/#return-value for specification.\n  // Because we don't know what the limit is and to keep user's console clean, we only try to send payloads that may suceed.\n  const blob = new Blob([body], blobPropertyBag);\n  if (\n    blob.size < minimumFailedSendBeaconPayloadSize &&\n    navigator.sendBeacon(url, blob)\n  ) {\n    diag.debug('sendBeacon - can send', body);\n    return true;\n  }\n\n  minimumFailedSendBeaconPayloadSize = blob.size;\n  diag.info(\n    'sendBeacon failed because the given payload was too big; try to lower your span processor limits'\n  );\n\n  return false;\n}\n\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param url\n * @param headers\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(\n  body: string,\n  url: string,\n  headers: Record<string, string>,\n  exporterTimeout: number,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  let reqIsDestroyed: boolean;\n\n  const exporterTimer = setTimeout(() => {\n    reqIsDestroyed = true;\n    xhr.abort();\n  }, exporterTimeout);\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', url);\n\n  const defaultHeaders = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  };\n\n  Object.entries({\n    ...defaultHeaders,\n    ...headers,\n  }).forEach(([k, v]) => {\n    xhr.setRequestHeader(k, v);\n  });\n\n  xhr.send(body);\n\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status >= 200 && xhr.status <= 299) {\n        clearTimeout(exporterTimer);\n        diag.debug('xhr success', body);\n        onSuccess();\n      } else if (reqIsDestroyed) {\n        const error = new OTLPExporterError('Request Timeout', xhr.status);\n        onError(error);\n      } else {\n        const error = new OTLPExporterError(\n          `Failed to export with XHR (status: ${xhr.status})`,\n          xhr.status\n        );\n        clearTimeout(exporterTimer);\n        onError(error);\n      }\n    }\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IInstrumentationScope, IKeyValue } from '../common/types';\nimport { IResource } from '../resource/types';\n\n/** Properties of an ExportTraceServiceRequest. */\nexport interface IExportTraceServiceRequest {\n  /** ExportTraceServiceRequest resourceSpans */\n  resourceSpans?: IResourceSpans[];\n}\n\n/** Properties of a ResourceSpans. */\nexport interface IResourceSpans {\n  /** ResourceSpans resource */\n  resource?: IResource;\n\n  /** ResourceSpans scopeSpans */\n  scopeSpans: IScopeSpans[];\n\n  /** ResourceSpans schemaUrl */\n  schemaUrl?: string;\n}\n\n/** Properties of an ScopeSpans. */\nexport interface IScopeSpans {\n  /** IScopeSpans scope */\n  scope?: IInstrumentationScope;\n\n  /** IScopeSpans spans */\n  spans?: ISpan[];\n\n  /** IScopeSpans schemaUrl */\n  schemaUrl?: string | null;\n}\n\n/** Properties of a Span. */\nexport interface ISpan {\n  /** Span traceId */\n  traceId: string;\n\n  /** Span spanId */\n  spanId: string;\n\n  /** Span traceState */\n  traceState?: string | null;\n\n  /** Span parentSpanId */\n  parentSpanId?: string;\n\n  /** Span name */\n  name: string;\n\n  /** Span kind */\n  kind: ESpanKind;\n\n  /** Span startTimeUnixNano */\n  startTimeUnixNano: number;\n\n  /** Span endTimeUnixNano */\n  endTimeUnixNano: number;\n\n  /** Span attributes */\n  attributes: IKeyValue[];\n\n  /** Span droppedAttributesCount */\n  droppedAttributesCount: number;\n\n  /** Span events */\n  events: IEvent[];\n\n  /** Span droppedEventsCount */\n  droppedEventsCount: number;\n\n  /** Span links */\n  links: ILink[];\n\n  /** Span droppedLinksCount */\n  droppedLinksCount: number;\n\n  /** Span status */\n  status: IStatus;\n}\n\n/**\n * SpanKind is the type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum ESpanKind {\n  /** Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED. */\n  SPAN_KIND_UNSPECIFIED = 0,\n\n  /** Indicates that the span represents an internal operation within an application,\n   * as opposed to an operation happening at the boundaries. Default value.\n   */\n  SPAN_KIND_INTERNAL = 1,\n\n  /** Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SPAN_KIND_SERVER = 2,\n\n  /** Indicates that the span describes a request to some remote service.\n   */\n  SPAN_KIND_CLIENT = 3,\n\n  /** Indicates that the span describes a producer sending a message to a broker.\n   * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n   * between producer and consumer spans. A PRODUCER span ends when the message was accepted\n   * by the broker while the logical processing of the message might span a much longer time.\n   */\n  SPAN_KIND_PRODUCER = 4,\n\n  /** Indicates that the span describes consumer receiving a message from a broker.\n   * Like the PRODUCER kind, there is often no direct critical path latency relationship\n   * between producer and consumer spans.\n   */\n  SPAN_KIND_CONSUMER = 5,\n}\n\n/** Properties of a Status. */\nexport interface IStatus {\n  /** Status message */\n  message?: string;\n\n  /** Status code */\n  code: EStatusCode;\n}\n\n/** StatusCode enum. */\nexport const enum EStatusCode {\n  /** The default status. */\n  STATUS_CODE_UNSET = 0,\n  /** The Span has been evaluated by an Application developers or Operator to have completed successfully. */\n  STATUS_CODE_OK = 1,\n  /** The Span contains an error. */\n  STATUS_CODE_ERROR = 2,\n}\n\n/** Properties of an Event. */\nexport interface IEvent {\n  /** Event timeUnixNano */\n  timeUnixNano: number;\n\n  /** Event name */\n  name: string;\n\n  /** Event attributes */\n  attributes: IKeyValue[];\n\n  /** Event droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n\n/** Properties of a Link. */\nexport interface ILink {\n  /** Link traceId */\n  traceId: string;\n\n  /** Link spanId */\n  spanId: string;\n\n  /** Link traceState */\n  traceState?: string;\n\n  /** Link attributes */\n  attributes: IKeyValue[];\n\n  /** Link droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * AggregationTemporality indicates the way additive quantities are expressed.\n */\nexport enum AggregationTemporality {\n  DELTA,\n  CUMULATIVE,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { Histogram } from '../aggregator/types';\n\n/**\n * Basic metric data fields.\n */\ninterface BaseMetricData {\n  readonly descriptor: InstrumentDescriptor;\n  readonly aggregationTemporality: AggregationTemporality;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SumMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SUM;\n  readonly dataPoints: DataPoint<number>[];\n  readonly isMonotonic: boolean;\n}\n\nexport interface GaugeMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.GAUGE;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData = SumMetricData | GaugeMetricData | HistogramMetricData;\n\nexport interface ScopeMetrics {\n  scope: InstrumentationScope;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: Resource;\n  scopeMetrics: ScopeMetrics[];\n}\n\n/**\n * Represents the collection result of the metrics. If there are any\n * non-critical errors in the collection, like throwing in a single observable\n * callback, these errors are aggregated in the {@link CollectionResult.errors}\n * array and other successfully collected metrics are returned.\n */\nexport interface CollectionResult {\n  /**\n   * Collected metrics.\n   */\n  resourceMetrics: ResourceMetrics;\n  /**\n   * Arbitrary JavaScript exception values.\n   */\n  errors: unknown[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  /**\n   * A histogram data point contains a histogram statistics of collected\n   * values with a list of explicit bucket boundaries and statistics such\n   * as min, max, count, and sum of all collected values.\n   */\n  HISTOGRAM,\n  /**\n   * An exponential histogram data point contains a histogram statistics of\n   * collected values where bucket boundaries are automatically calculated\n   * using an exponential function, and statistics such as min, max, count,\n   * and sum of all collected values.\n   */\n  EXPONENTIAL_HISTOGRAM,\n  /**\n   * A gauge metric data point has only a single numeric value.\n   */\n  GAUGE,\n  /**\n   * A sum metric data point has a single numeric value and a\n   * monotonicity-indicator.\n   */\n  SUM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint. The type of the value is indicated by the\n   * {@link DataPointType}.\n   */\n  readonly value: T;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/** The kind of aggregator. */\nexport enum AggregatorKind {\n  DROP,\n  SUM,\n  LAST_VALUE,\n  HISTOGRAM,\n}\n\n/** DataPoint value type for SumAggregation. */\nexport type Sum = number;\n\n/** DataPoint value type for LastValueAggregation. */\nexport type LastValue = number;\n\n/** DataPoint value type for HistogramAggregation. */\nexport interface Histogram {\n  /**\n   * Buckets are implemented using two different arrays:\n   *  - boundaries: contains every finite bucket boundary, which are inclusive lower bounds\n   *  - counts: contains event counts for each bucket\n   *\n   * Note that we'll always have n+1 buckets, where n is the number of boundaries.\n   * This is because we need to count events that are below the lowest boundary.\n   *\n   * Example: if we measure the values: [5, 30, 5, 40, 5, 15, 15, 15, 25]\n   *  with the boundaries [ 10, 20, 30 ], we will have the following state:\n   *\n   * buckets: {\n   *\tboundaries: [10, 20, 30],\n   *\tcounts: [3, 3, 1, 2],\n   * }\n   */\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum?: number;\n  count: number;\n  min?: number;\n  max?: number;\n}\n\n/**\n * An Aggregator accumulation state.\n */\nexport interface Accumulation {\n  setStartTime(startTime: HrTime): void;\n  record(value: number): void;\n}\n\nexport type AccumulationRecord<T> = [MetricAttributes, T];\n\n/**\n * Base interface for aggregators. Aggregators are responsible for holding\n * aggregated values and taking a snapshot of these values upon export.\n */\nexport interface Aggregator<T> {\n  /** The kind of the aggregator. */\n  kind: AggregatorKind;\n\n  /**\n   * Create a clean state of accumulation.\n   */\n  createAccumulation(startTime: HrTime): T;\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * This should always assume that the accumulations do not overlap and merge together for a new\n   * cumulative report.\n   *\n   * @param previous the previously captured accumulation\n   * @param delta the newly captured (delta) accumulation\n   * @returns the result of the merge of the given accumulations\n   */\n  merge(previous: T, delta: T): T;\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * @param previous the previously captured accumulation\n   * @param current the newly captured (cumulative) accumulation\n   * @returns The resulting delta accumulation\n   */\n  diff(previous: T, current: T): T;\n\n  /**\n   * Returns the {@link MetricData} that this {@link Aggregator} will produce.\n   *\n   * @param descriptor the metric instrument descriptor.\n   * @param aggregationTemporality the temporality of the resulting {@link MetricData}\n   * @param accumulationByAttributes the array of attributes and accumulation pairs.\n   * @param endTime the end time of the metric data.\n   * @return the {@link MetricData} that this {@link Aggregator} will produce.\n   */\n  toMetricData(\n    descriptor: InstrumentDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<T>[],\n    endTime: HrTime\n  ): Maybe<MetricData>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricOptions, ValueType } from '@opentelemetry/api';\nimport { View } from './view/View';\n\n/**\n * Supported types of metric instruments.\n */\nexport enum InstrumentType {\n  COUNTER = 'COUNTER',\n  HISTOGRAM = 'HISTOGRAM',\n  UP_DOWN_COUNTER = 'UP_DOWN_COUNTER',\n  OBSERVABLE_COUNTER = 'OBSERVABLE_COUNTER',\n  OBSERVABLE_GAUGE = 'OBSERVABLE_GAUGE',\n  OBSERVABLE_UP_DOWN_COUNTER = 'OBSERVABLE_UP_DOWN_COUNTER',\n}\n\n/**\n * An interface describing the instrument.\n */\nexport interface InstrumentDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n}\n\nexport function createInstrumentDescriptor(\n  name: string,\n  type: InstrumentType,\n  options?: MetricOptions\n): InstrumentDescriptor {\n  return {\n    name,\n    type,\n    description: options?.description ?? '',\n    unit: options?.unit ?? '',\n    valueType: options?.valueType ?? ValueType.DOUBLE,\n  };\n}\n\nexport function createInstrumentDescriptorWithView(\n  view: View,\n  instrument: InstrumentDescriptor\n): InstrumentDescriptor {\n  return {\n    name: view.name ?? instrument.name,\n    description: view.description ?? instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n  };\n}\n\nexport function isDescriptorCompatibleWith(\n  descriptor: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return (\n    descriptor.name === otherDescriptor.name &&\n    descriptor.unit === otherDescriptor.unit &&\n    descriptor.type === otherDescriptor.type &&\n    descriptor.valueType === otherDescriptor.valueType\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { SpanAttributes } from '@opentelemetry/api';\nimport { IAnyValue, IKeyValue } from './types';\n\nexport function toAttributes(attributes: SpanAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n\nexport function hexToBuf(hex: string): Uint8Array | undefined {\n  const ints = hex.match(/[\\da-f]{2}/gi)?.map(h => parseInt(h, 16));\n  return ints && new Uint8Array(ints);\n}\n\nfunction i2hex(i: number): string {\n  return ('0' + i.toString(16)).slice(-2);\n}\n\nexport function bufToHex(buf?: Uint8Array | null): string | undefined {\n  if (buf == null || buf.length === 0) return undefined;\n  return Array.from(buf).map(i2hex).join('');\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\nimport * as core from '@opentelemetry/core';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, useHex?: boolean): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  const parentSpanId = useHex\n    ? span.parentSpanId\n    : span.parentSpanId != null\n    ? core.hexToBase64(span.parentSpanId)\n    : undefined;\n  return {\n    traceId: useHex ? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex ? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToNanoseconds(span.startTime),\n    endTimeUnixNano: hrTimeToNanoseconds(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: 0,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: 0,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, useHex)),\n    droppedLinksCount: 0,\n  };\n}\n\nexport function toOtlpLink(link: Link, useHex?: boolean): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex\n      ? link.context.spanId\n      : core.hexToBase64(link.context.spanId),\n    traceId: useHex\n      ? link.context.traceId\n      : core.hexToBase64(link.context.traceId),\n    droppedAttributesCount: 0,\n  };\n}\n\nexport function toOtlpSpanEvent(timedEvent: TimedEvent): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToNanoseconds(timedEvent.time),\n    droppedAttributesCount: 0,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Resource } from '@opentelemetry/resources';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { toAttributes } from '../common/internal';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport {\n  IExportTraceServiceRequest,\n  IResourceSpans,\n  IScopeSpans,\n} from './types';\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  useHex?: boolean\n): IExportTraceServiceRequest {\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, useHex),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<Resource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  useHex?: boolean\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const { name, version, schemaUrl } =\n          scopeSpans[0].instrumentationLibrary;\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, useHex)\n        );\n\n        scopeResourceSpans.push({\n          scope: { name, version },\n          spans: spans,\n          schemaUrl: schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0,\n      },\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport {\n  OTLPExporterConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  OTLPExporterBrowserBase,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  createExportTraceServiceRequest,\n  IExportTraceServiceRequest,\n} from '@opentelemetry/otlp-transformer';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/traces';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * Collector Trace Exporter for Web\n */\nexport class OTLPTraceExporter\n  extends OTLPExporterBrowserBase<ReadableSpan, IExportTraceServiceRequest>\n  implements SpanExporter\n{\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._headers = Object.assign(\n      this._headers,\n      baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS\n      )\n    );\n  }\n  convert(spans: ReadableSpan[]): IExportTraceServiceRequest {\n    return createExportTraceServiceRequest(spans, true);\n  }\n\n  getDefaultUrl(config: OTLPExporterConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT)\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n  ServiceRequest\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : Infinity;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n  abstract convert(objects: ExportItem[]): ServiceRequest;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterBrowserBase<\n  ExportItem,\n  ServiceRequest\n> extends OTLPExporterBase<OTLPExporterConfigBase, ExportItem, ServiceRequest> {\n  protected _headers: Record<string, string>;\n  private _useXHR: boolean = false;\n\n  /**\n   * @param config\n   */\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._useXHR =\n      !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (this._useXHR) {\n      this._headers = Object.assign(\n        {},\n        parseHeaders(config.headers),\n        baggageUtils.parseKeyPairsIntoRecord(\n          getEnv().OTEL_EXPORTER_OTLP_HEADERS\n        )\n      );\n    } else {\n      this._headers = {};\n    }\n  }\n\n  onInit(): void {\n    window.addEventListener('unload', this.shutdown);\n  }\n\n  onShutdown(): void {\n    window.removeEventListener('unload', this.shutdown);\n  }\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const serviceRequest = this.convert(items);\n    const body = JSON.stringify(serviceRequest);\n\n    const promise = new Promise<void>((resolve, reject) => {\n      if (!this._useXHR && sendWithBeacon(body, this.url, { type: 'application/json' })) {\n        resolve()\n      } else {\n        sendWithXhr(\n          body,\n          this.url,\n          this._headers,\n          this.timeoutMillis,\n          resolve,\n          reject\n        );\n      }\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n","import {\n  ExportResult,\n  hrTime,\n  hrTimeToMilliseconds,\n} from '@opentelemetry/core';\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\n\nconst TELEMETRY_SDK_EXPORT_TIMESTAMP =\n  'sumologic.telemetry.sdk.export_timestamp';\n\nexport class ExportTimestampEnrichmentExporter implements SpanExporter {\n  private readonly _exporter: SpanExporter;\n\n  constructor(exporter: SpanExporter) {\n    this._exporter = exporter;\n  }\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void,\n  ) {\n    const exportTimestamp = hrTimeToMilliseconds(hrTime());\n    spans.forEach((span) => {\n      span.resource.attributes[TELEMETRY_SDK_EXPORT_TIMESTAMP] =\n        exportTimestamp;\n    });\n    this._exporter.export(spans, resultCallback);\n  }\n\n  async shutdown() {\n    return this._exporter.shutdown();\n  }\n}\n","import { Context, HrTime } from '@opentelemetry/api';\nimport { hrTime, hrTimeToNanoseconds } from '@opentelemetry/core';\nimport {\n  ReadableSpan,\n  Span as SdkTraceSpan,\n} from '@opentelemetry/sdk-trace-base';\n\n// @todo: remove when typescript gets updated\ntype DocumentVisibilityState = typeof window.document.visibilityState;\n\nconst ATTRIBUTE_NAME = 'document.visibilityState';\nconst VISIBILITY_STATE_TO_EVENT_NAMES: Record<DocumentVisibilityState, string> =\n  {\n    visible: 'pageshow',\n    hidden: 'pagehide',\n  };\nconst MAX_CHANGES = 100;\n\nconst changes: {\n  timestampInNanoseconds: number;\n  timestampInHrTime: HrTime;\n  state: DocumentVisibilityState;\n}[] = [];\nlet initialState = document.visibilityState;\nlet currentState = initialState;\n\n// exported for tests\nexport const resetDocumentVisibilityStateChanges = () => {\n  while (changes.length) {\n    changes.pop();\n  }\n  initialState = document.visibilityState;\n  currentState = initialState;\n};\n\nconst updateState = () => {\n  const newState = document.visibilityState;\n  if (currentState !== newState) {\n    currentState = newState;\n    const timestampInHrTime = hrTime();\n    changes.push({\n      timestampInNanoseconds: hrTimeToNanoseconds(timestampInHrTime),\n      timestampInHrTime,\n      state: newState,\n    });\n    if (changes.length > MAX_CHANGES) {\n      changes.shift();\n    }\n  }\n};\n\ndocument.addEventListener('visibilitychange', () => {\n  updateState();\n});\n\nwindow.addEventListener('pagehide', () => {\n  updateState();\n});\n\nwindow.addEventListener('pageshow', () => {\n  updateState();\n});\n\nexport const onStart = (span: SdkTraceSpan, context?: Context): void => {\n  span.setAttribute(ATTRIBUTE_NAME, initialState);\n\n  // We need to check history of changes, because span can be created with a custom time.\n  // This is a common situation in document-load auto-instrumentation, when spans are created\n  // with page loading times, when the RUM script was not yet initialized.\n  const startTimeInNanoseconds = hrTimeToNanoseconds(span.startTime);\n  for (let i = changes.length - 1; i >= 0; i -= 1) {\n    const { timestampInNanoseconds, state } = changes[i];\n    if (timestampInNanoseconds <= startTimeInNanoseconds) {\n      span.setAttribute(ATTRIBUTE_NAME, state);\n      break;\n    }\n  }\n};\n\nexport const onEnd = (readableSpan: ReadableSpan): void => {\n  const span = readableSpan as SdkTraceSpan;\n  const startTimeInNanoseconds = hrTimeToNanoseconds(span.startTime);\n\n  // In almost all cases, span is ended without custom time (the endTime is equal current time).\n  // Rarely (e.g. in document-load auto-instrumentation) the root span ends when the whole trace ends.\n  // Because there could be no child span to put the 'pagehide' event, we're extending root spans.\n  const endTimeInNanoseconds = readableSpan.parentSpanId\n    ? hrTimeToNanoseconds(span.endTime)\n    : Infinity;\n\n  for (let i = changes.length - 1; i >= 0; i -= 1) {\n    const { timestampInNanoseconds, timestampInHrTime, state } = changes[i];\n    if (timestampInNanoseconds < startTimeInNanoseconds) {\n      break;\n    }\n    if (\n      timestampInNanoseconds >= startTimeInNanoseconds &&\n      timestampInNanoseconds <= endTimeInNanoseconds\n    ) {\n      span.events.push({\n        name: VISIBILITY_STATE_TO_EVENT_NAMES[state],\n        attributes: undefined,\n        time: timestampInHrTime,\n      });\n      if (state === 'hidden') {\n        span.attributes[ATTRIBUTE_NAME] = state;\n      }\n    }\n  }\n};\n","export const UNKNOWN_SERVICE_NAME = 'unknown';\nexport const BUFFER_MAX_SPANS = 2048;\nexport const MAX_EXPORT_BATCH_SIZE = 50;\nexport const BUFFER_TIMEOUT = 2_000;\nexport const DEFAULT_USER_INTERACTION_ELEMENT_NAME_LIMIT = 20;\nexport const INSTRUMENTED_EVENT_NAMES: (keyof HTMLElementEventMap)[] = [\n  'click',\n  'dblclick',\n  'submit',\n  'reset',\n  'pause',\n  'play',\n  'dragstart',\n  'dragend',\n  'drop',\n];\nexport const ROOT_SPAN_OPERATION = 'root_span.operation';\nexport const ROOT_SPAN_HTTP_URL = 'root_span.http.url';\nexport const XHR_IS_ROOT_SPAN = 'xhr.is_root_span';\nexport const HTTP_ACTION_TYPE = 'http.action_type';\nexport const DEFAULT_SERVICE_NAME = 'default.service.name';\n","import { HrTime } from '@opentelemetry/api';\nimport { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\nconst INSTRUMENTATION_LONG_TASK = '@opentelemetry/instrumentation-long-task';\nconst LONGTASK_PRECISION_NS = 1e7; // 10 milliseconds\nconst MAX_SPANS_SIZE = 100;\nconst MAX_LONG_TASKS_SIZE = 10;\n\nlet spans: ReadableSpan[] = [];\nlet longTasks: ReadableSpan[] = [];\n\n// exported for unit tests\nexport const resetSavedSpans = () => {\n  spans = [];\n  longTasks = [];\n};\n\nconst isTimeRangeInSpan = (\n  longtaskStartTimeNs: number,\n  spanStartTimeNs: number,\n  spanEndTimeNs: number,\n): boolean =>\n  longtaskStartTimeNs + LONGTASK_PRECISION_NS >= spanStartTimeNs &&\n  longtaskStartTimeNs - LONGTASK_PRECISION_NS <= spanEndTimeNs;\n\nconst findBestSpanInTime = (\n  longtaskStartTimeHrTime: HrTime,\n): ReadableSpan | undefined => {\n  const longtaskStartTime = hrTimeToNanoseconds(longtaskStartTimeHrTime);\n\n  for (let i = spans.length - 1; i >= 0; i -= 1) {\n    const span = spans[i];\n    if (\n      isTimeRangeInSpan(\n        longtaskStartTime,\n        hrTimeToNanoseconds(span.startTime),\n        hrTimeToNanoseconds(span.endTime),\n      )\n    ) {\n      return span;\n    }\n  }\n};\n\nconst attachBestLongTasks = (\n  span: ReadableSpan,\n  onLongTaskFound: (span: ReadableSpan) => void,\n) => {\n  const startTime = hrTimeToNanoseconds(span.startTime);\n  const endTime = hrTimeToNanoseconds(span.endTime);\n\n  for (let i = longTasks.length - 1; i >= 0; i -= 1) {\n    const longTask = longTasks[i];\n    if (\n      isTimeRangeInSpan(\n        hrTimeToNanoseconds(longTask.startTime),\n        startTime,\n        endTime,\n      )\n    ) {\n      longTasks.splice(i, 1);\n      attachLongTaskToSpan(longTask, span);\n      onLongTaskFound(longTask);\n    }\n  }\n};\n\nconst attachLongTaskToSpan = (\n  longTask: ReadableSpan,\n  parentSpan: ReadableSpan,\n): void => {\n  // span.parentSpanId is readonly so we need to cast to 'any'\n  (longTask as any).parentSpanId = parentSpan.spanContext().spanId;\n  longTask.spanContext().traceId = parentSpan.spanContext().traceId;\n};\n\nexport const onEnd = (\n  span: ReadableSpan,\n  superOnEnd: (span: ReadableSpan) => void,\n): void => {\n  if (span.instrumentationLibrary.name === INSTRUMENTATION_LONG_TASK) {\n    if (!span.parentSpanId) {\n      const bestParentSpan = findBestSpanInTime(span.startTime);\n      if (bestParentSpan) {\n        attachLongTaskToSpan(span, bestParentSpan);\n      } else {\n        // save this longtask for later and don't emit it yet\n        longTasks.push(span);\n        if (longTasks.length > MAX_LONG_TASKS_SIZE) {\n          longTasks.shift();\n        }\n        return;\n      }\n    }\n  } else {\n    // save ended span, so it can be used for further longtasks\n    spans.push(span);\n    if (spans.length > MAX_SPANS_SIZE) {\n      spans.shift();\n    }\n\n    // try previously ended longtasks without context\n    attachBestLongTasks(span, superOnEnd);\n  }\n\n  superOnEnd(span);\n};\n","import { Span as SdkTraceSpan } from '@opentelemetry/sdk-trace-base';\nimport { AttributeValue, SpanKind } from '@opentelemetry/api';\nimport { XHR_IS_ROOT_SPAN } from '../constants';\n\nexport const isXhrSpan = (span: SdkTraceSpan): boolean =>\n  span.name.startsWith('HTTP ') && span.kind === SpanKind.CLIENT;\n\nexport const isDocumentLoadSpan = (span: SdkTraceSpan): boolean =>\n  span.name === 'documentLoad' &&\n  span.instrumentationLibrary.name ===\n    '@opentelemetry/instrumentation-document-load';\n\nexport const isNavigationSpan = (span: SdkTraceSpan): boolean =>\n  span.name.startsWith('Navigation: ') &&\n  span.instrumentationLibrary.name ===\n    '@opentelemetry/instrumentation-user-interaction';\n\n/**\n * http.action_type is a Sumo Logic specific attribute describing nature of a trace.\n * It's used to separate different top-level user interactions.\n */\nexport type TraceHttpActionType =\n  | 'document_loads'\n  | 'xhr_requests'\n  | 'route_changes';\n\nexport const getTraceHttpActionType = (\n  rootSpan: SdkTraceSpan,\n): TraceHttpActionType | undefined => {\n  if (!rootSpan) return;\n  if (isDocumentLoadSpan(rootSpan)) {\n    return 'document_loads';\n  }\n  if (rootSpan.attributes[XHR_IS_ROOT_SPAN]) {\n    if (isNavigationSpan(rootSpan)) {\n      return 'route_changes';\n    }\n    return 'xhr_requests';\n  }\n};\n\nexport const getSpanHttpUrl = (\n  span: SdkTraceSpan,\n): AttributeValue | undefined =>\n  span.attributes['new.location.href'] || span.attributes['location.href'];\n","import { Context, SpanKind } from '@opentelemetry/api';\nimport {\n  Span as SdkTraceSpan,\n  ReadableSpan,\n} from '@opentelemetry/sdk-trace-base';\nimport {\n  HTTP_ACTION_TYPE,\n  ROOT_SPAN_HTTP_URL,\n  ROOT_SPAN_OPERATION,\n  XHR_IS_ROOT_SPAN,\n} from '../constants';\nimport { getSpanHttpUrl, getTraceHttpActionType } from './utils';\n\nconst INSTRUMENTATION_LONG_TASK = '@opentelemetry/instrumentation-long-task';\nconst MAX_STORED_TRACE_IDS = 50;\n\nconst rootSpansByTraceId: Record<string, SdkTraceSpan> = {};\nconst storedTraceIds: string[] = [];\nconst childSpansToEnrich = new WeakMap<SdkTraceSpan, SdkTraceSpan[]>();\n\nconst getRootSpan = (span: SdkTraceSpan): SdkTraceSpan | undefined =>\n  rootSpansByTraceId[span.spanContext().traceId];\n\nconst isXhrSpan = (span: SdkTraceSpan): boolean =>\n  span.name.startsWith('HTTP ') && span.kind === SpanKind.CLIENT;\n\nconst isLongtaskSpan = (span: SdkTraceSpan): boolean =>\n  span.instrumentationLibrary.name === INSTRUMENTATION_LONG_TASK;\n\nconst enrichChildSpan = (span: SdkTraceSpan, rootSpan: SdkTraceSpan) => {\n  const rootSpanHttpUrl = getSpanHttpUrl(rootSpan);\n\n  span.attributes[ROOT_SPAN_OPERATION] = rootSpan.name;\n  if (rootSpanHttpUrl) {\n    span.attributes[ROOT_SPAN_HTTP_URL] = rootSpanHttpUrl;\n  }\n\n  const isLongtask = isLongtaskSpan(span);\n  if (isLongtask) {\n    // this special attribute is required to calculate longtask metric with proper dimensions\n    const actionType = getTraceHttpActionType(rootSpan);\n    if (actionType) {\n      span.attributes[HTTP_ACTION_TYPE] = actionType;\n    }\n  }\n};\n\nexport const onStart = (span: SdkTraceSpan, context?: Context): void => {\n  const { parentSpanId } = span;\n  if (isXhrSpan(span) && parentSpanId) {\n    const rootSpan = getRootSpan(span);\n    if (rootSpan) {\n      // root span of a xhr span gets this special attribute to indicate that it contains xhr spans\n      rootSpan.attributes[XHR_IS_ROOT_SPAN] = true;\n    }\n  }\n  if (!parentSpanId) {\n    // save root spans for later use\n    const { traceId } = span.spanContext();\n    rootSpansByTraceId[traceId] = span;\n    storedTraceIds.push(traceId);\n    if (storedTraceIds.length > MAX_STORED_TRACE_IDS) {\n      const traceIdToRemove = storedTraceIds.shift()!;\n      delete rootSpansByTraceId[traceIdToRemove];\n    }\n  }\n};\n\nexport const onEnd = (span: ReadableSpan): void => {\n  const sdkSpan = span as SdkTraceSpan;\n\n  const childSpans = childSpansToEnrich.get(sdkSpan);\n  if (childSpans) {\n    childSpans.forEach((span) => enrichChildSpan(span, sdkSpan));\n  }\n\n  const isXhr = isXhrSpan(sdkSpan);\n  const isLongtask = isLongtaskSpan(sdkSpan);\n  if (span.parentSpanId && (isXhr || isLongtask)) {\n    const rootSpan = getRootSpan(sdkSpan);\n    if (rootSpan) {\n      enrichChildSpan(sdkSpan, rootSpan);\n      if (!rootSpan.ended) {\n        // we enrich child spans later once again, because 'new.location.href' may appear with some delay (see instrumentation-user-interaction)\n        const spansToEnrich = childSpansToEnrich.get(rootSpan);\n        if (spansToEnrich) {\n          spansToEnrich.push(sdkSpan);\n        } else {\n          childSpansToEnrich.set(rootSpan, [sdkSpan]);\n        }\n      }\n    }\n  }\n};\n","import { Context } from '@opentelemetry/api';\nimport {\n  ReadableSpan,\n  Span as SdkTraceSpan,\n} from '@opentelemetry/sdk-trace-base';\nimport { SumoLogicSpanProcessor } from '.';\nimport { dropSingleSpanTracesTraceProcessor } from './trace-processor/drop-single-span-traces';\nimport { longtasksTraceProcessor } from './trace-processor/longtasks';\nimport { xhrTraceProcessor } from './trace-processor/xhr';\n\ntype TraceId = string;\n\ninterface InternalTraceRecord {\n  traceId: TraceId;\n  timeout: number;\n\n  /** Only the first root span is recorded  */\n  rootSpan?: SdkTraceSpan;\n\n  /** Call it when metrics are calculated and the root span is ready to be send */\n  send?: () => void;\n\n  /** All ended spans in a trace */\n  spans: SdkTraceSpan[];\n}\n\nexport type TraceRecord = Pick<InternalTraceRecord, 'rootSpan' | 'spans'>;\n\nexport enum TraceProcessorResult {\n  DROP_ROOT_SPAN,\n}\n\nexport type TraceProcessor = (\n  rootSpan: SdkTraceSpan,\n  spans: SdkTraceSpan[],\n  spanProcessor: SumoLogicSpanProcessor,\n) => TraceProcessorResult | void;\n\nconst TIMEOUT = 30_000; // time to process metrics after last trace span start on end\nconst PROCESSORS: TraceProcessor[] = [\n  dropSingleSpanTracesTraceProcessor,\n  longtasksTraceProcessor,\n  xhrTraceProcessor,\n];\n\nconst traces: Record<TraceId, InternalTraceRecord> = {};\n\nexport const getTraceById = (traceId: TraceId): TraceRecord | undefined => {\n  const record = traces[traceId];\n  if (record) {\n    const { rootSpan, spans } = record;\n    return { rootSpan, spans };\n  }\n};\n\nexport const createTraceProcessor = (spanProcessor: SumoLogicSpanProcessor) => {\n  const flush = () => {\n    // we may have no other chance to process saved traces so we need to calculate and send them right now\n    Object.values(traces).forEach((traceRecord) => {\n      processTraceRecord(traceRecord);\n    });\n  };\n\n  document.addEventListener('visibilitychange', () => {\n    flush();\n  });\n\n  window.addEventListener('pagehide', () => {\n    flush();\n  });\n\n  const processTraceRecord = ({\n    traceId,\n    rootSpan,\n    send,\n    spans,\n  }: InternalTraceRecord) => {\n    delete traces[traceId];\n\n    if (!rootSpan || !send) {\n      // trace ended but the root span didn't, so we need to drop the whole trace\n      return;\n    }\n\n    let shouldSend = true;\n\n    PROCESSORS.forEach((producer) => {\n      const result = producer(rootSpan, spans, spanProcessor);\n      if (result === TraceProcessorResult.DROP_ROOT_SPAN) {\n        shouldSend = false;\n      }\n    });\n\n    if (shouldSend) {\n      send();\n    }\n  };\n\n  const processTraceRecordLater = (traceRecord: InternalTraceRecord) => {\n    clearTimeout(traceRecord.timeout);\n    traceRecord.timeout = setTimeout(() => {\n      processTraceRecord(traceRecord);\n    }, TIMEOUT) as unknown as number;\n  };\n\n  return {\n    onStart: (span: SdkTraceSpan, context?: Context): void => {\n      const traceId = span.spanContext().traceId;\n      let traceRecord = traces[traceId];\n      if (!traceRecord) {\n        traceRecord = { traceId, timeout: -1, spans: [] };\n        traces[traceId] = traceRecord;\n      }\n      if (!span.parentSpanId && !traceRecord.rootSpan) {\n        traceRecord.rootSpan = span;\n      }\n      processTraceRecordLater(traceRecord);\n    },\n    onEnd: (\n      readableSpan: ReadableSpan,\n      superOnEnd: (span: ReadableSpan) => void,\n    ): void => {\n      let shouldCallOnEnd = true;\n      const span = readableSpan as SdkTraceSpan;\n      const traceId = span.spanContext().traceId;\n      const traceRecord = traces[traceId];\n      if (traceRecord) {\n        traceRecord.spans.push(span);\n        if (traceRecord.rootSpan === span) {\n          shouldCallOnEnd = false;\n          traceRecord.send = () => {\n            superOnEnd(readableSpan);\n          };\n        }\n        processTraceRecordLater(traceRecord);\n      }\n\n      if (shouldCallOnEnd) {\n        superOnEnd(readableSpan);\n      }\n    },\n  };\n};\n","import { TraceProcessor, TraceProcessorResult } from '../trace-processor';\n\nconst INSTRUMENTATION_USER_INTERACTION =\n  '@opentelemetry/instrumentation-user-interaction';\n\nexport const dropSingleSpanTracesTraceProcessor: TraceProcessor = (\n  rootSpan,\n  spans,\n  spanProcessor,\n) => {\n  if (\n    spanProcessor.shouldDropSingleUserInteractionTraces &&\n    rootSpan.instrumentationLibrary.name === INSTRUMENTATION_USER_INTERACTION &&\n    spans.length === 1\n  ) {\n    return TraceProcessorResult.DROP_ROOT_SPAN;\n  }\n};\n","import { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { TraceProcessor } from '../trace-processor';\n\nexport const LONGTASKS_SUM = 'http.longtasks_sum';\n\nexport const longtasksTraceProcessor: TraceProcessor = (rootSpan, spans) => {\n  const longtasks = spans.filter(\n    (span) =>\n      span.instrumentationLibrary.name ===\n        '@opentelemetry/instrumentation-long-task' && span.name === 'longtask',\n  );\n  if (longtasks.length > 0) {\n    const sumDuration = longtasks\n      .map((span) => hrTimeToNanoseconds(span.duration))\n      .reduce((current, duration) => current + duration, 0);\n    rootSpan.attributes[LONGTASKS_SUM] = sumDuration;\n  }\n};\n","import { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { TraceProcessor } from '../trace-processor';\nimport { isXhrSpan } from '../utils';\n\nexport const TIME_TO_FIRST_XHR = 'http.time_to_first_xhr';\nexport const TIME_IN_XHR_CALLS = 'http.time_in_xhr_calls';\nexport const TIME_TO_LAST_XHR = 'http.time_to_last_xhr';\nexport const TIME_TO_PROCESSING_END = 'http.time_to_xhr_processing_end';\n\ntype SpanInterval = [startTime: number, endTime: number];\n\nexport const xhrTraceProcessor: TraceProcessor = (rootSpan, spans) => {\n  const xhrSpans = spans\n    .filter(isXhrSpan)\n    .sort(\n      (span1, span2) =>\n        hrTimeToNanoseconds(span1.startTime) -\n        hrTimeToNanoseconds(span2.startTime),\n    );\n\n  if (!xhrSpans.length) return;\n  const [firstXhrSpan] = xhrSpans;\n  const lastXhrSpan = xhrSpans[xhrSpans.length - 1];\n\n  // TIME_TO_FIRST_XHR - time from a root span to the beginning of the first xhr span\n  rootSpan.attributes[TIME_TO_FIRST_XHR] =\n    hrTimeToNanoseconds(firstXhrSpan.startTime) -\n    hrTimeToNanoseconds(rootSpan.startTime);\n\n  // TIME_TO_LAST_XHR - time from a root span to the end of the last xhr span\n  rootSpan.attributes[TIME_TO_LAST_XHR] =\n    hrTimeToNanoseconds(lastXhrSpan.endTime) -\n    hrTimeToNanoseconds(rootSpan.startTime);\n\n  // TIME_TO_PROCESSING_END - duration of a trace\n  const maxEndTime = Math.max(\n    ...spans.map((span) => hrTimeToNanoseconds(span.endTime)),\n  );\n  rootSpan.attributes[TIME_TO_PROCESSING_END] =\n    maxEndTime - hrTimeToNanoseconds(rootSpan.startTime);\n\n  // TIME_IN_XHR_CALLS - total duration of xhr spans without overlapping\n  const intervals: SpanInterval[] = [];\n  xhrSpans.forEach((xhrSpan) => {\n    const startTime = hrTimeToNanoseconds(xhrSpan.startTime);\n    const endTime = hrTimeToNanoseconds(xhrSpan.endTime);\n    const lastInterval = intervals[intervals.length - 1];\n    if (!lastInterval || startTime > lastInterval[1]) {\n      intervals.push([startTime, endTime]);\n    } else if (endTime > lastInterval[1]) {\n      lastInterval[1] = endTime;\n    }\n  });\n  rootSpan.attributes[TIME_IN_XHR_CALLS] = intervals.reduce(\n    (sum, [startTime, endTime]) => sum + (endTime - startTime),\n    0,\n  );\n};\n","import { Context } from '@opentelemetry/api';\nimport { RandomIdGenerator } from '@opentelemetry/core';\nimport { Span as SdkTraceSpan } from '@opentelemetry/sdk-trace-base';\n\ninterface Cookie {\n  sessionId: string;\n  lastActivityTimestamp: number;\n}\n\nconst SESSION_ID_ATTRIBUTE = 'rum.session_id';\nconst COOKIE_NAME = 'sumoLogicOpenTelemetryRumSessionId';\nconst COOKIE_VALUE_SEPARATOR = '-';\nconst MAX_INACTIVITY_MS = 1000 * 60 * 5; // 5 minutes\nconst REFRESH_ACTIVITY_TIME_AFTER_MS = 1000 * 30; // 30 seconds\n\nconst getCookieValue = (): Cookie | undefined => {\n  const cookie = document.cookie\n    .split('; ')\n    .find((item) => item.startsWith(`${COOKIE_NAME}=`));\n  if (!cookie) return;\n  const [sessionId, lastActivityTimestamp] = cookie\n    .split('=')[1]\n    .split(COOKIE_VALUE_SEPARATOR);\n  return {\n    sessionId,\n    lastActivityTimestamp: parseInt(lastActivityTimestamp, 10),\n  };\n};\n\nconst setCookieValue = ({ sessionId, lastActivityTimestamp }: Cookie): void => {\n  document.cookie = `${COOKIE_NAME}=${sessionId}${COOKIE_VALUE_SEPARATOR}${lastActivityTimestamp}; path=/`;\n};\n\nconst idGenerator = new RandomIdGenerator();\nlet cookie = getCookieValue();\n\n// exported for unit tests\nexport const resetSessionIdCookie = () => {\n  cookie = undefined;\n};\n\nexport const getCurrentSessionId = () => {\n  const now = Date.now();\n\n  if (cookie) {\n    const inactivityDuration = now - cookie.lastActivityTimestamp;\n    if (inactivityDuration > MAX_INACTIVITY_MS) {\n      // we're no longer interested with session that was inactive for long time\n      cookie = undefined;\n    } else if (inactivityDuration > REFRESH_ACTIVITY_TIME_AFTER_MS) {\n      cookie.lastActivityTimestamp = now;\n      setCookieValue(cookie);\n    }\n  }\n\n  if (!cookie) {\n    cookie = {\n      sessionId: idGenerator.generateTraceId(),\n      lastActivityTimestamp: now,\n    };\n    setCookieValue(cookie);\n  }\n\n  return cookie.sessionId;\n};\n\nexport const onStart = (span: SdkTraceSpan, context?: Context): void => {\n  span.setAttribute(SESSION_ID_ATTRIBUTE, getCurrentSessionId());\n};\n","import { Attributes, Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport {\n  BatchSpanProcessor,\n  Span as SdkTraceSpan,\n  ReadableSpan,\n  SpanExporter,\n  BatchSpanProcessorBrowserConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport * as documentVisibilityState from './document-visibility-state';\nimport * as overrideServiceName from './override-service-name';\nimport * as findLongTaskContext from './find-longtask-context';\nimport * as rootToChildEnrichment from './root-to-child-enrichment';\nimport { createTraceProcessor } from './trace-processor';\nimport * as sessionId from './session-id';\n\nexport interface SumoLogicSpanProcessorConfig\n  extends BatchSpanProcessorBrowserConfig {\n  defaultAttributes?: Attributes;\n  collectSessionId?: boolean;\n  dropSingleUserInteractionTraces?: boolean;\n  getOverriddenServiceName?: (span: SdkTraceSpan) => string;\n  defaultServiceName: string;\n}\n\nexport class SumoLogicSpanProcessor extends BatchSpanProcessor {\n  public shouldCollectSessionId: boolean;\n  public shouldDropSingleUserInteractionTraces: boolean;\n\n  public getOverriddenServiceName?: (span: SdkTraceSpan) => string;\n  public defaultServiceName: string;\n\n  private traceProcessor: ReturnType<typeof createTraceProcessor>;\n\n  constructor(exporter: SpanExporter, config: SumoLogicSpanProcessorConfig) {\n    super(exporter, config);\n    this.shouldCollectSessionId = config.collectSessionId ?? true;\n    this.shouldDropSingleUserInteractionTraces =\n      config.dropSingleUserInteractionTraces ?? true;\n\n    this.getOverriddenServiceName = config.getOverriddenServiceName;\n    this.defaultServiceName = config.defaultServiceName;\n\n    this.traceProcessor = createTraceProcessor(this);\n  }\n\n  onStart(span: SdkTraceSpan, context: Context = ROOT_CONTEXT): void {\n    documentVisibilityState.onStart(span, context);\n    rootToChildEnrichment.onStart(span, context);\n    this.traceProcessor.onStart(span, context);\n    if (this.shouldCollectSessionId) {\n      sessionId.onStart(span, context);\n    }\n    overrideServiceName.onStart(span, context, {\n      getOverriddenServiceName: this.getOverriddenServiceName,\n      defaultServiceName: this.defaultServiceName,\n    });\n\n    // add attributes to all spans\n    span.setAttribute('location.href', location.href);\n\n    super.onStart(span, context);\n  }\n\n  onEnd(span: ReadableSpan): void {\n    documentVisibilityState.onEnd(span);\n\n    // we use callbacks instead of Promises, because even immediately resolved Promise won't be executed synchronously\n    // which will break when spans are ended before closing a page\n    findLongTaskContext.onEnd(span, (span2) => {\n      rootToChildEnrichment.onEnd(span2);\n      this.traceProcessor.onEnd(span2, (span3) => {\n        super.onEnd(span3);\n      });\n    });\n  }\n}\n","import { Span } from '@opentelemetry/sdk-trace-base';\nimport { Context } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { DEFAULT_SERVICE_NAME } from '../constants';\n\ninterface ExtraConfig {\n  getOverriddenServiceName?: (span: Span) => string;\n  defaultServiceName: string;\n}\n\nexport const onStart = (\n  span: Span,\n  context: Context | undefined,\n  config: ExtraConfig,\n): void => {\n  const serviceName = config?.getOverriddenServiceName?.(span);\n\n  if (serviceName !== undefined) {\n    span.setAttribute(SemanticResourceAttributes.SERVICE_NAME, serviceName);\n    span.setAttribute(DEFAULT_SERVICE_NAME, config.defaultServiceName);\n  }\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.32.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hrTime } from '@opentelemetry/core';\nimport { diag } from '@opentelemetry/api';\nimport { InstrumentationBase } from '@opentelemetry/instrumentation';\nimport { VERSION } from './version';\nimport type {\n  PerformanceLongTaskTiming,\n  LongtaskInstrumentationConfig,\n} from './types';\n\nconst LONGTASK_PERFORMANCE_TYPE = 'longtask';\n\nexport class LongTaskInstrumentation extends InstrumentationBase {\n  readonly component: string = 'long-task';\n  readonly version: string = VERSION;\n  moduleName = this.component;\n\n  private _observer?: PerformanceObserver;\n  override _config!: LongtaskInstrumentationConfig;\n\n  /**\n   *\n   * @param config\n   */\n  constructor(config: LongtaskInstrumentationConfig = {}) {\n    super('@opentelemetry/instrumentation-long-task', VERSION, config);\n  }\n\n  init() {}\n\n  private isSupported() {\n    if (\n      typeof PerformanceObserver === 'undefined' ||\n      !PerformanceObserver.supportedEntryTypes\n    ) {\n      return false;\n    }\n\n    return PerformanceObserver.supportedEntryTypes.includes(\n      LONGTASK_PERFORMANCE_TYPE\n    );\n  }\n\n  private _createSpanFromEntry(entry: PerformanceLongTaskTiming) {\n    const span = this.tracer.startSpan(LONGTASK_PERFORMANCE_TYPE, {\n      startTime: hrTime(entry.startTime),\n    });\n    if (this._config.observerCallback) {\n      try {\n        this._config.observerCallback(span, { longtaskEntry: entry });\n      } catch (err) {\n        diag.error('longtask instrumentation: observer callback failed', err);\n      }\n    }\n    span.setAttribute('component', this.component);\n    span.setAttribute('http.url', location.href);\n    span.setAttribute('longtask.name', entry.name);\n    span.setAttribute('longtask.entry_type', entry.entryType);\n    span.setAttribute('longtask.duration', entry.duration);\n\n    if (Array.isArray(entry.attribution)) {\n      entry.attribution.forEach((attribution, index) => {\n        const prefix =\n          entry.attribution.length > 1\n            ? `longtask.attribution[${index}]`\n            : 'longtask.attribution';\n        span.setAttribute(`${prefix}.name`, attribution.name);\n        span.setAttribute(`${prefix}.entry_type`, attribution.entryType);\n        span.setAttribute(`${prefix}.start_time`, attribution.startTime);\n        span.setAttribute(`${prefix}.duration`, attribution.duration);\n        span.setAttribute(\n          `${prefix}.container_type`,\n          attribution.containerType\n        );\n        span.setAttribute(`${prefix}.container_src`, attribution.containerSrc);\n        span.setAttribute(`${prefix}.container_id`, attribution.containerId);\n        span.setAttribute(\n          `${prefix}.container_name`,\n          attribution.containerName\n        );\n      });\n    }\n\n    span.end(hrTime(entry.startTime + entry.duration));\n  }\n\n  override enable() {\n    if (!this.isSupported()) {\n      this._diag.debug('Environment not supported');\n      return;\n    }\n\n    if (this._observer) {\n      // Already enabled\n      return;\n    }\n\n    this._observer = new PerformanceObserver(list => {\n      list\n        .getEntries()\n        .forEach(entry =>\n          this._createSpanFromEntry(entry as PerformanceLongTaskTiming)\n        );\n    });\n    this._observer.observe({\n      type: LONGTASK_PERFORMANCE_TYPE,\n      buffered: true,\n    });\n  }\n\n  override disable() {\n    if (!this._observer) {\n      return;\n    }\n\n    this._observer.disconnect();\n    this._observer = undefined;\n  }\n}\n","import { hrTime, hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport * as api from '@opentelemetry/api';\nimport type { Attributes } from '@opentelemetry/api';\nimport { name, version } from '../../package.json';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { getTraceById } from '../sumologic-span-processor/trace-processor';\nimport {\n  HTTP_ACTION_TYPE,\n  ROOT_SPAN_HTTP_URL,\n  ROOT_SPAN_OPERATION,\n} from '../constants';\nimport {\n  getSpanHttpUrl,\n  getTraceHttpActionType,\n} from '../sumologic-span-processor/utils';\n\ninterface SumoLogicLogsExporterOptions {\n  resource: Resource;\n  attributes: Attributes;\n  collectorUrl: string;\n  maxQueueSize: number;\n  scheduledDelayMillis: number;\n}\n\nexport interface LogRecord {\n  type:\n    | 'uncaughtException'\n    | 'unhandledRejection'\n    | 'consoleError'\n    | 'documentError'\n    | 'customError';\n  message: string;\n  arguments?: any[];\n  element?: {\n    xpath: string;\n  };\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n  };\n  attributes?: Record<string, any>;\n}\n\nexport interface CustomError {\n  message: string;\n  attributes?: Record<string, any>;\n}\n\ntype ProtoValue =\n  | { stringValue: string }\n  | { boolValue: boolean }\n  | { intValue: number }\n  | { doubleValue: number }\n  | { arrayValue: { values: ProtoValue[] } }\n  | { kvlistValue: { values: ProtoAttribute[] } };\n\ninterface ProtoAttribute {\n  key: string;\n  value: ProtoValue;\n}\n\ninterface ProtoLogRecord {\n  timeUnixNano: number;\n  severityNumber?: ProtoSeverityNumber;\n  severityText?: string;\n  name?: string;\n  body?: ProtoValue;\n  attributes?: ProtoAttribute[];\n  droppedAttributesCount: number;\n  traceId?: string;\n  spanId?: string;\n}\n\nenum ProtoSeverityNumber {\n  SEVERITY_NUMBER_UNSPECIFIED,\n  SEVERITY_NUMBER_TRACE,\n  SEVERITY_NUMBER_TRACE2,\n  SEVERITY_NUMBER_TRACE3,\n  SEVERITY_NUMBER_TRACE4,\n  SEVERITY_NUMBER_DEBUG,\n  SEVERITY_NUMBER_DEBUG2,\n  SEVERITY_NUMBER_DEBUG3,\n  SEVERITY_NUMBER_DEBUG4,\n  SEVERITY_NUMBER_INFO,\n  SEVERITY_NUMBER_INFO2,\n  SEVERITY_NUMBER_INFO3,\n  SEVERITY_NUMBER_INFO4,\n  SEVERITY_NUMBER_WARN,\n  SEVERITY_NUMBER_WARN2,\n  SEVERITY_NUMBER_WARN3,\n  SEVERITY_NUMBER_WARN4,\n  SEVERITY_NUMBER_ERROR,\n  SEVERITY_NUMBER_ERROR2,\n  SEVERITY_NUMBER_ERROR3,\n  SEVERITY_NUMBER_ERROR4,\n  SEVERITY_NUMBER_FATAL,\n  SEVERITY_NUMBER_FATAL2,\n  SEVERITY_NUMBER_FATAL3,\n  SEVERITY_NUMBER_FATAL4,\n}\n\nconst protoValue = (value: unknown): ProtoValue => {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return { intValue: value };\n      }\n      return { doubleValue: value };\n    case 'boolean':\n      return { boolValue: value };\n    case 'object':\n      if (Array.isArray(value)) {\n        return {\n          arrayValue: { values: value.map((item) => protoValue(item)) },\n        };\n      }\n      if (value != null) {\n        return {\n          kvlistValue: {\n            values: Object.entries(value).map(([key, keyValue]) =>\n              protoAttribute(key, keyValue),\n            ),\n          },\n        };\n      }\n    default:\n      return { stringValue: String(value) };\n  }\n};\n\nconst protoAttribute = (key: string, value: unknown): ProtoAttribute => ({\n  key,\n  value: protoValue(value),\n});\n\nconst protoAttributes = (object: Attributes): ProtoAttribute[] =>\n  Object.entries(object).map(([key, value]) => protoAttribute(key, value));\n\nconst isReadableSpan = (span: object): span is ReadableSpan =>\n  'name' in span && 'instrumentationLibrary' in span;\n\nlet maxBeaconDataSize = Infinity;\nconst sendData = (url: string, json: string) => {\n  const blob = new Blob([json], { type: 'application/json' });\n  if (blob.size >= maxBeaconDataSize || !navigator.sendBeacon(url, blob)) {\n    maxBeaconDataSize = blob.size;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: json,\n    });\n  }\n};\n\nexport class SumoLogicLogsExporter {\n  private resource: Resource;\n  private defaultAttributes: Attributes;\n  private collectorUrl: string;\n  private maxQueueSize: number;\n  private scheduledDelayMillis: number;\n  private logs: ProtoLogRecord[];\n  private timer: number | undefined;\n\n  constructor({\n    resource,\n    attributes,\n    collectorUrl,\n    maxQueueSize,\n    scheduledDelayMillis,\n  }: SumoLogicLogsExporterOptions) {\n    this.resource = resource;\n    this.defaultAttributes = attributes;\n    this.collectorUrl = collectorUrl;\n    this.maxQueueSize = maxQueueSize;\n    this.scheduledDelayMillis = scheduledDelayMillis;\n    this.logs = [];\n  }\n\n  private onVisibilityChange = () => {\n    if (document.visibilityState === 'hidden') {\n      this.export();\n    }\n  };\n\n  private onPageHide = () => {\n    this.export();\n  };\n\n  enable() {\n    if (document != null) {\n      this.disable();\n      document.addEventListener('visibilitychange', this.onVisibilityChange);\n      document.addEventListener('pagehide', this.onPageHide);\n    }\n  }\n\n  disable() {\n    document.removeEventListener('visibilitychange', this.onVisibilityChange);\n    document.removeEventListener('pagehide', this.onPageHide);\n  }\n\n  private exportWhenNeeded() {\n    if (this.logs.length >= this.maxQueueSize) {\n      this.export();\n    } else if (this.timer === undefined) {\n      this.timer = Number(\n        setTimeout(() => this.export(), this.scheduledDelayMillis),\n      );\n    }\n  }\n\n  recordLog(log: LogRecord) {\n    const attributes: ProtoLogRecord['attributes'] = [\n      ...protoAttributes(this.defaultAttributes),\n      protoAttribute('type', log.type),\n      protoAttribute('http.url', location.href),\n    ];\n\n    const span = api.trace.getSpan(api.context.active());\n    if (span && isReadableSpan(span)) {\n      const rootSpan = getTraceById(span.spanContext().traceId)?.rootSpan;\n      if (rootSpan) {\n        attributes.push(protoAttribute(ROOT_SPAN_OPERATION, rootSpan.name));\n        const httpUrl = getSpanHttpUrl(rootSpan);\n        if (httpUrl) {\n          attributes.push(protoAttribute(ROOT_SPAN_HTTP_URL, httpUrl));\n        }\n        const actionType = getTraceHttpActionType(rootSpan);\n        if (actionType) {\n          attributes.push(protoAttribute(HTTP_ACTION_TYPE, actionType));\n        }\n      }\n    }\n\n    if (log.element) {\n      attributes.push(protoAttribute('element.xpath', log.element.xpath));\n    }\n\n    if (log.error) {\n      attributes.push(protoAttribute('error.name', log.error.name));\n      attributes.push(protoAttribute('error.message', log.error.message));\n      if (log.error.stack) {\n        attributes.push(protoAttribute('error.stack', log.error.stack));\n      }\n    }\n\n    if (log.arguments) {\n      attributes.push(protoAttribute('arguments', log.arguments));\n    }\n\n    if (log.attributes) {\n      Object.entries(log.attributes).forEach(([key, value]) => {\n        attributes.push(protoAttribute(key, value));\n      });\n    }\n\n    this.logs.push({\n      timeUnixNano: hrTimeToNanoseconds(hrTime()),\n      severityNumber: ProtoSeverityNumber.SEVERITY_NUMBER_ERROR,\n      body: {\n        stringValue: log.message,\n      },\n      attributes,\n      droppedAttributesCount: 0,\n      traceId: span?.spanContext().traceId,\n      spanId: span?.spanContext().spanId,\n    });\n\n    this.exportWhenNeeded();\n  }\n\n  recordCustomError = (message: string, attributes?: Record<string, any>) => {\n    this.recordLog({\n      type: 'customError',\n      message,\n      attributes,\n    });\n  };\n\n  private export() {\n    clearTimeout(this.timer);\n    this.timer = undefined;\n    const { logs } = this;\n    if (!logs.length) return;\n    this.logs = [];\n    const json = JSON.stringify({\n      resourceLogs: [\n        {\n          resource: {\n            attributes: protoAttributes(this.resource.attributes),\n          },\n          instrumentationLibraryLogs: [\n            {\n              instrumentationLibrary: {\n                name,\n                version,\n              },\n              logs,\n            },\n          ],\n        },\n      ],\n    });\n    sendData(this.collectorUrl, json);\n  }\n}\n","import { getElementXPath } from '@opentelemetry/sdk-trace-web';\nimport { LogRecord, SumoLogicLogsExporter } from '../sumologic-logs-exporter';\n\nconst MAX_CONSOLE_STRING_LENGTH = 500;\nconst MAX_STACK_TRACE_LENGTH = 5000;\n\ninterface SumoLogicLogsInstrumentationOptions {\n  exporter: SumoLogicLogsExporter;\n}\n\nconst shortenString = (string: string, limit: number): string =>\n  string.length > limit ? `${string.slice(0, limit)}...` : string;\n\nconst maybeErrorToObject = (maybeError: any): LogRecord['error'] | undefined =>\n  maybeError instanceof Error\n    ? {\n        name: maybeError.name,\n        message: maybeError.message,\n        stack: maybeError.stack\n          ? shortenString(maybeError.stack, MAX_STACK_TRACE_LENGTH)\n          : undefined,\n      }\n    : undefined;\n\nconst consoleValueToString = (value: any, deep = 0): string => {\n  if (typeof value === 'string') {\n    const string = shortenString(value, MAX_CONSOLE_STRING_LENGTH);\n    return deep > 0 ? `\"${string}\"` : string;\n  }\n  if (Array.isArray(value)) {\n    if (deep > 0) {\n      return '...';\n    }\n    return `[${value\n      .map((elem) => consoleValueToString(elem, deep + 1))\n      .join(', ')}]`;\n  }\n  if (value instanceof Error) {\n    return consoleValueToString(\n      { name: value.name, message: value.message },\n      deep,\n    );\n  }\n  if (value != null && typeof value === 'object') {\n    if (deep > 0) {\n      return '...';\n    }\n    return `{ ${Object.getOwnPropertyNames(value)\n      .map((key) => `${key}: ${consoleValueToString(value[key], deep + 1)}`)\n      .join(', ')} }`;\n  }\n  return String(value);\n};\n\nconst consoleValueToArgument = (\n  value: any,\n  usedReferences = new Set<any>(),\n): any => {\n  const addedToUsedReferences = !usedReferences.has(value);\n  usedReferences.add(value);\n  if (Array.isArray(value)) {\n    return value.map((elem) => consoleValueToArgument(elem, usedReferences));\n  }\n  if (value != null && typeof value === 'object') {\n    const result: Record<string, any> = {};\n    Object.getOwnPropertyNames(value).forEach((key) => {\n      const keyValue = value[key];\n      result[key] =\n        usedReferences.has(keyValue) &&\n        (keyValue !== value || addedToUsedReferences)\n          ? '[Circular]'\n          : consoleValueToArgument(keyValue);\n    });\n    return result;\n  }\n  return value;\n};\n\nexport class SumoLogicLogsInstrumentation {\n  private exporter: SumoLogicLogsExporter;\n  private isEnabled = false;\n\n  constructor({ exporter }: SumoLogicLogsInstrumentationOptions) {\n    this.exporter = exporter;\n\n    const nativeConsoleError = console.error;\n    console.error = (...args) => {\n      if (this.isEnabled) {\n        this.onConsoleError(args);\n      }\n      nativeConsoleError.apply(console, args);\n    };\n  }\n\n  onError = (error: ErrorEvent) => {\n    this.exporter.recordLog({\n      type: 'uncaughtException',\n      message: error.message,\n      error: maybeErrorToObject(error.error),\n    });\n  };\n\n  onUnhandledRejection = ({ reason }: PromiseRejectionEvent) => {\n    if (!reason) return;\n    const error = maybeErrorToObject(reason);\n    this.exporter.recordLog({\n      type: 'unhandledRejection',\n      message: error ? `Unhandled rejection ${reason}` : String(reason),\n      error,\n    });\n  };\n\n  onDocumentError = ({ target }: ErrorEvent) => {\n    if (!target) return;\n    const xpath = getElementXPath(target);\n    if (!xpath) return;\n    this.exporter.recordLog({\n      type: 'documentError',\n      message: `Uncaught error in element ${xpath}`,\n      element: { xpath },\n    });\n  };\n\n  onConsoleError = (args: any[]) => {\n    const error = args.find(maybeErrorToObject);\n    const consoleArguments =\n      args.length > 3 ||\n      args.find(\n        (elem) =>\n          elem != null && typeof elem === 'object' && !(elem instanceof Error),\n      )\n        ? args.map((arg) => consoleValueToArgument(arg))\n        : undefined;\n    this.exporter.recordLog({\n      type: 'consoleError',\n      message: args.map((elem) => consoleValueToString(elem)).join(' '),\n      arguments: consoleArguments,\n      error,\n    });\n  };\n\n  enable() {\n    this.disable();\n    window.addEventListener('error', this.onError);\n    window.addEventListener('unhandledrejection', this.onUnhandledRejection);\n    document.documentElement.addEventListener('error', this.onDocumentError, {\n      capture: true,\n    });\n    this.isEnabled = true;\n  }\n\n  disable() {\n    window.removeEventListener('error', this.onError);\n    window.removeEventListener('unhandledrejection', this.onUnhandledRejection);\n    document.documentElement.removeEventListener(\n      'error',\n      this.onDocumentError,\n      { capture: true },\n    );\n    this.isEnabled = false;\n  }\n}\n","import { DEFAULT_USER_INTERACTION_ELEMENT_NAME_LIMIT } from './constants';\n\nexport const getUserInteractionSpanName = (\n  eventType: keyof HTMLElementEventMap,\n  element: HTMLElement,\n  userInteractionElementNameLimit?: number,\n): string | undefined => {\n  let id = '';\n  let scanElement: HTMLElement | null = element;\n  while (scanElement && !id) {\n    id =\n      scanElement.getAttribute('aria-label') ||\n      scanElement.id ||\n      scanElement.textContent ||\n      '';\n    id = id.trim();\n    scanElement = scanElement.parentElement;\n  }\n  if (id) {\n    const limit =\n      tryNumber(userInteractionElementNameLimit) ??\n      DEFAULT_USER_INTERACTION_ELEMENT_NAME_LIMIT;\n    if (limit > 0 && id.length > limit) {\n      id = `${id.slice(0, limit - 3)}...`;\n    }\n    return `${eventType} on '${id}'`;\n  }\n};\n\nexport const tryNumber = (input?: string | number): number | undefined => {\n  if (typeof input === 'number') {\n    return input;\n  }\n  return input != null && Number.isFinite(+input) ? +input : undefined;\n};\n\nexport const getCollectionSourceUrl = (sourceUrl: string): string => {\n  const url = new URL(sourceUrl);\n  url.pathname = url.pathname.replace(/\\/v1\\/(traces|metrics|logs)\\/?$/, '');\n  if (!url.pathname.endsWith('/')) {\n    url.pathname += '/';\n  }\n  return url.href;\n};\n","import { W3CTraceContextPropagator } from '@opentelemetry/core';\nimport {\n  Span,\n  Tracer,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/sdk-trace-base';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { SumoLogicContextManager } from './sumologic-context-manager';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { UserInteractionInstrumentation } from '@opentelemetry/instrumentation-user-interaction';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { ExportTimestampEnrichmentExporter } from './sumologic-export-timestamp-enrichment-exporter';\nimport { registerInstrumentations as registerOpenTelemetryInstrumentations } from '@opentelemetry/instrumentation';\nimport * as api from '@opentelemetry/api';\nimport { Resource, ResourceAttributes } from '@opentelemetry/resources';\nimport {\n  SemanticAttributes,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\nimport { SumoLogicSpanProcessor } from './sumologic-span-processor';\nimport { LongTaskInstrumentation } from '@opentelemetry/instrumentation-long-task';\nimport { SumoLogicLogsExporter } from './sumologic-logs-exporter';\nimport { SumoLogicLogsInstrumentation } from './sumologic-logs-instrumentation';\nimport {\n  BUFFER_MAX_SPANS,\n  BUFFER_TIMEOUT,\n  DEFAULT_USER_INTERACTION_ELEMENT_NAME_LIMIT,\n  INSTRUMENTED_EVENT_NAMES,\n  MAX_EXPORT_BATCH_SIZE,\n  UNKNOWN_SERVICE_NAME,\n} from './constants';\nimport {\n  getCollectionSourceUrl,\n  getUserInteractionSpanName,\n  tryNumber,\n} from './utils';\nimport { version } from '../package.json';\nimport { getCurrentSessionId } from './sumologic-span-processor/session-id';\nimport { Attributes } from '@opentelemetry/api';\n\ntype ReadyListener = () => void;\n\ndeclare global {\n  interface Window {\n    sumoLogicOpenTelemetryRum: {\n      initialize: (options: InitializeOptions) => void;\n      readyListeners: ReadyListener[];\n      onReady: (callback: ReadyListener) => void;\n      api: typeof api;\n      tracer: Tracer;\n      registerInstrumentations: () => void;\n      disableInstrumentations: () => void;\n      setDefaultAttribute: (\n        key: string,\n        value: api.AttributeValue | undefined,\n      ) => void;\n      getCurrentSessionId: () => string;\n      recordError: (message: string, attributes?: Record<string, any>) => void;\n    };\n  }\n}\n\ninterface InitializeOptions {\n  collectionSourceUrl: string;\n  authorizationToken?: string;\n  serviceName?: string;\n  applicationName?: string;\n  deploymentEnvironment?: string;\n  defaultAttributes?: api.Attributes;\n  samplingProbability?: number | string;\n  bufferMaxSpans?: number;\n  maxExportBatchSize?: number;\n  bufferTimeout?: number;\n  ignoreUrls?: (string | RegExp)[];\n  propagateTraceHeaderCorsUrls?: (string | RegExp)[];\n  collectSessionId?: boolean;\n  dropSingleUserInteractionTraces?: boolean;\n  collectErrors?: boolean;\n  userInteractionElementNameLimit?: number;\n  getOverriddenServiceName?: (span: Span) => string;\n}\n\nconst useWindow = typeof window === 'object' && window != null;\n\nif (useWindow) {\n  window.sumoLogicOpenTelemetryRum = window.sumoLogicOpenTelemetryRum || {};\n}\n\n// create context manager right now to patch APIs for situations when 'initialize' is called later\nconst contextManager = new SumoLogicContextManager();\ncontextManager.enable();\n\nexport const initialize = ({\n  collectionSourceUrl,\n  authorizationToken,\n  serviceName,\n  applicationName,\n  deploymentEnvironment,\n  defaultAttributes,\n  samplingProbability = 1,\n  bufferMaxSpans = BUFFER_MAX_SPANS,\n  maxExportBatchSize = MAX_EXPORT_BATCH_SIZE,\n  bufferTimeout = BUFFER_TIMEOUT,\n  ignoreUrls = [],\n  propagateTraceHeaderCorsUrls = [],\n  collectSessionId,\n  dropSingleUserInteractionTraces,\n  collectErrors = true,\n  userInteractionElementNameLimit = DEFAULT_USER_INTERACTION_ELEMENT_NAME_LIMIT,\n  getOverriddenServiceName,\n}: InitializeOptions) => {\n  if (!collectionSourceUrl) {\n    throw new Error(\n      'collectionSourceUrl needs to be defined to initialize Sumo Logic OpenTelemetry RUM',\n    );\n  }\n\n  const samplingProbabilityMaybeNumber = tryNumber(samplingProbability) ?? 1;\n\n  const defaultServiceName = serviceName ?? UNKNOWN_SERVICE_NAME;\n\n  const resourceAttributes: ResourceAttributes = {\n    [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName,\n    ['sumologic.rum.version']: version,\n  };\n\n  if (applicationName) {\n    resourceAttributes.application = applicationName;\n  }\n  if (deploymentEnvironment) {\n    resourceAttributes[SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT] =\n      deploymentEnvironment;\n  }\n\n  const resource = new Resource(resourceAttributes);\n\n  const tracesResource = resource.merge(\n    new Resource({\n      ...defaultAttributes,\n\n      // This is a temporary solution not covered by the specification.\n      // Was requested in https://github.com/open-telemetry/opentelemetry-specification/pull/570 .\n      ['sampling.probability']: samplingProbabilityMaybeNumber,\n    }),\n  );\n  const provider = new WebTracerProvider({\n    resource: tracesResource,\n    sampler: new TraceIdRatioBasedSampler(samplingProbabilityMaybeNumber),\n  });\n\n  provider.register({\n    contextManager,\n    propagator: new W3CTraceContextPropagator(),\n  });\n\n  const runtimeDefaultAttributes: Attributes = { ...defaultAttributes };\n\n  const setDefaultAttribute = (\n    key: string,\n    value: api.AttributeValue | undefined,\n  ) => {\n    provider.resource.attributes[key] = value;\n    runtimeDefaultAttributes[key] = value;\n  };\n\n  const parsedCollectionSourceUrl = getCollectionSourceUrl(collectionSourceUrl);\n\n  const collectorExporter = new OTLPTraceExporter({\n    url: `${parsedCollectionSourceUrl}v1/traces`,\n    headers: authorizationToken\n      ? { Authorization: authorizationToken }\n      : undefined,\n  });\n  const tracesExporter = new ExportTimestampEnrichmentExporter(\n    collectorExporter,\n  );\n\n  provider.addSpanProcessor(\n    new SumoLogicSpanProcessor(tracesExporter, {\n      maxQueueSize: bufferMaxSpans,\n      maxExportBatchSize,\n      scheduledDelayMillis: bufferTimeout,\n      collectSessionId,\n      dropSingleUserInteractionTraces,\n      getOverriddenServiceName,\n      defaultServiceName,\n    }),\n  );\n\n  const logsResource = resource.merge(\n    new Resource({\n      [SemanticAttributes.HTTP_USER_AGENT]: navigator.userAgent,\n    }),\n  );\n  const logsExporter = new SumoLogicLogsExporter({\n    resource: logsResource,\n    attributes: runtimeDefaultAttributes,\n    collectorUrl: `${parsedCollectionSourceUrl}v1/logs`,\n    maxQueueSize: bufferMaxSpans,\n    scheduledDelayMillis: bufferTimeout,\n  });\n  const logsInstrumentation = collectErrors\n    ? new SumoLogicLogsInstrumentation({\n        exporter: logsExporter,\n      })\n    : undefined;\n\n  let disableOpenTelemetryInstrumentations: (() => void) | undefined;\n\n  const disableInstrumentations = () => {\n    if (disableOpenTelemetryInstrumentations) {\n      disableOpenTelemetryInstrumentations();\n      logsInstrumentation?.disable();\n      logsExporter.disable();\n      disableOpenTelemetryInstrumentations = undefined;\n    }\n  };\n\n  const registerInstrumentations = () => {\n    disableInstrumentations();\n    logsExporter.enable();\n    logsInstrumentation?.enable();\n    disableOpenTelemetryInstrumentations =\n      registerOpenTelemetryInstrumentations({\n        tracerProvider: provider,\n        instrumentations: [\n          new LongTaskInstrumentation({\n            enabled: false,\n          }),\n          new DocumentLoadInstrumentation({ enabled: false }),\n          new UserInteractionInstrumentation({\n            enabled: false,\n            eventNames: INSTRUMENTED_EVENT_NAMES,\n            shouldPreventSpanCreation: (eventType, element, span) => {\n              const newName = getUserInteractionSpanName(\n                eventType,\n                element,\n                userInteractionElementNameLimit,\n              );\n              if (newName) {\n                span.updateName(newName);\n              }\n              return false;\n            },\n          }),\n          new XMLHttpRequestInstrumentation({\n            enabled: false,\n            propagateTraceHeaderCorsUrls,\n            ignoreUrls: [collectionSourceUrl, ...ignoreUrls],\n          }),\n          new FetchInstrumentation({\n            enabled: false,\n            propagateTraceHeaderCorsUrls,\n            ignoreUrls,\n          }),\n        ],\n      });\n  };\n\n  const tracer = provider.getTracer('@sumologic/opentelemetry-rum');\n  registerInstrumentations();\n\n  const result = {\n    readyListeners: [],\n    onReady: (callback: ReadyListener) => {\n      callback();\n    },\n    api,\n    tracer,\n    registerInstrumentations,\n    disableInstrumentations,\n    setDefaultAttribute,\n    getCurrentSessionId,\n    recordError: logsExporter.recordCustomError,\n  };\n\n  if (useWindow) {\n    Object.assign(window.sumoLogicOpenTelemetryRum, result);\n  }\n\n  return result;\n};\n\nif (useWindow) {\n  window.sumoLogicOpenTelemetryRum.initialize = initialize;\n\n  const readyListeners = window.sumoLogicOpenTelemetryRum?.readyListeners;\n  if (Array.isArray(readyListeners)) {\n    readyListeners.forEach((callback) => callback());\n  }\n}\n\nconst tryJson = (input: string | undefined): any => {\n  if (!input) {\n    return undefined;\n  }\n  try {\n    return JSON.parse(input);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nconst tryList = (input: string | undefined): string[] | undefined => {\n  if (typeof input !== 'string') {\n    return undefined;\n  }\n  return input.split(',').map((str) => str.trim());\n};\n\nconst tryRegExpsList = (input?: string): RegExp[] | undefined =>\n  (tryJson(input) || tryList(input))?.map((str: string) => new RegExp(str));\n\nif (\n  typeof document === 'object' &&\n  document != null &&\n  document.currentScript &&\n  document.currentScript.dataset.collectionSourceUrl\n) {\n  const {\n    collectionSourceUrl,\n    authorizationToken,\n    serviceName,\n    applicationName,\n    defaultAttributes,\n    samplingProbability,\n    bufferMaxSpans,\n    bufferTimeout,\n    ignoreUrls,\n    propagateTraceHeaderCorsUrls,\n  } = document.currentScript.dataset;\n\n  (window as any).opentelemetry = initialize({\n    collectionSourceUrl,\n    authorizationToken,\n    serviceName,\n    applicationName,\n    defaultAttributes: tryJson(defaultAttributes),\n    samplingProbability: tryNumber(samplingProbability),\n    bufferMaxSpans: tryNumber(bufferMaxSpans),\n    bufferTimeout: tryNumber(bufferTimeout),\n    ignoreUrls: tryRegExpsList(ignoreUrls),\n    propagateTraceHeaderCorsUrls: tryRegExpsList(\n      propagateTraceHeaderCorsUrls,\n    ) || [/.*/],\n  });\n}\n"],"names":["_globalThis","globalThis","self","window","global","VERSION","re","isCompatible","ownVersion","acceptedVersions","Set","rejectedVersions","myVersionMatch","match","ownVersionParsed","globalVersion","_reject","v","add","_accept","has","globalVersionMatch","globalVersionParsed","_makeCompatibilityCheck","major","split","GLOBAL_OPENTELEMETRY_API_KEY","Symbol","for","_global","registerGlobal","type","instance","diag","allowOverride","api","version","err","Error","error","stack","message","debug","getGlobal","unregisterGlobal","DiagComponentLogger","[object Object]","props","this","_namespace","namespace","args","logProxy","funcName","logger","unshift","DiagLogLevel","DiagAPI","_logProxy","setLogger","optionsOrLogLevel","logLevel","INFO","oldLogger","newLogger","maxLevel","_filterFunc","theLevel","theFunc","bind","NONE","ALL","ERROR","warn","WARN","info","DEBUG","verbose","VERBOSE","createLogLevelDiagLogger","suppressOverrideMessage","disable","createComponentLogger","options","_instance","BaggageImpl","entries","_entries","Map","key","entry","get","Object","assign","Array","from","map","k","newBaggage","set","delete","keys","baggageEntryMetadataSymbol","createBaggage","baggageEntryMetadataFromString","str","__TYPE__","toString","createContextKey","description","BaseContext","parentContext","_currentContext","getValue","setValue","value","context","deleteValue","ROOT_CONTEXT","consoleMap","n","c","NoopMetric","NoopObservableMetric","_callback","NOOP_METER","_name","_options","NOOP_HISTOGRAM_METRIC","NOOP_COUNTER_METRIC","NOOP_UP_DOWN_COUNTER_METRIC","NOOP_OBSERVABLE_GAUGE_METRIC","NOOP_OBSERVABLE_COUNTER_METRIC","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","_observables","_value","_attributes","ValueType","defaultTextMapGetter","carrier","defaultTextMapSetter","API_NAME","NOOP_CONTEXT_MANAGER","_context","fn","thisArg","call","target","ContextAPI","contextManager","_getContextManager","active","with","TraceFlags","INVALID_SPANID","INVALID_TRACEID","INVALID_SPAN_CONTEXT","traceId","spanId","traceFlags","NonRecordingSpan","_spanContext","_key","_status","_endTime","_exception","_time","SPAN_KEY","getSpan","undefined","getActiveSpan","getInstance","setSpan","span","deleteSpan","setSpanContext","spanContext","getSpanContext","VALID_TRACEID_REGEX","VALID_SPANID_REGEX","isValidTraceId","test","isValidSpanId","isSpanContextValid","wrapSpanContext","contextApi","NoopTracer","name","Boolean","root","parentFromContext","arg2","arg3","arg4","opts","ctx","arguments","length","startSpan","contextWithSpanSet","NOOP_TRACER","ProxyTracer","_provider","_getTracer","_fn","tracer","Reflect","apply","startActiveSpan","_delegate","getDelegateTracer","NOOP_TRACER_PROVIDER","_version","ProxyTracerProvider","delegate","getTracer","SamplingDecision","SpanKind","SpanStatusCode","VALID_KEY_REGEX","RegExp","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","TraceStateImpl","rawTraceState","_parse","traceState","_clone","_internalState","_keys","reduce","agg","push","join","reverse","part","listMember","trim","i","indexOf","slice","validateKey","validateValue","size","NOOP_METER_PROVIDER","MetricsAPI","provider","getMeterProvider","getMeter","metrics","BAGGAGE_KEY","getBaggage","getActiveBaggage","setBaggage","baggage","deleteBaggage","NOOP_TEXT_MAP_PROPAGATOR","_carrier","PropagationAPI","propagator","setter","_getGlobalPropagator","inject","getter","extract","fields","propagation","TraceAPI","success","_proxyTracerProvider","setDelegate","getTracerProvider","trace","_consoleFunc","console","log","SUPPRESS_TRACING_KEY","isTracingSuppressed","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_HEADER","parsePairKeyValue","valueProps","keyPairPart","shift","keyPair","decodeURIComponent","metadata","parseKeyPairsIntoRecord","filter","headers","W3CBaggagePropagator","headerValue","keyPairs","hValue","current","serializeKeyPairs","getAllEntries","encodeURIComponent","getKeyPairs","pair","baggageString","isArray","forEach","baggageEntry","sanitizeAttributes","attributes","out","val","isAttributeKey","isAttributeValue","arr","element","isValidPrimitiveAttributeValue","isHomogeneousAttributeValueArray","delegateHandler","ex","JSON","stringify","result","getOwnPropertyNames","propertyName","String","getPrototypeOf","flattenException","stringifyException","globalErrorHandler","TracesSamplerValues","ENVIRONMENT_BOOLEAN_KEYS","isEnvVarABoolean","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","DEFAULT_ENVIRONMENT","OTEL_SDK_DISABLED","CONTAINER_NAME","ECS_CONTAINER_METADATA_URI_V4","ECS_CONTAINER_METADATA_URI","HOSTNAME","KUBERNETES_SERVICE_HOST","NAMESPACE","OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_EXPORTER_JAEGER_AGENT_HOST","OTEL_EXPORTER_JAEGER_AGENT_PORT","OTEL_EXPORTER_JAEGER_ENDPOINT","OTEL_EXPORTER_JAEGER_PASSWORD","OTEL_EXPORTER_JAEGER_USER","OTEL_EXPORTER_OTLP_ENDPOINT","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","OTEL_EXPORTER_OTLP_HEADERS","OTEL_EXPORTER_OTLP_TRACES_HEADERS","OTEL_EXPORTER_OTLP_METRICS_HEADERS","OTEL_EXPORTER_OTLP_TIMEOUT","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_METRICS_TIMEOUT","OTEL_EXPORTER_ZIPKIN_ENDPOINT","OTEL_LOG_LEVEL","OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS","OTEL_RESOURCE_ATTRIBUTES","OTEL_SERVICE_NAME","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_TRACES_EXPORTER","OTEL_TRACES_SAMPLER","ParentBasedAlwaysOn","OTEL_TRACES_SAMPLER_ARG","OTEL_EXPORTER_OTLP_INSECURE","OTEL_EXPORTER_OTLP_TRACES_INSECURE","OTEL_EXPORTER_OTLP_METRICS_INSECURE","OTEL_EXPORTER_OTLP_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE","OTEL_EXPORTER_OTLP_COMPRESSION","OTEL_EXPORTER_OTLP_TRACES_COMPRESSION","OTEL_EXPORTER_OTLP_METRICS_COMPRESSION","OTEL_EXPORTER_OTLP_CLIENT_KEY","OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY","OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY","OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_PROTOCOL","OTEL_EXPORTER_OTLP_TRACES_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","parseBoolean","environment","values","toLowerCase","parseNumber","min","max","Number","isNaN","parseStringList","output","input","separator","givenValue","logLevelMap","setLogLevelFromEnv","toUpperCase","parseEnvironment","env","getEnv","globalEnv","hexToBase64","hexStr","hexStrLen","hexAsciiCharsStr","hexPair","substring","hexVal","parseInt","fromCharCode","btoa","SHARED_CHAR_CODES_ARRAY","getIdGenerator","bytes","Math","floor","random","otperformance","performance","SemanticAttributes","SemanticResourceAttributes","SDK_INFO","MILLISECONDS_TO_NANOSECONDS","pow","SECOND_TO_NANOSECONDS","millisToHrTime","epochMillis","epochSeconds","trunc","round","getTimeOrigin","timeOrigin","perf","timing","fetchStart","hrTime","performanceNow","addHrTimes","now","timeInputToHrTime","time","isTimeInputHrTime","Date","getTime","TypeError","hrTimeToNanoseconds","isTimeInput","time1","time2","ExportResultCode","CompositePropagator","config","_propagators","propagators","_fields","p","x","y","concat","constructor","TraceState","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","TRACE_PARENT_REGEX","W3CTraceContextPropagator","traceParent","serialize","traceParentHeader","exec","parseTraceParent","isRemote","traceStateHeader","state","RPCType","nullTag","undefinedTag","funcToString","Function","prototype","objectCtorString","getPrototype","func","transform","arg","objectProto","hasOwnProperty","symToStringTag","toStringTag","nativeObjectToString","isPlainObject","isObjectLike","isOwn","tag","unmasked","e","getRawTag","objectToString","baseGetTag","proto","Ctor","takeValue","mergeTwoObjects","one","two","level","objects","isPrimitive","isFunction","j","isObject","shouldMerge","twoValue","obj1","obj2","wasObjectReferenced","arr1","arr2","obj","urlMatches","url","urlToMatch","isUrlIgnored","ignoredUrls","ignoreUrl","Deferred","_promise","Promise","resolve","reject","_resolve","promise","BindOnceFuture","_that","isCalled","_isCalled","_deferred","then","Span","parentTracer","spanName","kind","parentSpanId","links","startTime","_deprecatedClock","code","UNSET","_performanceStartTime","_performanceOffset","_startTimeProvided","_getTime","resource","instrumentationLibrary","_spanLimits","getSpanLimits","_spanProcessor","getActiveSpanProcessor","onStart","_attributeValueLengthLimit","attributeValueLengthLimit","_isSpanEnded","attributeCountLimit","_truncateToSize","setAttribute","attributesOrStartTime","timeStamp","eventCountLimit","events","status","endTime","_ended","_duration","seconds","nanos","hrTimeDuration","onEnd","inp","msDuration","exception","addEvent","duration","ended","limit","substr","_truncateToLimitUtil","AlwaysOffSampler","decision","NOT_RECORD","AlwaysOnSampler","RECORD_AND_SAMPLED","ParentBasedSampler","_root","_remoteParentSampled","remoteParentSampled","_remoteParentNotSampled","remoteParentNotSampled","_localParentSampled","localParentSampled","_localParentNotSampled","localParentNotSampled","spanKind","SAMPLED","shouldSample","TraceIdRatioBasedSampler","_ratio","_normalize","_upperBound","_accumulate","ratio","accumulation","pos","FALLBACK_OTEL_TRACES_SAMPLER","AlwaysOn","loadDefaultConfig","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","generalLimits","spanLimits","linkCountLimit","AlwaysOff","ParentBasedAlwaysOff","TraceIdRatio","getSamplerProbabilityFromEnv","ParentBasedTraceIdRatio","probability","reconfigureLimits","userConfig","parsedEnvConfig","process","BatchSpanProcessor","_exporter","_maxExportBatchSize","maxExportBatchSize","_maxQueueSize","maxQueueSize","_scheduledDelayMillis","scheduledDelayMillis","_exportTimeoutMillis","exportTimeoutMillis","_shutdownOnce","_shutdown","_flushAll","_span","_parentContext","_addToBuffer","onShutdown","shutdown","_finishedSpans","_maybeStartTimer","promises","ceil","_flushOneBatch","all","catch","_clearTimer","timer","setTimeout","suppressTracing","export","splice","clearTimeout","SUCCESS","_timer","super","onInit","disableAutoFlushOnDocumentHide","document","_visibilityChangeListener","visibilityState","forceFlush","_pageHideListener","addEventListener","removeEventListener","RandomIdGenerator","Tracer","_tracerProvider","localConfig","perInstanceDefaults","DEFAULT_CONFIG","mergeConfig","_sampler","_generalLimits","_idGenerator","idGenerator","api.context","api.trace","parentSpan","api.diag","api.INVALID_SPAN_CONTEXT","parentSpanContext","generateSpanId","generateTraceId","api.SpanKind","INTERNAL","link","samplingResult","api.SamplingDecision","api.TraceFlags","initAttributes","setAttributes","__awaiter","_arguments","P","generator","fulfilled","step","next","rejected","done","Resource","EMPTY","other","mergedAttributes","MultiSpanProcessor","_spanProcessors","spanProcessor","NoopSpanProcessor","ForceFlushState","PerformanceTimingNames","BasicTracerProvider","mergedConfig","WeakMap","merge","empty","default","_config","defaultExporter","_buildExporterFromEnv","batchProcessor","activeSpanProcessor","schemaUrl","_tracers","_registeredSpanProcessors","setGlobalTracerProvider","_buildPropagatorFromEnv","setGlobalContextManager","setGlobalPropagator","timeout","timeoutInterval","resolved","results","errors","_registeredPropagators","_registeredExporters","uniquePropagatorNames","validPropagators","_getPropagator","list","item","exporterName","exporter","_getSpanExporter","StackContextManager","manager","contextWrapper","defineProperty","enumerable","configurable","writable","_bindFunction","_enabled","previousContext","WebTracerProvider","enable","register","urlNormalizingAnchor","hasKey","addSpanNetworkEvent","performanceName","addSpanNetworkEvents","PTN","FETCH_START","DOMAIN_LOOKUP_START","DOMAIN_LOOKUP_END","CONNECT_START","SECURE_CONNECTION_START","CONNECT_END","REQUEST_START","RESPONSE_START","RESPONSE_END","encodedLength","ENCODED_BODY_SIZE","decodedLength","DECODED_BODY_SIZE","getResource","spanUrl","startTimeHR","endTimeHR","resources","ignoredResources","WeakSet","initiatorType","parsedSpanUrl","parseUrl","filteredResources","resourceStartTime","resourceEndTime","filterResourcesForSpan","mainRequest","sorted","sort","a","b","valueA","valueB","sortResources","origin","location","corsPreFlightRequest","corsPreFlightRequestEndTime","spanEndTimeHR","spanEndTime","minTime","bestGap","currentGap","findMainRequest","responseEnd","URL","href","createElement","getElementXPath","optimised","nodeType","Node","DOCUMENT_NODE","targetValue","index","parentNode","allowedTypes","CDATA_SECTION_NODE","TEXT_NODE","elements","childNodes","localName","getNodeIndex","nodeValue","ELEMENT_NODE","id","getAttribute","COMMENT_NODE","getNodeValue","xpath","shouldPropagateTraceHeaders","propagateTraceHeaderCorsUrls","propagateTraceHeaderUrls","some","propagateTraceHeaderUrl","parseInstrumentationOptions","instrumentations","option","instrumentationName","registerInstrumentations","tracerProvider","meterProvider","instrumentation","setTracerProvider","setMeterProvider","getConfig","enabled","enableInstrumentations","disableInstrumentations","funktion","propertyIsEnumerable","shimmer","wrap","nodule","wrapper","original","wrapped","unwrap","__unwrap","massWrap","nodules","names","massUnwrap","EventNames","shimmer_1","InstrumentationBase","instrumentationVersion","shimmer.wrap","shimmer.unwrap","shimmer.massWrap","shimmer.massUnwrap","_diag","_tracer","_meter","_updateMetricInstruments","meter","safeExecuteInTheMiddle","execute","onFinish","preventThrowingError","isWrapped","__original","__wrapped","AttributeNames","XMLHttpRequestInstrumentation","component","xhr","_getConfig","api.propagation","setRequestHeader","childSpan","end","xhrMem","parsedUrl","statusText","HTTP_STATUS_TEXT","host","protocol","replace","navigator","userAgent","applyCustomAttributesOnSpan","_xhrMem","PerformanceObserver","PerformanceResourceTiming","createdResources","observer","getEntries","observe","entryTypes","_tasksCount","clearTimingResources","clearResourceTimings","_usedResources","getEntriesByType","_markResourceAsUsed","_addChildSpan","callbackToRemoveEvents","method","ignoreUrls","currentSpan","CLIENT","METHOD_OPEN","_cleanPreviousSpanInformation","plugin","_createSpan","endSpan","eventName","_applyAttributesAfterXHR","performanceEndTime","sendStartTime","_findResourceAndAddNetworkEvents","_addFinalSpanAttributes","_clearResources","endSpanTimeout","onError","EVENT_ERROR","onAbort","EVENT_ABORT","onTimeout","EVENT_TIMEOUT","onLoad","EVENT_LOAD","METHOD_SEND","unregister","disconnect","_addHeaders","_addResourceObserver","moduleName","XMLHttpRequest","open","_unwrap","send","_wrap","_patchOpen","_patchSend","FetchInstrumentation","web.PerformanceTimingNames","ignoreNetworkEvents","web.addSpanNetworkEvents","response","web.parseUrl","web.shouldPropagateTraceHeaders","Request","h","Headers","core.isUrlIgnored","COMPONENT","resourcesObserver","web.getResource","spanData","core.millisToHrTime","core.hrTime","createdSpan","_prepareSpanData","endSpanOnError","_applyAttributesAfterFetch","_endSpan","endSpanOnSuccess","onSuccess","resClone","clone","resClone4Hook","body","reader","getReader","read","request","fetch","_patchConstructor","wrapWithToString","copyToStringFrom","source","originalToString","objectContexts","setObjectContext","object","OnProperties","MessagePort","WebSocket","Worker","IDBIndex","IDBRequest","IDBOpenDBRequest","IDBDatabase","IDBTransaction","IDBCursor","patchEvents","wrappedOnListeners","patchOnProperty","property","descriptor","getOwnPropertyDescriptor","listener","wrappedListener","wrappedEventListeners","EventTarget","handleEvent","properties","patchOnProperties","unpatchEvents","unpatchOnProperties","unpatchOnProperty","patchMessageChannel","MessageChannel","messagePorts","port1","port2","targetPort","OBSERVERS","patchObservers","OriginalObserver","ObserverWithContext","patchPromise","OriginalPromise","PromiseWithContext","shouldBindCallbackForTimeout","ms","patchTimers","getActiveContextFromUnknown","getObjectContext","t","r","delta","supportedEntryTypes","includes","buffered","o","u","persisted","f","s","m","firstHiddenTime","d","getEntriesByName","requestAnimationFrame","l","T","passive","capture","g","w","E","entryType","cancelable","processingStart","S","vitalsMetricNames","FCP","FIRST_CONTENTFUL_PAINT","FID","FIRST_INPUT_DELAY","TTFB","TIME_TO_FIRST_BYTE","LCP","LARGEST_CONTENTFUL_PAINT","CLS","CUMULATIVE_LAYOUT_SHIFT","performancePaintNames","first-paint","FIRST_PAINT","vitalsMetricAsAttributes","addSpanPerformancePaintEvents","callback","missedMetrics","spanIsEnded","performancePaintTiming","metric","handleNewMetric","hadRecentInput","takeRecords","getCLS","getFCP","getFID","once","getLCP","navigationStart","responseStart","readyState","getTTFB","lcpRecord","DocumentLoadInstrumentation","_collectPerformance","rootSpan","_initResourceSpan","metaElement","getElementsByTagName","find","performanceNavigationTiming","performanceTiming","getPerformanceNavigationEntries","traceparent","content","_startSpan","DOCUMENT_LOAD","fetchSpan","DOCUMENT_FETCH","PAGE_TITLE","title","_addResourcesSpans","UNLOAD_EVENT_START","UNLOAD_EVENT_END","DOM_INTERACTIVE","DOM_CONTENT_LOADED_EVENT_START","DOM_CONTENT_LOADED_EVENT_END","DOM_COMPLETE","LOAD_EVENT_START","LOAD_EVENT_END","RESOURCE_FETCH","_onDocumentLoaded","_waitForPageLoad","DEFAULT_EVENT_NAMES","defaultShouldPreventSpanCreation","getCurrentLocation","pathname","search","hash","UserInteractionInstrumentation","_eventNames","eventNames","_shouldPreventSpanCreation","shouldPreventSpanCreation","HTMLElement","hasAttribute","_allowEventName","EVENT_TYPE","TARGET_ELEMENT","tagName","TARGET_XPATH","HTTP_URL","HTTP_USER_AGENT","api.ROOT_CONTEXT","_spansData","taskCount","on","listener2Type","_wrappedListeners","element2patched","patched","useCapture","addEventListenerContext","patchedListener","event","removePatchedListener","eventSpan","_eventsSpanMap","spansData","currentLocation","_invokeListener","lastListenerEndHrTime","_updateSpanAsNavigation","UIEvent","isTrusted","addPatchedListener","Window","updateName","_isEnabled","_getPatchableEventTargets","_patchAddEventListener","_patchRemoveEventListener","DEFAULT_TRACE_TIMEOUT","configureExporterTimeout","timeoutMillis","invalidTimeout","definedTimeout","getExporterTimeoutFromEnv","defaultTimeout","OTLPExporterError","data","minimumFailedSendBeaconPayloadSize","ESpanKind","AggregationTemporality","DataPointType","AggregatorKind","InstrumentType","toAttributes","toKeyValue","toAnyValue","stringValue","isInteger","intValue","doubleValue","boolValue","Uint8Array","bytesValue","arrayValue","kvlistValue","sdkSpanToOtlpSpan","useHex","core.hexToBase64","startTimeUnixNano","endTimeUnixNano","droppedAttributesCount","toOtlpSpanEvent","droppedEventsCount","toOtlpLink","droppedLinksCount","timedEvent","timeUnixNano","spanRecordsToResourceSpans","readableSpans","entryIterator","resourceMap","record","ilmMap","instrumentationLibraryKey","records","createResourceMap","scopeResourceSpans","ilmIterator","ilmEntry","scopeSpans","spans","readableSpan","scope","transformedSpans","DEFAULT_COLLECTOR_RESOURCE_PATH","OTLPTraceExporter","getDefaultUrl","hostname","_concurrencyLimit","concurrencyLimit","items","resultCallback","FAILED","_sendingPromises","_export","_useXHR","sendBeacon","_headers","partialHeaders","parseHeaders","baggageUtils.parseKeyPairsIntoRecord","serviceRequest","convert","blobPropertyBag","blob","Blob","sendWithBeacon","exporterTimeout","reqIsDestroyed","exporterTimer","abort","Accept","Content-Type","onreadystatechange","DONE","sendWithXhr","popPromise","resourceSpans","createExportTraceServiceRequest","appendRootPathToUrlIfNeeded","path","endsWith","ExportTimestampEnrichmentExporter","exportTimestamp","ATTRIBUTE_NAME","VISIBILITY_STATE_TO_EVENT_NAMES","visible","hidden","changes","initialState","currentState","updateState","newState","timestampInHrTime","timestampInNanoseconds","INSTRUMENTED_EVENT_NAMES","ROOT_SPAN_OPERATION","ROOT_SPAN_HTTP_URL","XHR_IS_ROOT_SPAN","HTTP_ACTION_TYPE","LONGTASK_PRECISION_NS","longTasks","isTimeRangeInSpan","longtaskStartTimeNs","spanStartTimeNs","spanEndTimeNs","attachLongTaskToSpan","longTask","superOnEnd","bestParentSpan","longtaskStartTimeHrTime","longtaskStartTime","findBestSpanInTime","onLongTaskFound","attachBestLongTasks","isXhrSpan","startsWith","getTraceHttpActionType","isNavigationSpan","getSpanHttpUrl","rootSpansByTraceId","storedTraceIds","childSpansToEnrich","getRootSpan","isLongtaskSpan","enrichChildSpan","rootSpanHttpUrl","actionType","TraceProcessorResult","PROCESSORS","shouldDropSingleUserInteractionTraces","DROP_ROOT_SPAN","longtasks","sumDuration","xhrSpans","span1","span2","firstXhrSpan","lastXhrSpan","maxEndTime","intervals","xhrSpan","lastInterval","sum","traces","COOKIE_NAME","setCookieValue","sessionId","lastActivityTimestamp","cookie","getCookieValue","getCurrentSessionId","inactivityDuration","SumoLogicSpanProcessor","shouldCollectSessionId","collectSessionId","dropSingleUserInteractionTraces","getOverriddenServiceName","defaultServiceName","traceProcessor","flush","traceRecord","processTraceRecord","shouldSend","producer","processTraceRecordLater","shouldCallOnEnd","createTraceProcessor","startTimeInNanoseconds","documentVisibilityState.onStart","traceIdToRemove","rootToChildEnrichment.onStart","sessionId.onStart","serviceName","overrideServiceName.onStart","endTimeInNanoseconds","documentVisibilityState.onEnd","findLongTaskContext.onEnd","sdkSpan","childSpans","isXhr","isLongtask","spansToEnrich","rootToChildEnrichment.onEnd","span3","LONGTASK_PERFORMANCE_TYPE","LongTaskInstrumentation","observerCallback","longtaskEntry","attribution","prefix","containerType","containerSrc","containerId","containerName","isSupported","_observer","_createSpanFromEntry","ProtoSeverityNumber","protoValue","keyValue","protoAttribute","protoAttributes","maxBeaconDataSize","SumoLogicLogsExporter","collectorUrl","recordLog","defaultAttributes","logs","onVisibilityChange","onPageHide","isReadableSpan","getTraceById","httpUrl","severityNumber","SEVERITY_NUMBER_ERROR","exportWhenNeeded","json","resourceLogs","instrumentationLibraryLogs","sendData","shortenString","string","maybeErrorToObject","maybeError","consoleValueToString","deep","elem","consoleValueToArgument","usedReferences","addedToUsedReferences","SumoLogicLogsInstrumentation","reason","consoleArguments","nativeConsoleError","isEnabled","onConsoleError","onUnhandledRejection","documentElement","onDocumentError","tryNumber","isFinite","useWindow","sumoLogicOpenTelemetryRum","setImmediate","queueMicrotask","initialize","collectionSourceUrl","authorizationToken","applicationName","deploymentEnvironment","samplingProbability","bufferMaxSpans","bufferTimeout","collectErrors","userInteractionElementNameLimit","samplingProbabilityMaybeNumber","resourceAttributes","sumologic.rum.version","application","tracesResource","sampling.probability","runtimeDefaultAttributes","parsedCollectionSourceUrl","sourceUrl","getCollectionSourceUrl","collectorExporter","Authorization","tracesExporter","addSpanProcessor","logsResource","logsExporter","logsInstrumentation","disableOpenTelemetryInstrumentations","registerOpenTelemetryInstrumentations","eventType","newName","scanElement","textContent","parentElement","getUserInteractionSpanName","readyListeners","onReady","setDefaultAttribute","recordError","recordCustomError","tryJson","parse","tryRegExpsList","tryList","currentScript","dataset","opentelemetry"],"mappings":"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"}